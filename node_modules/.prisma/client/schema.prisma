// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  password String? // Optional for social auth users
  name     String?
  avatar   String? // Profile picture URL from social providers
  plan     UserPlan @default(FREE)
  isAdmin  Boolean  @default(false) // Admin access flag

  // Usage tracking for free tier limits
  monthlyTasksUsed Int      @default(0)
  lastUsageReset   DateTime @default(now())

  // Authentication metadata
  emailVerified Boolean      @default(false)
  signupMethod  SignupMethod @default(EMAIL)
  lastLoginAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // OAuth tokens and social accounts
  asanaTokens    AsanaToken[]
  socialAccounts SocialAccount[]
  omnifocusSetup OmniFocusSetup?

  // Sync relationships
  syncMappings SyncMapping[]
  syncLogs     SyncLog[]

  // Support relationships
  supportTickets SupportTicket[]

  @@map("users")
}

model SocialAccount {
  id            String       @id @default(cuid())
  userId        String
  provider      AuthProvider
  providerId    String // User ID from the provider
  providerEmail String? // Email from provider (might differ from user.email)
  accessToken   String?
  refreshToken  String?
  expiresAt     DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("social_accounts")
}

model AsanaToken {
  id           String    @id @default(cuid())
  userId       String    @unique
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("asana_tokens")
}

model OmniFocusSetup {
  id        String   @id @default(cuid())
  userId    String   @unique
  agentKey  String   @unique // Secret key for local agent auth
  isActive  Boolean  @default(false)
  version   String? // "3" or "4"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("omnifocus_setups")
}

model SyncMapping {
  id               String    @id @default(cuid())
  userId           String
  asanaProjectId   String
  asanaProjectName String
  ofProjectName    String
  isActive         Boolean   @default(true)
  lastSyncAt       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  syncLogs SyncLog[]

  @@unique([userId, asanaProjectId])
  @@map("sync_mappings")
}

model SyncLog {
  id            String        @id @default(cuid())
  userId        String
  syncMappingId String
  direction     SyncDirection
  status        SyncStatus
  itemsSynced   Int           @default(0) @map("itemssynced")
  errorMessage  String?
  createdAt     DateTime      @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  syncMapping SyncMapping @relation(fields: [syncMappingId], references: [id], onDelete: Cascade)

  @@map("sync_logs")
}

enum UserPlan {
  FREE
  PRO
  ENTERPRISE
}

enum SignupMethod {
  EMAIL
  ASANA
  GOOGLE
  GITHUB
  MICROSOFT
}

enum AuthProvider {
  ASANA
  GOOGLE
  GITHUB
  MICROSOFT
}

enum SyncDirection {
  ASANA_TO_OF
  OF_TO_ASANA
  BIDIRECTIONAL
}

enum SyncStatus {
  PENDING
  RUNNING
  SUCCESS
  ERROR
}

model SupportTicket {
  id       String          @id @default(cuid())
  userId   String
  name     String
  email    String
  subject  String
  category SupportCategory
  message  String
  priority SupportPriority @default(NORMAL)
  status   SupportStatus   @default(OPEN)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses SupportTicketResponse[]

  @@map("support_tickets")
}

model SupportTicketResponse {
  id         String   @id @default(cuid())
  ticketId   String
  message    String
  isFromUser Boolean  @default(true)
  createdAt  DateTime @default(now())

  ticket SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("support_ticket_responses")
}

enum SupportCategory {
  GENERAL   @map("general")
  TECHNICAL @map("technical")
  BILLING   @map("billing")
  FEATURE   @map("feature")
  BUG       @map("bug")
}

enum SupportPriority {
  LOW    @map("low")
  NORMAL @map("normal")
  HIGH   @map("high")
  URGENT @map("urgent")
}

enum SupportStatus {
  OPEN        @map("open")
  IN_PROGRESS @map("in_progress")
  WAITING     @map("waiting")
  CLOSED      @map("closed")
}
