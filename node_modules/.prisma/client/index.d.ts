
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model SocialAccount
 * 
 */
export type SocialAccount = $Result.DefaultSelection<Prisma.$SocialAccountPayload>
/**
 * Model AsanaToken
 * 
 */
export type AsanaToken = $Result.DefaultSelection<Prisma.$AsanaTokenPayload>
/**
 * Model OmniFocusSetup
 * 
 */
export type OmniFocusSetup = $Result.DefaultSelection<Prisma.$OmniFocusSetupPayload>
/**
 * Model SyncMapping
 * 
 */
export type SyncMapping = $Result.DefaultSelection<Prisma.$SyncMappingPayload>
/**
 * Model SyncLog
 * 
 */
export type SyncLog = $Result.DefaultSelection<Prisma.$SyncLogPayload>
/**
 * Model SupportTicket
 * 
 */
export type SupportTicket = $Result.DefaultSelection<Prisma.$SupportTicketPayload>
/**
 * Model SupportTicketResponse
 * 
 */
export type SupportTicketResponse = $Result.DefaultSelection<Prisma.$SupportTicketResponsePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserPlan: {
  FREE: 'FREE',
  PRO: 'PRO',
  ENTERPRISE: 'ENTERPRISE'
};

export type UserPlan = (typeof UserPlan)[keyof typeof UserPlan]


export const SignupMethod: {
  EMAIL: 'EMAIL',
  ASANA: 'ASANA',
  GOOGLE: 'GOOGLE',
  GITHUB: 'GITHUB',
  MICROSOFT: 'MICROSOFT'
};

export type SignupMethod = (typeof SignupMethod)[keyof typeof SignupMethod]


export const AuthProvider: {
  ASANA: 'ASANA',
  GOOGLE: 'GOOGLE',
  GITHUB: 'GITHUB',
  MICROSOFT: 'MICROSOFT'
};

export type AuthProvider = (typeof AuthProvider)[keyof typeof AuthProvider]


export const SyncDirection: {
  ASANA_TO_OF: 'ASANA_TO_OF',
  OF_TO_ASANA: 'OF_TO_ASANA',
  BIDIRECTIONAL: 'BIDIRECTIONAL'
};

export type SyncDirection = (typeof SyncDirection)[keyof typeof SyncDirection]


export const SyncStatus: {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  SUCCESS: 'SUCCESS',
  ERROR: 'ERROR'
};

export type SyncStatus = (typeof SyncStatus)[keyof typeof SyncStatus]


export const SupportCategory: {
  GENERAL: 'GENERAL',
  TECHNICAL: 'TECHNICAL',
  BILLING: 'BILLING',
  FEATURE: 'FEATURE',
  BUG: 'BUG'
};

export type SupportCategory = (typeof SupportCategory)[keyof typeof SupportCategory]


export const SupportPriority: {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type SupportPriority = (typeof SupportPriority)[keyof typeof SupportPriority]


export const SupportStatus: {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  WAITING: 'WAITING',
  CLOSED: 'CLOSED'
};

export type SupportStatus = (typeof SupportStatus)[keyof typeof SupportStatus]

}

export type UserPlan = $Enums.UserPlan

export const UserPlan: typeof $Enums.UserPlan

export type SignupMethod = $Enums.SignupMethod

export const SignupMethod: typeof $Enums.SignupMethod

export type AuthProvider = $Enums.AuthProvider

export const AuthProvider: typeof $Enums.AuthProvider

export type SyncDirection = $Enums.SyncDirection

export const SyncDirection: typeof $Enums.SyncDirection

export type SyncStatus = $Enums.SyncStatus

export const SyncStatus: typeof $Enums.SyncStatus

export type SupportCategory = $Enums.SupportCategory

export const SupportCategory: typeof $Enums.SupportCategory

export type SupportPriority = $Enums.SupportPriority

export const SupportPriority: typeof $Enums.SupportPriority

export type SupportStatus = $Enums.SupportStatus

export const SupportStatus: typeof $Enums.SupportStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.socialAccount`: Exposes CRUD operations for the **SocialAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SocialAccounts
    * const socialAccounts = await prisma.socialAccount.findMany()
    * ```
    */
  get socialAccount(): Prisma.SocialAccountDelegate<ExtArgs>;

  /**
   * `prisma.asanaToken`: Exposes CRUD operations for the **AsanaToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AsanaTokens
    * const asanaTokens = await prisma.asanaToken.findMany()
    * ```
    */
  get asanaToken(): Prisma.AsanaTokenDelegate<ExtArgs>;

  /**
   * `prisma.omniFocusSetup`: Exposes CRUD operations for the **OmniFocusSetup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OmniFocusSetups
    * const omniFocusSetups = await prisma.omniFocusSetup.findMany()
    * ```
    */
  get omniFocusSetup(): Prisma.OmniFocusSetupDelegate<ExtArgs>;

  /**
   * `prisma.syncMapping`: Exposes CRUD operations for the **SyncMapping** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SyncMappings
    * const syncMappings = await prisma.syncMapping.findMany()
    * ```
    */
  get syncMapping(): Prisma.SyncMappingDelegate<ExtArgs>;

  /**
   * `prisma.syncLog`: Exposes CRUD operations for the **SyncLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SyncLogs
    * const syncLogs = await prisma.syncLog.findMany()
    * ```
    */
  get syncLog(): Prisma.SyncLogDelegate<ExtArgs>;

  /**
   * `prisma.supportTicket`: Exposes CRUD operations for the **SupportTicket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SupportTickets
    * const supportTickets = await prisma.supportTicket.findMany()
    * ```
    */
  get supportTicket(): Prisma.SupportTicketDelegate<ExtArgs>;

  /**
   * `prisma.supportTicketResponse`: Exposes CRUD operations for the **SupportTicketResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SupportTicketResponses
    * const supportTicketResponses = await prisma.supportTicketResponse.findMany()
    * ```
    */
  get supportTicketResponse(): Prisma.SupportTicketResponseDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    SocialAccount: 'SocialAccount',
    AsanaToken: 'AsanaToken',
    OmniFocusSetup: 'OmniFocusSetup',
    SyncMapping: 'SyncMapping',
    SyncLog: 'SyncLog',
    SupportTicket: 'SupportTicket',
    SupportTicketResponse: 'SupportTicketResponse'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "socialAccount" | "asanaToken" | "omniFocusSetup" | "syncMapping" | "syncLog" | "supportTicket" | "supportTicketResponse"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      SocialAccount: {
        payload: Prisma.$SocialAccountPayload<ExtArgs>
        fields: Prisma.SocialAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SocialAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SocialAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          findFirst: {
            args: Prisma.SocialAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SocialAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          findMany: {
            args: Prisma.SocialAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>[]
          }
          create: {
            args: Prisma.SocialAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          createMany: {
            args: Prisma.SocialAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SocialAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>[]
          }
          delete: {
            args: Prisma.SocialAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          update: {
            args: Prisma.SocialAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          deleteMany: {
            args: Prisma.SocialAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SocialAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SocialAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          aggregate: {
            args: Prisma.SocialAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSocialAccount>
          }
          groupBy: {
            args: Prisma.SocialAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<SocialAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.SocialAccountCountArgs<ExtArgs>
            result: $Utils.Optional<SocialAccountCountAggregateOutputType> | number
          }
        }
      }
      AsanaToken: {
        payload: Prisma.$AsanaTokenPayload<ExtArgs>
        fields: Prisma.AsanaTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AsanaTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsanaTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AsanaTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsanaTokenPayload>
          }
          findFirst: {
            args: Prisma.AsanaTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsanaTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AsanaTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsanaTokenPayload>
          }
          findMany: {
            args: Prisma.AsanaTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsanaTokenPayload>[]
          }
          create: {
            args: Prisma.AsanaTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsanaTokenPayload>
          }
          createMany: {
            args: Prisma.AsanaTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AsanaTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsanaTokenPayload>[]
          }
          delete: {
            args: Prisma.AsanaTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsanaTokenPayload>
          }
          update: {
            args: Prisma.AsanaTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsanaTokenPayload>
          }
          deleteMany: {
            args: Prisma.AsanaTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AsanaTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AsanaTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsanaTokenPayload>
          }
          aggregate: {
            args: Prisma.AsanaTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAsanaToken>
          }
          groupBy: {
            args: Prisma.AsanaTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<AsanaTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.AsanaTokenCountArgs<ExtArgs>
            result: $Utils.Optional<AsanaTokenCountAggregateOutputType> | number
          }
        }
      }
      OmniFocusSetup: {
        payload: Prisma.$OmniFocusSetupPayload<ExtArgs>
        fields: Prisma.OmniFocusSetupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OmniFocusSetupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OmniFocusSetupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OmniFocusSetupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OmniFocusSetupPayload>
          }
          findFirst: {
            args: Prisma.OmniFocusSetupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OmniFocusSetupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OmniFocusSetupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OmniFocusSetupPayload>
          }
          findMany: {
            args: Prisma.OmniFocusSetupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OmniFocusSetupPayload>[]
          }
          create: {
            args: Prisma.OmniFocusSetupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OmniFocusSetupPayload>
          }
          createMany: {
            args: Prisma.OmniFocusSetupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OmniFocusSetupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OmniFocusSetupPayload>[]
          }
          delete: {
            args: Prisma.OmniFocusSetupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OmniFocusSetupPayload>
          }
          update: {
            args: Prisma.OmniFocusSetupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OmniFocusSetupPayload>
          }
          deleteMany: {
            args: Prisma.OmniFocusSetupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OmniFocusSetupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OmniFocusSetupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OmniFocusSetupPayload>
          }
          aggregate: {
            args: Prisma.OmniFocusSetupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOmniFocusSetup>
          }
          groupBy: {
            args: Prisma.OmniFocusSetupGroupByArgs<ExtArgs>
            result: $Utils.Optional<OmniFocusSetupGroupByOutputType>[]
          }
          count: {
            args: Prisma.OmniFocusSetupCountArgs<ExtArgs>
            result: $Utils.Optional<OmniFocusSetupCountAggregateOutputType> | number
          }
        }
      }
      SyncMapping: {
        payload: Prisma.$SyncMappingPayload<ExtArgs>
        fields: Prisma.SyncMappingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SyncMappingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncMappingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SyncMappingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncMappingPayload>
          }
          findFirst: {
            args: Prisma.SyncMappingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncMappingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SyncMappingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncMappingPayload>
          }
          findMany: {
            args: Prisma.SyncMappingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncMappingPayload>[]
          }
          create: {
            args: Prisma.SyncMappingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncMappingPayload>
          }
          createMany: {
            args: Prisma.SyncMappingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SyncMappingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncMappingPayload>[]
          }
          delete: {
            args: Prisma.SyncMappingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncMappingPayload>
          }
          update: {
            args: Prisma.SyncMappingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncMappingPayload>
          }
          deleteMany: {
            args: Prisma.SyncMappingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SyncMappingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SyncMappingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncMappingPayload>
          }
          aggregate: {
            args: Prisma.SyncMappingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSyncMapping>
          }
          groupBy: {
            args: Prisma.SyncMappingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SyncMappingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SyncMappingCountArgs<ExtArgs>
            result: $Utils.Optional<SyncMappingCountAggregateOutputType> | number
          }
        }
      }
      SyncLog: {
        payload: Prisma.$SyncLogPayload<ExtArgs>
        fields: Prisma.SyncLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SyncLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SyncLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>
          }
          findFirst: {
            args: Prisma.SyncLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SyncLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>
          }
          findMany: {
            args: Prisma.SyncLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>[]
          }
          create: {
            args: Prisma.SyncLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>
          }
          createMany: {
            args: Prisma.SyncLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SyncLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>[]
          }
          delete: {
            args: Prisma.SyncLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>
          }
          update: {
            args: Prisma.SyncLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>
          }
          deleteMany: {
            args: Prisma.SyncLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SyncLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SyncLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>
          }
          aggregate: {
            args: Prisma.SyncLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSyncLog>
          }
          groupBy: {
            args: Prisma.SyncLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<SyncLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.SyncLogCountArgs<ExtArgs>
            result: $Utils.Optional<SyncLogCountAggregateOutputType> | number
          }
        }
      }
      SupportTicket: {
        payload: Prisma.$SupportTicketPayload<ExtArgs>
        fields: Prisma.SupportTicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupportTicketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupportTicketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketPayload>
          }
          findFirst: {
            args: Prisma.SupportTicketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupportTicketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketPayload>
          }
          findMany: {
            args: Prisma.SupportTicketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketPayload>[]
          }
          create: {
            args: Prisma.SupportTicketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketPayload>
          }
          createMany: {
            args: Prisma.SupportTicketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SupportTicketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketPayload>[]
          }
          delete: {
            args: Prisma.SupportTicketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketPayload>
          }
          update: {
            args: Prisma.SupportTicketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketPayload>
          }
          deleteMany: {
            args: Prisma.SupportTicketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SupportTicketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SupportTicketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketPayload>
          }
          aggregate: {
            args: Prisma.SupportTicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSupportTicket>
          }
          groupBy: {
            args: Prisma.SupportTicketGroupByArgs<ExtArgs>
            result: $Utils.Optional<SupportTicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupportTicketCountArgs<ExtArgs>
            result: $Utils.Optional<SupportTicketCountAggregateOutputType> | number
          }
        }
      }
      SupportTicketResponse: {
        payload: Prisma.$SupportTicketResponsePayload<ExtArgs>
        fields: Prisma.SupportTicketResponseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupportTicketResponseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupportTicketResponseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketResponsePayload>
          }
          findFirst: {
            args: Prisma.SupportTicketResponseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupportTicketResponseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketResponsePayload>
          }
          findMany: {
            args: Prisma.SupportTicketResponseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketResponsePayload>[]
          }
          create: {
            args: Prisma.SupportTicketResponseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketResponsePayload>
          }
          createMany: {
            args: Prisma.SupportTicketResponseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SupportTicketResponseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketResponsePayload>[]
          }
          delete: {
            args: Prisma.SupportTicketResponseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketResponsePayload>
          }
          update: {
            args: Prisma.SupportTicketResponseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketResponsePayload>
          }
          deleteMany: {
            args: Prisma.SupportTicketResponseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SupportTicketResponseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SupportTicketResponseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportTicketResponsePayload>
          }
          aggregate: {
            args: Prisma.SupportTicketResponseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSupportTicketResponse>
          }
          groupBy: {
            args: Prisma.SupportTicketResponseGroupByArgs<ExtArgs>
            result: $Utils.Optional<SupportTicketResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupportTicketResponseCountArgs<ExtArgs>
            result: $Utils.Optional<SupportTicketResponseCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    asanaTokens: number
    socialAccounts: number
    syncMappings: number
    syncLogs: number
    supportTickets: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asanaTokens?: boolean | UserCountOutputTypeCountAsanaTokensArgs
    socialAccounts?: boolean | UserCountOutputTypeCountSocialAccountsArgs
    syncMappings?: boolean | UserCountOutputTypeCountSyncMappingsArgs
    syncLogs?: boolean | UserCountOutputTypeCountSyncLogsArgs
    supportTickets?: boolean | UserCountOutputTypeCountSupportTicketsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAsanaTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AsanaTokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSocialAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialAccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSyncMappingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SyncMappingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSyncLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SyncLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSupportTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupportTicketWhereInput
  }


  /**
   * Count Type SyncMappingCountOutputType
   */

  export type SyncMappingCountOutputType = {
    syncLogs: number
  }

  export type SyncMappingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    syncLogs?: boolean | SyncMappingCountOutputTypeCountSyncLogsArgs
  }

  // Custom InputTypes
  /**
   * SyncMappingCountOutputType without action
   */
  export type SyncMappingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncMappingCountOutputType
     */
    select?: SyncMappingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SyncMappingCountOutputType without action
   */
  export type SyncMappingCountOutputTypeCountSyncLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SyncLogWhereInput
  }


  /**
   * Count Type SupportTicketCountOutputType
   */

  export type SupportTicketCountOutputType = {
    responses: number
  }

  export type SupportTicketCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    responses?: boolean | SupportTicketCountOutputTypeCountResponsesArgs
  }

  // Custom InputTypes
  /**
   * SupportTicketCountOutputType without action
   */
  export type SupportTicketCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicketCountOutputType
     */
    select?: SupportTicketCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SupportTicketCountOutputType without action
   */
  export type SupportTicketCountOutputTypeCountResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupportTicketResponseWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    monthlyTasksUsed: number | null
  }

  export type UserSumAggregateOutputType = {
    monthlyTasksUsed: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    plan: $Enums.UserPlan | null
    isAdmin: boolean | null
    monthlyTasksUsed: number | null
    lastUsageReset: Date | null
    emailVerified: boolean | null
    signupMethod: $Enums.SignupMethod | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    plan: $Enums.UserPlan | null
    isAdmin: boolean | null
    monthlyTasksUsed: number | null
    lastUsageReset: Date | null
    emailVerified: boolean | null
    signupMethod: $Enums.SignupMethod | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    avatar: number
    plan: number
    isAdmin: number
    monthlyTasksUsed: number
    lastUsageReset: number
    emailVerified: number
    signupMethod: number
    lastLoginAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    monthlyTasksUsed?: true
  }

  export type UserSumAggregateInputType = {
    monthlyTasksUsed?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    plan?: true
    isAdmin?: true
    monthlyTasksUsed?: true
    lastUsageReset?: true
    emailVerified?: true
    signupMethod?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    plan?: true
    isAdmin?: true
    monthlyTasksUsed?: true
    lastUsageReset?: true
    emailVerified?: true
    signupMethod?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    plan?: true
    isAdmin?: true
    monthlyTasksUsed?: true
    lastUsageReset?: true
    emailVerified?: true
    signupMethod?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string | null
    name: string | null
    avatar: string | null
    plan: $Enums.UserPlan
    isAdmin: boolean
    monthlyTasksUsed: number
    lastUsageReset: Date
    emailVerified: boolean
    signupMethod: $Enums.SignupMethod
    lastLoginAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    plan?: boolean
    isAdmin?: boolean
    monthlyTasksUsed?: boolean
    lastUsageReset?: boolean
    emailVerified?: boolean
    signupMethod?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asanaTokens?: boolean | User$asanaTokensArgs<ExtArgs>
    socialAccounts?: boolean | User$socialAccountsArgs<ExtArgs>
    omnifocusSetup?: boolean | User$omnifocusSetupArgs<ExtArgs>
    syncMappings?: boolean | User$syncMappingsArgs<ExtArgs>
    syncLogs?: boolean | User$syncLogsArgs<ExtArgs>
    supportTickets?: boolean | User$supportTicketsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    plan?: boolean
    isAdmin?: boolean
    monthlyTasksUsed?: boolean
    lastUsageReset?: boolean
    emailVerified?: boolean
    signupMethod?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    plan?: boolean
    isAdmin?: boolean
    monthlyTasksUsed?: boolean
    lastUsageReset?: boolean
    emailVerified?: boolean
    signupMethod?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asanaTokens?: boolean | User$asanaTokensArgs<ExtArgs>
    socialAccounts?: boolean | User$socialAccountsArgs<ExtArgs>
    omnifocusSetup?: boolean | User$omnifocusSetupArgs<ExtArgs>
    syncMappings?: boolean | User$syncMappingsArgs<ExtArgs>
    syncLogs?: boolean | User$syncLogsArgs<ExtArgs>
    supportTickets?: boolean | User$supportTicketsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      asanaTokens: Prisma.$AsanaTokenPayload<ExtArgs>[]
      socialAccounts: Prisma.$SocialAccountPayload<ExtArgs>[]
      omnifocusSetup: Prisma.$OmniFocusSetupPayload<ExtArgs> | null
      syncMappings: Prisma.$SyncMappingPayload<ExtArgs>[]
      syncLogs: Prisma.$SyncLogPayload<ExtArgs>[]
      supportTickets: Prisma.$SupportTicketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string | null
      name: string | null
      avatar: string | null
      plan: $Enums.UserPlan
      isAdmin: boolean
      monthlyTasksUsed: number
      lastUsageReset: Date
      emailVerified: boolean
      signupMethod: $Enums.SignupMethod
      lastLoginAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asanaTokens<T extends User$asanaTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$asanaTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsanaTokenPayload<ExtArgs>, T, "findMany"> | Null>
    socialAccounts<T extends User$socialAccountsArgs<ExtArgs> = {}>(args?: Subset<T, User$socialAccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findMany"> | Null>
    omnifocusSetup<T extends User$omnifocusSetupArgs<ExtArgs> = {}>(args?: Subset<T, User$omnifocusSetupArgs<ExtArgs>>): Prisma__OmniFocusSetupClient<$Result.GetResult<Prisma.$OmniFocusSetupPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    syncMappings<T extends User$syncMappingsArgs<ExtArgs> = {}>(args?: Subset<T, User$syncMappingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncMappingPayload<ExtArgs>, T, "findMany"> | Null>
    syncLogs<T extends User$syncLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$syncLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "findMany"> | Null>
    supportTickets<T extends User$supportTicketsArgs<ExtArgs> = {}>(args?: Subset<T, User$supportTicketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupportTicketPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly plan: FieldRef<"User", 'UserPlan'>
    readonly isAdmin: FieldRef<"User", 'Boolean'>
    readonly monthlyTasksUsed: FieldRef<"User", 'Int'>
    readonly lastUsageReset: FieldRef<"User", 'DateTime'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly signupMethod: FieldRef<"User", 'SignupMethod'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.asanaTokens
   */
  export type User$asanaTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AsanaToken
     */
    select?: AsanaTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsanaTokenInclude<ExtArgs> | null
    where?: AsanaTokenWhereInput
    orderBy?: AsanaTokenOrderByWithRelationInput | AsanaTokenOrderByWithRelationInput[]
    cursor?: AsanaTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AsanaTokenScalarFieldEnum | AsanaTokenScalarFieldEnum[]
  }

  /**
   * User.socialAccounts
   */
  export type User$socialAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    where?: SocialAccountWhereInput
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    cursor?: SocialAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SocialAccountScalarFieldEnum | SocialAccountScalarFieldEnum[]
  }

  /**
   * User.omnifocusSetup
   */
  export type User$omnifocusSetupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OmniFocusSetup
     */
    select?: OmniFocusSetupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OmniFocusSetupInclude<ExtArgs> | null
    where?: OmniFocusSetupWhereInput
  }

  /**
   * User.syncMappings
   */
  export type User$syncMappingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncMapping
     */
    select?: SyncMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncMappingInclude<ExtArgs> | null
    where?: SyncMappingWhereInput
    orderBy?: SyncMappingOrderByWithRelationInput | SyncMappingOrderByWithRelationInput[]
    cursor?: SyncMappingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SyncMappingScalarFieldEnum | SyncMappingScalarFieldEnum[]
  }

  /**
   * User.syncLogs
   */
  export type User$syncLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    where?: SyncLogWhereInput
    orderBy?: SyncLogOrderByWithRelationInput | SyncLogOrderByWithRelationInput[]
    cursor?: SyncLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SyncLogScalarFieldEnum | SyncLogScalarFieldEnum[]
  }

  /**
   * User.supportTickets
   */
  export type User$supportTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicket
     */
    select?: SupportTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketInclude<ExtArgs> | null
    where?: SupportTicketWhereInput
    orderBy?: SupportTicketOrderByWithRelationInput | SupportTicketOrderByWithRelationInput[]
    cursor?: SupportTicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupportTicketScalarFieldEnum | SupportTicketScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model SocialAccount
   */

  export type AggregateSocialAccount = {
    _count: SocialAccountCountAggregateOutputType | null
    _min: SocialAccountMinAggregateOutputType | null
    _max: SocialAccountMaxAggregateOutputType | null
  }

  export type SocialAccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    provider: $Enums.AuthProvider | null
    providerId: string | null
    providerEmail: string | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SocialAccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    provider: $Enums.AuthProvider | null
    providerId: string | null
    providerEmail: string | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SocialAccountCountAggregateOutputType = {
    id: number
    userId: number
    provider: number
    providerId: number
    providerEmail: number
    accessToken: number
    refreshToken: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SocialAccountMinAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    providerId?: true
    providerEmail?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SocialAccountMaxAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    providerId?: true
    providerEmail?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SocialAccountCountAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    providerId?: true
    providerEmail?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SocialAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialAccount to aggregate.
     */
    where?: SocialAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialAccounts to fetch.
     */
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SocialAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SocialAccounts
    **/
    _count?: true | SocialAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SocialAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SocialAccountMaxAggregateInputType
  }

  export type GetSocialAccountAggregateType<T extends SocialAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateSocialAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSocialAccount[P]>
      : GetScalarType<T[P], AggregateSocialAccount[P]>
  }




  export type SocialAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialAccountWhereInput
    orderBy?: SocialAccountOrderByWithAggregationInput | SocialAccountOrderByWithAggregationInput[]
    by: SocialAccountScalarFieldEnum[] | SocialAccountScalarFieldEnum
    having?: SocialAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SocialAccountCountAggregateInputType | true
    _min?: SocialAccountMinAggregateInputType
    _max?: SocialAccountMaxAggregateInputType
  }

  export type SocialAccountGroupByOutputType = {
    id: string
    userId: string
    provider: $Enums.AuthProvider
    providerId: string
    providerEmail: string | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: SocialAccountCountAggregateOutputType | null
    _min: SocialAccountMinAggregateOutputType | null
    _max: SocialAccountMaxAggregateOutputType | null
  }

  type GetSocialAccountGroupByPayload<T extends SocialAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SocialAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SocialAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SocialAccountGroupByOutputType[P]>
            : GetScalarType<T[P], SocialAccountGroupByOutputType[P]>
        }
      >
    >


  export type SocialAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provider?: boolean
    providerId?: boolean
    providerEmail?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["socialAccount"]>

  export type SocialAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provider?: boolean
    providerId?: boolean
    providerEmail?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["socialAccount"]>

  export type SocialAccountSelectScalar = {
    id?: boolean
    userId?: boolean
    provider?: boolean
    providerId?: boolean
    providerEmail?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SocialAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SocialAccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SocialAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SocialAccount"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      provider: $Enums.AuthProvider
      providerId: string
      providerEmail: string | null
      accessToken: string | null
      refreshToken: string | null
      expiresAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["socialAccount"]>
    composites: {}
  }

  type SocialAccountGetPayload<S extends boolean | null | undefined | SocialAccountDefaultArgs> = $Result.GetResult<Prisma.$SocialAccountPayload, S>

  type SocialAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SocialAccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SocialAccountCountAggregateInputType | true
    }

  export interface SocialAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SocialAccount'], meta: { name: 'SocialAccount' } }
    /**
     * Find zero or one SocialAccount that matches the filter.
     * @param {SocialAccountFindUniqueArgs} args - Arguments to find a SocialAccount
     * @example
     * // Get one SocialAccount
     * const socialAccount = await prisma.socialAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SocialAccountFindUniqueArgs>(args: SelectSubset<T, SocialAccountFindUniqueArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SocialAccount that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SocialAccountFindUniqueOrThrowArgs} args - Arguments to find a SocialAccount
     * @example
     * // Get one SocialAccount
     * const socialAccount = await prisma.socialAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SocialAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, SocialAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SocialAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountFindFirstArgs} args - Arguments to find a SocialAccount
     * @example
     * // Get one SocialAccount
     * const socialAccount = await prisma.socialAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SocialAccountFindFirstArgs>(args?: SelectSubset<T, SocialAccountFindFirstArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SocialAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountFindFirstOrThrowArgs} args - Arguments to find a SocialAccount
     * @example
     * // Get one SocialAccount
     * const socialAccount = await prisma.socialAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SocialAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, SocialAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SocialAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SocialAccounts
     * const socialAccounts = await prisma.socialAccount.findMany()
     * 
     * // Get first 10 SocialAccounts
     * const socialAccounts = await prisma.socialAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const socialAccountWithIdOnly = await prisma.socialAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SocialAccountFindManyArgs>(args?: SelectSubset<T, SocialAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SocialAccount.
     * @param {SocialAccountCreateArgs} args - Arguments to create a SocialAccount.
     * @example
     * // Create one SocialAccount
     * const SocialAccount = await prisma.socialAccount.create({
     *   data: {
     *     // ... data to create a SocialAccount
     *   }
     * })
     * 
     */
    create<T extends SocialAccountCreateArgs>(args: SelectSubset<T, SocialAccountCreateArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SocialAccounts.
     * @param {SocialAccountCreateManyArgs} args - Arguments to create many SocialAccounts.
     * @example
     * // Create many SocialAccounts
     * const socialAccount = await prisma.socialAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SocialAccountCreateManyArgs>(args?: SelectSubset<T, SocialAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SocialAccounts and returns the data saved in the database.
     * @param {SocialAccountCreateManyAndReturnArgs} args - Arguments to create many SocialAccounts.
     * @example
     * // Create many SocialAccounts
     * const socialAccount = await prisma.socialAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SocialAccounts and only return the `id`
     * const socialAccountWithIdOnly = await prisma.socialAccount.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SocialAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, SocialAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SocialAccount.
     * @param {SocialAccountDeleteArgs} args - Arguments to delete one SocialAccount.
     * @example
     * // Delete one SocialAccount
     * const SocialAccount = await prisma.socialAccount.delete({
     *   where: {
     *     // ... filter to delete one SocialAccount
     *   }
     * })
     * 
     */
    delete<T extends SocialAccountDeleteArgs>(args: SelectSubset<T, SocialAccountDeleteArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SocialAccount.
     * @param {SocialAccountUpdateArgs} args - Arguments to update one SocialAccount.
     * @example
     * // Update one SocialAccount
     * const socialAccount = await prisma.socialAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SocialAccountUpdateArgs>(args: SelectSubset<T, SocialAccountUpdateArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SocialAccounts.
     * @param {SocialAccountDeleteManyArgs} args - Arguments to filter SocialAccounts to delete.
     * @example
     * // Delete a few SocialAccounts
     * const { count } = await prisma.socialAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SocialAccountDeleteManyArgs>(args?: SelectSubset<T, SocialAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SocialAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SocialAccounts
     * const socialAccount = await prisma.socialAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SocialAccountUpdateManyArgs>(args: SelectSubset<T, SocialAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SocialAccount.
     * @param {SocialAccountUpsertArgs} args - Arguments to update or create a SocialAccount.
     * @example
     * // Update or create a SocialAccount
     * const socialAccount = await prisma.socialAccount.upsert({
     *   create: {
     *     // ... data to create a SocialAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SocialAccount we want to update
     *   }
     * })
     */
    upsert<T extends SocialAccountUpsertArgs>(args: SelectSubset<T, SocialAccountUpsertArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SocialAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountCountArgs} args - Arguments to filter SocialAccounts to count.
     * @example
     * // Count the number of SocialAccounts
     * const count = await prisma.socialAccount.count({
     *   where: {
     *     // ... the filter for the SocialAccounts we want to count
     *   }
     * })
    **/
    count<T extends SocialAccountCountArgs>(
      args?: Subset<T, SocialAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SocialAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SocialAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SocialAccountAggregateArgs>(args: Subset<T, SocialAccountAggregateArgs>): Prisma.PrismaPromise<GetSocialAccountAggregateType<T>>

    /**
     * Group by SocialAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SocialAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SocialAccountGroupByArgs['orderBy'] }
        : { orderBy?: SocialAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SocialAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSocialAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SocialAccount model
   */
  readonly fields: SocialAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SocialAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SocialAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SocialAccount model
   */ 
  interface SocialAccountFieldRefs {
    readonly id: FieldRef<"SocialAccount", 'String'>
    readonly userId: FieldRef<"SocialAccount", 'String'>
    readonly provider: FieldRef<"SocialAccount", 'AuthProvider'>
    readonly providerId: FieldRef<"SocialAccount", 'String'>
    readonly providerEmail: FieldRef<"SocialAccount", 'String'>
    readonly accessToken: FieldRef<"SocialAccount", 'String'>
    readonly refreshToken: FieldRef<"SocialAccount", 'String'>
    readonly expiresAt: FieldRef<"SocialAccount", 'DateTime'>
    readonly createdAt: FieldRef<"SocialAccount", 'DateTime'>
    readonly updatedAt: FieldRef<"SocialAccount", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SocialAccount findUnique
   */
  export type SocialAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccount to fetch.
     */
    where: SocialAccountWhereUniqueInput
  }

  /**
   * SocialAccount findUniqueOrThrow
   */
  export type SocialAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccount to fetch.
     */
    where: SocialAccountWhereUniqueInput
  }

  /**
   * SocialAccount findFirst
   */
  export type SocialAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccount to fetch.
     */
    where?: SocialAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialAccounts to fetch.
     */
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialAccounts.
     */
    cursor?: SocialAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialAccounts.
     */
    distinct?: SocialAccountScalarFieldEnum | SocialAccountScalarFieldEnum[]
  }

  /**
   * SocialAccount findFirstOrThrow
   */
  export type SocialAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccount to fetch.
     */
    where?: SocialAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialAccounts to fetch.
     */
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialAccounts.
     */
    cursor?: SocialAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialAccounts.
     */
    distinct?: SocialAccountScalarFieldEnum | SocialAccountScalarFieldEnum[]
  }

  /**
   * SocialAccount findMany
   */
  export type SocialAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccounts to fetch.
     */
    where?: SocialAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialAccounts to fetch.
     */
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SocialAccounts.
     */
    cursor?: SocialAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialAccounts.
     */
    skip?: number
    distinct?: SocialAccountScalarFieldEnum | SocialAccountScalarFieldEnum[]
  }

  /**
   * SocialAccount create
   */
  export type SocialAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a SocialAccount.
     */
    data: XOR<SocialAccountCreateInput, SocialAccountUncheckedCreateInput>
  }

  /**
   * SocialAccount createMany
   */
  export type SocialAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SocialAccounts.
     */
    data: SocialAccountCreateManyInput | SocialAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SocialAccount createManyAndReturn
   */
  export type SocialAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SocialAccounts.
     */
    data: SocialAccountCreateManyInput | SocialAccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SocialAccount update
   */
  export type SocialAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a SocialAccount.
     */
    data: XOR<SocialAccountUpdateInput, SocialAccountUncheckedUpdateInput>
    /**
     * Choose, which SocialAccount to update.
     */
    where: SocialAccountWhereUniqueInput
  }

  /**
   * SocialAccount updateMany
   */
  export type SocialAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SocialAccounts.
     */
    data: XOR<SocialAccountUpdateManyMutationInput, SocialAccountUncheckedUpdateManyInput>
    /**
     * Filter which SocialAccounts to update
     */
    where?: SocialAccountWhereInput
  }

  /**
   * SocialAccount upsert
   */
  export type SocialAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the SocialAccount to update in case it exists.
     */
    where: SocialAccountWhereUniqueInput
    /**
     * In case the SocialAccount found by the `where` argument doesn't exist, create a new SocialAccount with this data.
     */
    create: XOR<SocialAccountCreateInput, SocialAccountUncheckedCreateInput>
    /**
     * In case the SocialAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SocialAccountUpdateInput, SocialAccountUncheckedUpdateInput>
  }

  /**
   * SocialAccount delete
   */
  export type SocialAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter which SocialAccount to delete.
     */
    where: SocialAccountWhereUniqueInput
  }

  /**
   * SocialAccount deleteMany
   */
  export type SocialAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialAccounts to delete
     */
    where?: SocialAccountWhereInput
  }

  /**
   * SocialAccount without action
   */
  export type SocialAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
  }


  /**
   * Model AsanaToken
   */

  export type AggregateAsanaToken = {
    _count: AsanaTokenCountAggregateOutputType | null
    _min: AsanaTokenMinAggregateOutputType | null
    _max: AsanaTokenMaxAggregateOutputType | null
  }

  export type AsanaTokenMinAggregateOutputType = {
    id: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AsanaTokenMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AsanaTokenCountAggregateOutputType = {
    id: number
    userId: number
    accessToken: number
    refreshToken: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AsanaTokenMinAggregateInputType = {
    id?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AsanaTokenMaxAggregateInputType = {
    id?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AsanaTokenCountAggregateInputType = {
    id?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AsanaTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AsanaToken to aggregate.
     */
    where?: AsanaTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AsanaTokens to fetch.
     */
    orderBy?: AsanaTokenOrderByWithRelationInput | AsanaTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AsanaTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AsanaTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AsanaTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AsanaTokens
    **/
    _count?: true | AsanaTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AsanaTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AsanaTokenMaxAggregateInputType
  }

  export type GetAsanaTokenAggregateType<T extends AsanaTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateAsanaToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAsanaToken[P]>
      : GetScalarType<T[P], AggregateAsanaToken[P]>
  }




  export type AsanaTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AsanaTokenWhereInput
    orderBy?: AsanaTokenOrderByWithAggregationInput | AsanaTokenOrderByWithAggregationInput[]
    by: AsanaTokenScalarFieldEnum[] | AsanaTokenScalarFieldEnum
    having?: AsanaTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AsanaTokenCountAggregateInputType | true
    _min?: AsanaTokenMinAggregateInputType
    _max?: AsanaTokenMaxAggregateInputType
  }

  export type AsanaTokenGroupByOutputType = {
    id: string
    userId: string
    accessToken: string
    refreshToken: string | null
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: AsanaTokenCountAggregateOutputType | null
    _min: AsanaTokenMinAggregateOutputType | null
    _max: AsanaTokenMaxAggregateOutputType | null
  }

  type GetAsanaTokenGroupByPayload<T extends AsanaTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AsanaTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AsanaTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AsanaTokenGroupByOutputType[P]>
            : GetScalarType<T[P], AsanaTokenGroupByOutputType[P]>
        }
      >
    >


  export type AsanaTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["asanaToken"]>

  export type AsanaTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["asanaToken"]>

  export type AsanaTokenSelectScalar = {
    id?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AsanaTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AsanaTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AsanaTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AsanaToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      accessToken: string
      refreshToken: string | null
      expiresAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["asanaToken"]>
    composites: {}
  }

  type AsanaTokenGetPayload<S extends boolean | null | undefined | AsanaTokenDefaultArgs> = $Result.GetResult<Prisma.$AsanaTokenPayload, S>

  type AsanaTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AsanaTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AsanaTokenCountAggregateInputType | true
    }

  export interface AsanaTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AsanaToken'], meta: { name: 'AsanaToken' } }
    /**
     * Find zero or one AsanaToken that matches the filter.
     * @param {AsanaTokenFindUniqueArgs} args - Arguments to find a AsanaToken
     * @example
     * // Get one AsanaToken
     * const asanaToken = await prisma.asanaToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AsanaTokenFindUniqueArgs>(args: SelectSubset<T, AsanaTokenFindUniqueArgs<ExtArgs>>): Prisma__AsanaTokenClient<$Result.GetResult<Prisma.$AsanaTokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AsanaToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AsanaTokenFindUniqueOrThrowArgs} args - Arguments to find a AsanaToken
     * @example
     * // Get one AsanaToken
     * const asanaToken = await prisma.asanaToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AsanaTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, AsanaTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AsanaTokenClient<$Result.GetResult<Prisma.$AsanaTokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AsanaToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsanaTokenFindFirstArgs} args - Arguments to find a AsanaToken
     * @example
     * // Get one AsanaToken
     * const asanaToken = await prisma.asanaToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AsanaTokenFindFirstArgs>(args?: SelectSubset<T, AsanaTokenFindFirstArgs<ExtArgs>>): Prisma__AsanaTokenClient<$Result.GetResult<Prisma.$AsanaTokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AsanaToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsanaTokenFindFirstOrThrowArgs} args - Arguments to find a AsanaToken
     * @example
     * // Get one AsanaToken
     * const asanaToken = await prisma.asanaToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AsanaTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, AsanaTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__AsanaTokenClient<$Result.GetResult<Prisma.$AsanaTokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AsanaTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsanaTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AsanaTokens
     * const asanaTokens = await prisma.asanaToken.findMany()
     * 
     * // Get first 10 AsanaTokens
     * const asanaTokens = await prisma.asanaToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const asanaTokenWithIdOnly = await prisma.asanaToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AsanaTokenFindManyArgs>(args?: SelectSubset<T, AsanaTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsanaTokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AsanaToken.
     * @param {AsanaTokenCreateArgs} args - Arguments to create a AsanaToken.
     * @example
     * // Create one AsanaToken
     * const AsanaToken = await prisma.asanaToken.create({
     *   data: {
     *     // ... data to create a AsanaToken
     *   }
     * })
     * 
     */
    create<T extends AsanaTokenCreateArgs>(args: SelectSubset<T, AsanaTokenCreateArgs<ExtArgs>>): Prisma__AsanaTokenClient<$Result.GetResult<Prisma.$AsanaTokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AsanaTokens.
     * @param {AsanaTokenCreateManyArgs} args - Arguments to create many AsanaTokens.
     * @example
     * // Create many AsanaTokens
     * const asanaToken = await prisma.asanaToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AsanaTokenCreateManyArgs>(args?: SelectSubset<T, AsanaTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AsanaTokens and returns the data saved in the database.
     * @param {AsanaTokenCreateManyAndReturnArgs} args - Arguments to create many AsanaTokens.
     * @example
     * // Create many AsanaTokens
     * const asanaToken = await prisma.asanaToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AsanaTokens and only return the `id`
     * const asanaTokenWithIdOnly = await prisma.asanaToken.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AsanaTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, AsanaTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsanaTokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AsanaToken.
     * @param {AsanaTokenDeleteArgs} args - Arguments to delete one AsanaToken.
     * @example
     * // Delete one AsanaToken
     * const AsanaToken = await prisma.asanaToken.delete({
     *   where: {
     *     // ... filter to delete one AsanaToken
     *   }
     * })
     * 
     */
    delete<T extends AsanaTokenDeleteArgs>(args: SelectSubset<T, AsanaTokenDeleteArgs<ExtArgs>>): Prisma__AsanaTokenClient<$Result.GetResult<Prisma.$AsanaTokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AsanaToken.
     * @param {AsanaTokenUpdateArgs} args - Arguments to update one AsanaToken.
     * @example
     * // Update one AsanaToken
     * const asanaToken = await prisma.asanaToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AsanaTokenUpdateArgs>(args: SelectSubset<T, AsanaTokenUpdateArgs<ExtArgs>>): Prisma__AsanaTokenClient<$Result.GetResult<Prisma.$AsanaTokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AsanaTokens.
     * @param {AsanaTokenDeleteManyArgs} args - Arguments to filter AsanaTokens to delete.
     * @example
     * // Delete a few AsanaTokens
     * const { count } = await prisma.asanaToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AsanaTokenDeleteManyArgs>(args?: SelectSubset<T, AsanaTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AsanaTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsanaTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AsanaTokens
     * const asanaToken = await prisma.asanaToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AsanaTokenUpdateManyArgs>(args: SelectSubset<T, AsanaTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AsanaToken.
     * @param {AsanaTokenUpsertArgs} args - Arguments to update or create a AsanaToken.
     * @example
     * // Update or create a AsanaToken
     * const asanaToken = await prisma.asanaToken.upsert({
     *   create: {
     *     // ... data to create a AsanaToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AsanaToken we want to update
     *   }
     * })
     */
    upsert<T extends AsanaTokenUpsertArgs>(args: SelectSubset<T, AsanaTokenUpsertArgs<ExtArgs>>): Prisma__AsanaTokenClient<$Result.GetResult<Prisma.$AsanaTokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AsanaTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsanaTokenCountArgs} args - Arguments to filter AsanaTokens to count.
     * @example
     * // Count the number of AsanaTokens
     * const count = await prisma.asanaToken.count({
     *   where: {
     *     // ... the filter for the AsanaTokens we want to count
     *   }
     * })
    **/
    count<T extends AsanaTokenCountArgs>(
      args?: Subset<T, AsanaTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AsanaTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AsanaToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsanaTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AsanaTokenAggregateArgs>(args: Subset<T, AsanaTokenAggregateArgs>): Prisma.PrismaPromise<GetAsanaTokenAggregateType<T>>

    /**
     * Group by AsanaToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsanaTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AsanaTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AsanaTokenGroupByArgs['orderBy'] }
        : { orderBy?: AsanaTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AsanaTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAsanaTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AsanaToken model
   */
  readonly fields: AsanaTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AsanaToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AsanaTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AsanaToken model
   */ 
  interface AsanaTokenFieldRefs {
    readonly id: FieldRef<"AsanaToken", 'String'>
    readonly userId: FieldRef<"AsanaToken", 'String'>
    readonly accessToken: FieldRef<"AsanaToken", 'String'>
    readonly refreshToken: FieldRef<"AsanaToken", 'String'>
    readonly expiresAt: FieldRef<"AsanaToken", 'DateTime'>
    readonly createdAt: FieldRef<"AsanaToken", 'DateTime'>
    readonly updatedAt: FieldRef<"AsanaToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AsanaToken findUnique
   */
  export type AsanaTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AsanaToken
     */
    select?: AsanaTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsanaTokenInclude<ExtArgs> | null
    /**
     * Filter, which AsanaToken to fetch.
     */
    where: AsanaTokenWhereUniqueInput
  }

  /**
   * AsanaToken findUniqueOrThrow
   */
  export type AsanaTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AsanaToken
     */
    select?: AsanaTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsanaTokenInclude<ExtArgs> | null
    /**
     * Filter, which AsanaToken to fetch.
     */
    where: AsanaTokenWhereUniqueInput
  }

  /**
   * AsanaToken findFirst
   */
  export type AsanaTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AsanaToken
     */
    select?: AsanaTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsanaTokenInclude<ExtArgs> | null
    /**
     * Filter, which AsanaToken to fetch.
     */
    where?: AsanaTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AsanaTokens to fetch.
     */
    orderBy?: AsanaTokenOrderByWithRelationInput | AsanaTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AsanaTokens.
     */
    cursor?: AsanaTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AsanaTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AsanaTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AsanaTokens.
     */
    distinct?: AsanaTokenScalarFieldEnum | AsanaTokenScalarFieldEnum[]
  }

  /**
   * AsanaToken findFirstOrThrow
   */
  export type AsanaTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AsanaToken
     */
    select?: AsanaTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsanaTokenInclude<ExtArgs> | null
    /**
     * Filter, which AsanaToken to fetch.
     */
    where?: AsanaTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AsanaTokens to fetch.
     */
    orderBy?: AsanaTokenOrderByWithRelationInput | AsanaTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AsanaTokens.
     */
    cursor?: AsanaTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AsanaTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AsanaTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AsanaTokens.
     */
    distinct?: AsanaTokenScalarFieldEnum | AsanaTokenScalarFieldEnum[]
  }

  /**
   * AsanaToken findMany
   */
  export type AsanaTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AsanaToken
     */
    select?: AsanaTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsanaTokenInclude<ExtArgs> | null
    /**
     * Filter, which AsanaTokens to fetch.
     */
    where?: AsanaTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AsanaTokens to fetch.
     */
    orderBy?: AsanaTokenOrderByWithRelationInput | AsanaTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AsanaTokens.
     */
    cursor?: AsanaTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AsanaTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AsanaTokens.
     */
    skip?: number
    distinct?: AsanaTokenScalarFieldEnum | AsanaTokenScalarFieldEnum[]
  }

  /**
   * AsanaToken create
   */
  export type AsanaTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AsanaToken
     */
    select?: AsanaTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsanaTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a AsanaToken.
     */
    data: XOR<AsanaTokenCreateInput, AsanaTokenUncheckedCreateInput>
  }

  /**
   * AsanaToken createMany
   */
  export type AsanaTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AsanaTokens.
     */
    data: AsanaTokenCreateManyInput | AsanaTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AsanaToken createManyAndReturn
   */
  export type AsanaTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AsanaToken
     */
    select?: AsanaTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AsanaTokens.
     */
    data: AsanaTokenCreateManyInput | AsanaTokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsanaTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AsanaToken update
   */
  export type AsanaTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AsanaToken
     */
    select?: AsanaTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsanaTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a AsanaToken.
     */
    data: XOR<AsanaTokenUpdateInput, AsanaTokenUncheckedUpdateInput>
    /**
     * Choose, which AsanaToken to update.
     */
    where: AsanaTokenWhereUniqueInput
  }

  /**
   * AsanaToken updateMany
   */
  export type AsanaTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AsanaTokens.
     */
    data: XOR<AsanaTokenUpdateManyMutationInput, AsanaTokenUncheckedUpdateManyInput>
    /**
     * Filter which AsanaTokens to update
     */
    where?: AsanaTokenWhereInput
  }

  /**
   * AsanaToken upsert
   */
  export type AsanaTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AsanaToken
     */
    select?: AsanaTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsanaTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the AsanaToken to update in case it exists.
     */
    where: AsanaTokenWhereUniqueInput
    /**
     * In case the AsanaToken found by the `where` argument doesn't exist, create a new AsanaToken with this data.
     */
    create: XOR<AsanaTokenCreateInput, AsanaTokenUncheckedCreateInput>
    /**
     * In case the AsanaToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AsanaTokenUpdateInput, AsanaTokenUncheckedUpdateInput>
  }

  /**
   * AsanaToken delete
   */
  export type AsanaTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AsanaToken
     */
    select?: AsanaTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsanaTokenInclude<ExtArgs> | null
    /**
     * Filter which AsanaToken to delete.
     */
    where: AsanaTokenWhereUniqueInput
  }

  /**
   * AsanaToken deleteMany
   */
  export type AsanaTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AsanaTokens to delete
     */
    where?: AsanaTokenWhereInput
  }

  /**
   * AsanaToken without action
   */
  export type AsanaTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AsanaToken
     */
    select?: AsanaTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsanaTokenInclude<ExtArgs> | null
  }


  /**
   * Model OmniFocusSetup
   */

  export type AggregateOmniFocusSetup = {
    _count: OmniFocusSetupCountAggregateOutputType | null
    _min: OmniFocusSetupMinAggregateOutputType | null
    _max: OmniFocusSetupMaxAggregateOutputType | null
  }

  export type OmniFocusSetupMinAggregateOutputType = {
    id: string | null
    userId: string | null
    agentKey: string | null
    isActive: boolean | null
    version: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OmniFocusSetupMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    agentKey: string | null
    isActive: boolean | null
    version: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OmniFocusSetupCountAggregateOutputType = {
    id: number
    userId: number
    agentKey: number
    isActive: number
    version: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OmniFocusSetupMinAggregateInputType = {
    id?: true
    userId?: true
    agentKey?: true
    isActive?: true
    version?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OmniFocusSetupMaxAggregateInputType = {
    id?: true
    userId?: true
    agentKey?: true
    isActive?: true
    version?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OmniFocusSetupCountAggregateInputType = {
    id?: true
    userId?: true
    agentKey?: true
    isActive?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OmniFocusSetupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OmniFocusSetup to aggregate.
     */
    where?: OmniFocusSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OmniFocusSetups to fetch.
     */
    orderBy?: OmniFocusSetupOrderByWithRelationInput | OmniFocusSetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OmniFocusSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OmniFocusSetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OmniFocusSetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OmniFocusSetups
    **/
    _count?: true | OmniFocusSetupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OmniFocusSetupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OmniFocusSetupMaxAggregateInputType
  }

  export type GetOmniFocusSetupAggregateType<T extends OmniFocusSetupAggregateArgs> = {
        [P in keyof T & keyof AggregateOmniFocusSetup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOmniFocusSetup[P]>
      : GetScalarType<T[P], AggregateOmniFocusSetup[P]>
  }




  export type OmniFocusSetupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OmniFocusSetupWhereInput
    orderBy?: OmniFocusSetupOrderByWithAggregationInput | OmniFocusSetupOrderByWithAggregationInput[]
    by: OmniFocusSetupScalarFieldEnum[] | OmniFocusSetupScalarFieldEnum
    having?: OmniFocusSetupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OmniFocusSetupCountAggregateInputType | true
    _min?: OmniFocusSetupMinAggregateInputType
    _max?: OmniFocusSetupMaxAggregateInputType
  }

  export type OmniFocusSetupGroupByOutputType = {
    id: string
    userId: string
    agentKey: string
    isActive: boolean
    version: string | null
    createdAt: Date
    updatedAt: Date
    _count: OmniFocusSetupCountAggregateOutputType | null
    _min: OmniFocusSetupMinAggregateOutputType | null
    _max: OmniFocusSetupMaxAggregateOutputType | null
  }

  type GetOmniFocusSetupGroupByPayload<T extends OmniFocusSetupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OmniFocusSetupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OmniFocusSetupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OmniFocusSetupGroupByOutputType[P]>
            : GetScalarType<T[P], OmniFocusSetupGroupByOutputType[P]>
        }
      >
    >


  export type OmniFocusSetupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    agentKey?: boolean
    isActive?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["omniFocusSetup"]>

  export type OmniFocusSetupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    agentKey?: boolean
    isActive?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["omniFocusSetup"]>

  export type OmniFocusSetupSelectScalar = {
    id?: boolean
    userId?: boolean
    agentKey?: boolean
    isActive?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OmniFocusSetupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OmniFocusSetupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OmniFocusSetupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OmniFocusSetup"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      agentKey: string
      isActive: boolean
      version: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["omniFocusSetup"]>
    composites: {}
  }

  type OmniFocusSetupGetPayload<S extends boolean | null | undefined | OmniFocusSetupDefaultArgs> = $Result.GetResult<Prisma.$OmniFocusSetupPayload, S>

  type OmniFocusSetupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OmniFocusSetupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OmniFocusSetupCountAggregateInputType | true
    }

  export interface OmniFocusSetupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OmniFocusSetup'], meta: { name: 'OmniFocusSetup' } }
    /**
     * Find zero or one OmniFocusSetup that matches the filter.
     * @param {OmniFocusSetupFindUniqueArgs} args - Arguments to find a OmniFocusSetup
     * @example
     * // Get one OmniFocusSetup
     * const omniFocusSetup = await prisma.omniFocusSetup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OmniFocusSetupFindUniqueArgs>(args: SelectSubset<T, OmniFocusSetupFindUniqueArgs<ExtArgs>>): Prisma__OmniFocusSetupClient<$Result.GetResult<Prisma.$OmniFocusSetupPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OmniFocusSetup that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OmniFocusSetupFindUniqueOrThrowArgs} args - Arguments to find a OmniFocusSetup
     * @example
     * // Get one OmniFocusSetup
     * const omniFocusSetup = await prisma.omniFocusSetup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OmniFocusSetupFindUniqueOrThrowArgs>(args: SelectSubset<T, OmniFocusSetupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OmniFocusSetupClient<$Result.GetResult<Prisma.$OmniFocusSetupPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OmniFocusSetup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OmniFocusSetupFindFirstArgs} args - Arguments to find a OmniFocusSetup
     * @example
     * // Get one OmniFocusSetup
     * const omniFocusSetup = await prisma.omniFocusSetup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OmniFocusSetupFindFirstArgs>(args?: SelectSubset<T, OmniFocusSetupFindFirstArgs<ExtArgs>>): Prisma__OmniFocusSetupClient<$Result.GetResult<Prisma.$OmniFocusSetupPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OmniFocusSetup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OmniFocusSetupFindFirstOrThrowArgs} args - Arguments to find a OmniFocusSetup
     * @example
     * // Get one OmniFocusSetup
     * const omniFocusSetup = await prisma.omniFocusSetup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OmniFocusSetupFindFirstOrThrowArgs>(args?: SelectSubset<T, OmniFocusSetupFindFirstOrThrowArgs<ExtArgs>>): Prisma__OmniFocusSetupClient<$Result.GetResult<Prisma.$OmniFocusSetupPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OmniFocusSetups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OmniFocusSetupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OmniFocusSetups
     * const omniFocusSetups = await prisma.omniFocusSetup.findMany()
     * 
     * // Get first 10 OmniFocusSetups
     * const omniFocusSetups = await prisma.omniFocusSetup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const omniFocusSetupWithIdOnly = await prisma.omniFocusSetup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OmniFocusSetupFindManyArgs>(args?: SelectSubset<T, OmniFocusSetupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OmniFocusSetupPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OmniFocusSetup.
     * @param {OmniFocusSetupCreateArgs} args - Arguments to create a OmniFocusSetup.
     * @example
     * // Create one OmniFocusSetup
     * const OmniFocusSetup = await prisma.omniFocusSetup.create({
     *   data: {
     *     // ... data to create a OmniFocusSetup
     *   }
     * })
     * 
     */
    create<T extends OmniFocusSetupCreateArgs>(args: SelectSubset<T, OmniFocusSetupCreateArgs<ExtArgs>>): Prisma__OmniFocusSetupClient<$Result.GetResult<Prisma.$OmniFocusSetupPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OmniFocusSetups.
     * @param {OmniFocusSetupCreateManyArgs} args - Arguments to create many OmniFocusSetups.
     * @example
     * // Create many OmniFocusSetups
     * const omniFocusSetup = await prisma.omniFocusSetup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OmniFocusSetupCreateManyArgs>(args?: SelectSubset<T, OmniFocusSetupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OmniFocusSetups and returns the data saved in the database.
     * @param {OmniFocusSetupCreateManyAndReturnArgs} args - Arguments to create many OmniFocusSetups.
     * @example
     * // Create many OmniFocusSetups
     * const omniFocusSetup = await prisma.omniFocusSetup.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OmniFocusSetups and only return the `id`
     * const omniFocusSetupWithIdOnly = await prisma.omniFocusSetup.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OmniFocusSetupCreateManyAndReturnArgs>(args?: SelectSubset<T, OmniFocusSetupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OmniFocusSetupPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OmniFocusSetup.
     * @param {OmniFocusSetupDeleteArgs} args - Arguments to delete one OmniFocusSetup.
     * @example
     * // Delete one OmniFocusSetup
     * const OmniFocusSetup = await prisma.omniFocusSetup.delete({
     *   where: {
     *     // ... filter to delete one OmniFocusSetup
     *   }
     * })
     * 
     */
    delete<T extends OmniFocusSetupDeleteArgs>(args: SelectSubset<T, OmniFocusSetupDeleteArgs<ExtArgs>>): Prisma__OmniFocusSetupClient<$Result.GetResult<Prisma.$OmniFocusSetupPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OmniFocusSetup.
     * @param {OmniFocusSetupUpdateArgs} args - Arguments to update one OmniFocusSetup.
     * @example
     * // Update one OmniFocusSetup
     * const omniFocusSetup = await prisma.omniFocusSetup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OmniFocusSetupUpdateArgs>(args: SelectSubset<T, OmniFocusSetupUpdateArgs<ExtArgs>>): Prisma__OmniFocusSetupClient<$Result.GetResult<Prisma.$OmniFocusSetupPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OmniFocusSetups.
     * @param {OmniFocusSetupDeleteManyArgs} args - Arguments to filter OmniFocusSetups to delete.
     * @example
     * // Delete a few OmniFocusSetups
     * const { count } = await prisma.omniFocusSetup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OmniFocusSetupDeleteManyArgs>(args?: SelectSubset<T, OmniFocusSetupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OmniFocusSetups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OmniFocusSetupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OmniFocusSetups
     * const omniFocusSetup = await prisma.omniFocusSetup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OmniFocusSetupUpdateManyArgs>(args: SelectSubset<T, OmniFocusSetupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OmniFocusSetup.
     * @param {OmniFocusSetupUpsertArgs} args - Arguments to update or create a OmniFocusSetup.
     * @example
     * // Update or create a OmniFocusSetup
     * const omniFocusSetup = await prisma.omniFocusSetup.upsert({
     *   create: {
     *     // ... data to create a OmniFocusSetup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OmniFocusSetup we want to update
     *   }
     * })
     */
    upsert<T extends OmniFocusSetupUpsertArgs>(args: SelectSubset<T, OmniFocusSetupUpsertArgs<ExtArgs>>): Prisma__OmniFocusSetupClient<$Result.GetResult<Prisma.$OmniFocusSetupPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OmniFocusSetups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OmniFocusSetupCountArgs} args - Arguments to filter OmniFocusSetups to count.
     * @example
     * // Count the number of OmniFocusSetups
     * const count = await prisma.omniFocusSetup.count({
     *   where: {
     *     // ... the filter for the OmniFocusSetups we want to count
     *   }
     * })
    **/
    count<T extends OmniFocusSetupCountArgs>(
      args?: Subset<T, OmniFocusSetupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OmniFocusSetupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OmniFocusSetup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OmniFocusSetupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OmniFocusSetupAggregateArgs>(args: Subset<T, OmniFocusSetupAggregateArgs>): Prisma.PrismaPromise<GetOmniFocusSetupAggregateType<T>>

    /**
     * Group by OmniFocusSetup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OmniFocusSetupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OmniFocusSetupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OmniFocusSetupGroupByArgs['orderBy'] }
        : { orderBy?: OmniFocusSetupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OmniFocusSetupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOmniFocusSetupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OmniFocusSetup model
   */
  readonly fields: OmniFocusSetupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OmniFocusSetup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OmniFocusSetupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OmniFocusSetup model
   */ 
  interface OmniFocusSetupFieldRefs {
    readonly id: FieldRef<"OmniFocusSetup", 'String'>
    readonly userId: FieldRef<"OmniFocusSetup", 'String'>
    readonly agentKey: FieldRef<"OmniFocusSetup", 'String'>
    readonly isActive: FieldRef<"OmniFocusSetup", 'Boolean'>
    readonly version: FieldRef<"OmniFocusSetup", 'String'>
    readonly createdAt: FieldRef<"OmniFocusSetup", 'DateTime'>
    readonly updatedAt: FieldRef<"OmniFocusSetup", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OmniFocusSetup findUnique
   */
  export type OmniFocusSetupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OmniFocusSetup
     */
    select?: OmniFocusSetupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OmniFocusSetupInclude<ExtArgs> | null
    /**
     * Filter, which OmniFocusSetup to fetch.
     */
    where: OmniFocusSetupWhereUniqueInput
  }

  /**
   * OmniFocusSetup findUniqueOrThrow
   */
  export type OmniFocusSetupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OmniFocusSetup
     */
    select?: OmniFocusSetupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OmniFocusSetupInclude<ExtArgs> | null
    /**
     * Filter, which OmniFocusSetup to fetch.
     */
    where: OmniFocusSetupWhereUniqueInput
  }

  /**
   * OmniFocusSetup findFirst
   */
  export type OmniFocusSetupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OmniFocusSetup
     */
    select?: OmniFocusSetupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OmniFocusSetupInclude<ExtArgs> | null
    /**
     * Filter, which OmniFocusSetup to fetch.
     */
    where?: OmniFocusSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OmniFocusSetups to fetch.
     */
    orderBy?: OmniFocusSetupOrderByWithRelationInput | OmniFocusSetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OmniFocusSetups.
     */
    cursor?: OmniFocusSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OmniFocusSetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OmniFocusSetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OmniFocusSetups.
     */
    distinct?: OmniFocusSetupScalarFieldEnum | OmniFocusSetupScalarFieldEnum[]
  }

  /**
   * OmniFocusSetup findFirstOrThrow
   */
  export type OmniFocusSetupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OmniFocusSetup
     */
    select?: OmniFocusSetupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OmniFocusSetupInclude<ExtArgs> | null
    /**
     * Filter, which OmniFocusSetup to fetch.
     */
    where?: OmniFocusSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OmniFocusSetups to fetch.
     */
    orderBy?: OmniFocusSetupOrderByWithRelationInput | OmniFocusSetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OmniFocusSetups.
     */
    cursor?: OmniFocusSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OmniFocusSetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OmniFocusSetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OmniFocusSetups.
     */
    distinct?: OmniFocusSetupScalarFieldEnum | OmniFocusSetupScalarFieldEnum[]
  }

  /**
   * OmniFocusSetup findMany
   */
  export type OmniFocusSetupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OmniFocusSetup
     */
    select?: OmniFocusSetupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OmniFocusSetupInclude<ExtArgs> | null
    /**
     * Filter, which OmniFocusSetups to fetch.
     */
    where?: OmniFocusSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OmniFocusSetups to fetch.
     */
    orderBy?: OmniFocusSetupOrderByWithRelationInput | OmniFocusSetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OmniFocusSetups.
     */
    cursor?: OmniFocusSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OmniFocusSetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OmniFocusSetups.
     */
    skip?: number
    distinct?: OmniFocusSetupScalarFieldEnum | OmniFocusSetupScalarFieldEnum[]
  }

  /**
   * OmniFocusSetup create
   */
  export type OmniFocusSetupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OmniFocusSetup
     */
    select?: OmniFocusSetupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OmniFocusSetupInclude<ExtArgs> | null
    /**
     * The data needed to create a OmniFocusSetup.
     */
    data: XOR<OmniFocusSetupCreateInput, OmniFocusSetupUncheckedCreateInput>
  }

  /**
   * OmniFocusSetup createMany
   */
  export type OmniFocusSetupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OmniFocusSetups.
     */
    data: OmniFocusSetupCreateManyInput | OmniFocusSetupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OmniFocusSetup createManyAndReturn
   */
  export type OmniFocusSetupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OmniFocusSetup
     */
    select?: OmniFocusSetupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OmniFocusSetups.
     */
    data: OmniFocusSetupCreateManyInput | OmniFocusSetupCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OmniFocusSetupIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OmniFocusSetup update
   */
  export type OmniFocusSetupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OmniFocusSetup
     */
    select?: OmniFocusSetupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OmniFocusSetupInclude<ExtArgs> | null
    /**
     * The data needed to update a OmniFocusSetup.
     */
    data: XOR<OmniFocusSetupUpdateInput, OmniFocusSetupUncheckedUpdateInput>
    /**
     * Choose, which OmniFocusSetup to update.
     */
    where: OmniFocusSetupWhereUniqueInput
  }

  /**
   * OmniFocusSetup updateMany
   */
  export type OmniFocusSetupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OmniFocusSetups.
     */
    data: XOR<OmniFocusSetupUpdateManyMutationInput, OmniFocusSetupUncheckedUpdateManyInput>
    /**
     * Filter which OmniFocusSetups to update
     */
    where?: OmniFocusSetupWhereInput
  }

  /**
   * OmniFocusSetup upsert
   */
  export type OmniFocusSetupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OmniFocusSetup
     */
    select?: OmniFocusSetupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OmniFocusSetupInclude<ExtArgs> | null
    /**
     * The filter to search for the OmniFocusSetup to update in case it exists.
     */
    where: OmniFocusSetupWhereUniqueInput
    /**
     * In case the OmniFocusSetup found by the `where` argument doesn't exist, create a new OmniFocusSetup with this data.
     */
    create: XOR<OmniFocusSetupCreateInput, OmniFocusSetupUncheckedCreateInput>
    /**
     * In case the OmniFocusSetup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OmniFocusSetupUpdateInput, OmniFocusSetupUncheckedUpdateInput>
  }

  /**
   * OmniFocusSetup delete
   */
  export type OmniFocusSetupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OmniFocusSetup
     */
    select?: OmniFocusSetupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OmniFocusSetupInclude<ExtArgs> | null
    /**
     * Filter which OmniFocusSetup to delete.
     */
    where: OmniFocusSetupWhereUniqueInput
  }

  /**
   * OmniFocusSetup deleteMany
   */
  export type OmniFocusSetupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OmniFocusSetups to delete
     */
    where?: OmniFocusSetupWhereInput
  }

  /**
   * OmniFocusSetup without action
   */
  export type OmniFocusSetupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OmniFocusSetup
     */
    select?: OmniFocusSetupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OmniFocusSetupInclude<ExtArgs> | null
  }


  /**
   * Model SyncMapping
   */

  export type AggregateSyncMapping = {
    _count: SyncMappingCountAggregateOutputType | null
    _min: SyncMappingMinAggregateOutputType | null
    _max: SyncMappingMaxAggregateOutputType | null
  }

  export type SyncMappingMinAggregateOutputType = {
    id: string | null
    userId: string | null
    asanaProjectId: string | null
    asanaProjectName: string | null
    ofProjectName: string | null
    isActive: boolean | null
    lastSyncAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SyncMappingMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    asanaProjectId: string | null
    asanaProjectName: string | null
    ofProjectName: string | null
    isActive: boolean | null
    lastSyncAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SyncMappingCountAggregateOutputType = {
    id: number
    userId: number
    asanaProjectId: number
    asanaProjectName: number
    ofProjectName: number
    isActive: number
    lastSyncAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SyncMappingMinAggregateInputType = {
    id?: true
    userId?: true
    asanaProjectId?: true
    asanaProjectName?: true
    ofProjectName?: true
    isActive?: true
    lastSyncAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SyncMappingMaxAggregateInputType = {
    id?: true
    userId?: true
    asanaProjectId?: true
    asanaProjectName?: true
    ofProjectName?: true
    isActive?: true
    lastSyncAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SyncMappingCountAggregateInputType = {
    id?: true
    userId?: true
    asanaProjectId?: true
    asanaProjectName?: true
    ofProjectName?: true
    isActive?: true
    lastSyncAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SyncMappingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SyncMapping to aggregate.
     */
    where?: SyncMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncMappings to fetch.
     */
    orderBy?: SyncMappingOrderByWithRelationInput | SyncMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SyncMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SyncMappings
    **/
    _count?: true | SyncMappingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SyncMappingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SyncMappingMaxAggregateInputType
  }

  export type GetSyncMappingAggregateType<T extends SyncMappingAggregateArgs> = {
        [P in keyof T & keyof AggregateSyncMapping]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSyncMapping[P]>
      : GetScalarType<T[P], AggregateSyncMapping[P]>
  }




  export type SyncMappingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SyncMappingWhereInput
    orderBy?: SyncMappingOrderByWithAggregationInput | SyncMappingOrderByWithAggregationInput[]
    by: SyncMappingScalarFieldEnum[] | SyncMappingScalarFieldEnum
    having?: SyncMappingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SyncMappingCountAggregateInputType | true
    _min?: SyncMappingMinAggregateInputType
    _max?: SyncMappingMaxAggregateInputType
  }

  export type SyncMappingGroupByOutputType = {
    id: string
    userId: string
    asanaProjectId: string
    asanaProjectName: string
    ofProjectName: string
    isActive: boolean
    lastSyncAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: SyncMappingCountAggregateOutputType | null
    _min: SyncMappingMinAggregateOutputType | null
    _max: SyncMappingMaxAggregateOutputType | null
  }

  type GetSyncMappingGroupByPayload<T extends SyncMappingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SyncMappingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SyncMappingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SyncMappingGroupByOutputType[P]>
            : GetScalarType<T[P], SyncMappingGroupByOutputType[P]>
        }
      >
    >


  export type SyncMappingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    asanaProjectId?: boolean
    asanaProjectName?: boolean
    ofProjectName?: boolean
    isActive?: boolean
    lastSyncAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    syncLogs?: boolean | SyncMapping$syncLogsArgs<ExtArgs>
    _count?: boolean | SyncMappingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["syncMapping"]>

  export type SyncMappingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    asanaProjectId?: boolean
    asanaProjectName?: boolean
    ofProjectName?: boolean
    isActive?: boolean
    lastSyncAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["syncMapping"]>

  export type SyncMappingSelectScalar = {
    id?: boolean
    userId?: boolean
    asanaProjectId?: boolean
    asanaProjectName?: boolean
    ofProjectName?: boolean
    isActive?: boolean
    lastSyncAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SyncMappingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    syncLogs?: boolean | SyncMapping$syncLogsArgs<ExtArgs>
    _count?: boolean | SyncMappingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SyncMappingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SyncMappingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SyncMapping"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      syncLogs: Prisma.$SyncLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      asanaProjectId: string
      asanaProjectName: string
      ofProjectName: string
      isActive: boolean
      lastSyncAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["syncMapping"]>
    composites: {}
  }

  type SyncMappingGetPayload<S extends boolean | null | undefined | SyncMappingDefaultArgs> = $Result.GetResult<Prisma.$SyncMappingPayload, S>

  type SyncMappingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SyncMappingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SyncMappingCountAggregateInputType | true
    }

  export interface SyncMappingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SyncMapping'], meta: { name: 'SyncMapping' } }
    /**
     * Find zero or one SyncMapping that matches the filter.
     * @param {SyncMappingFindUniqueArgs} args - Arguments to find a SyncMapping
     * @example
     * // Get one SyncMapping
     * const syncMapping = await prisma.syncMapping.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SyncMappingFindUniqueArgs>(args: SelectSubset<T, SyncMappingFindUniqueArgs<ExtArgs>>): Prisma__SyncMappingClient<$Result.GetResult<Prisma.$SyncMappingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SyncMapping that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SyncMappingFindUniqueOrThrowArgs} args - Arguments to find a SyncMapping
     * @example
     * // Get one SyncMapping
     * const syncMapping = await prisma.syncMapping.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SyncMappingFindUniqueOrThrowArgs>(args: SelectSubset<T, SyncMappingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SyncMappingClient<$Result.GetResult<Prisma.$SyncMappingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SyncMapping that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncMappingFindFirstArgs} args - Arguments to find a SyncMapping
     * @example
     * // Get one SyncMapping
     * const syncMapping = await prisma.syncMapping.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SyncMappingFindFirstArgs>(args?: SelectSubset<T, SyncMappingFindFirstArgs<ExtArgs>>): Prisma__SyncMappingClient<$Result.GetResult<Prisma.$SyncMappingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SyncMapping that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncMappingFindFirstOrThrowArgs} args - Arguments to find a SyncMapping
     * @example
     * // Get one SyncMapping
     * const syncMapping = await prisma.syncMapping.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SyncMappingFindFirstOrThrowArgs>(args?: SelectSubset<T, SyncMappingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SyncMappingClient<$Result.GetResult<Prisma.$SyncMappingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SyncMappings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncMappingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SyncMappings
     * const syncMappings = await prisma.syncMapping.findMany()
     * 
     * // Get first 10 SyncMappings
     * const syncMappings = await prisma.syncMapping.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const syncMappingWithIdOnly = await prisma.syncMapping.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SyncMappingFindManyArgs>(args?: SelectSubset<T, SyncMappingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncMappingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SyncMapping.
     * @param {SyncMappingCreateArgs} args - Arguments to create a SyncMapping.
     * @example
     * // Create one SyncMapping
     * const SyncMapping = await prisma.syncMapping.create({
     *   data: {
     *     // ... data to create a SyncMapping
     *   }
     * })
     * 
     */
    create<T extends SyncMappingCreateArgs>(args: SelectSubset<T, SyncMappingCreateArgs<ExtArgs>>): Prisma__SyncMappingClient<$Result.GetResult<Prisma.$SyncMappingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SyncMappings.
     * @param {SyncMappingCreateManyArgs} args - Arguments to create many SyncMappings.
     * @example
     * // Create many SyncMappings
     * const syncMapping = await prisma.syncMapping.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SyncMappingCreateManyArgs>(args?: SelectSubset<T, SyncMappingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SyncMappings and returns the data saved in the database.
     * @param {SyncMappingCreateManyAndReturnArgs} args - Arguments to create many SyncMappings.
     * @example
     * // Create many SyncMappings
     * const syncMapping = await prisma.syncMapping.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SyncMappings and only return the `id`
     * const syncMappingWithIdOnly = await prisma.syncMapping.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SyncMappingCreateManyAndReturnArgs>(args?: SelectSubset<T, SyncMappingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncMappingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SyncMapping.
     * @param {SyncMappingDeleteArgs} args - Arguments to delete one SyncMapping.
     * @example
     * // Delete one SyncMapping
     * const SyncMapping = await prisma.syncMapping.delete({
     *   where: {
     *     // ... filter to delete one SyncMapping
     *   }
     * })
     * 
     */
    delete<T extends SyncMappingDeleteArgs>(args: SelectSubset<T, SyncMappingDeleteArgs<ExtArgs>>): Prisma__SyncMappingClient<$Result.GetResult<Prisma.$SyncMappingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SyncMapping.
     * @param {SyncMappingUpdateArgs} args - Arguments to update one SyncMapping.
     * @example
     * // Update one SyncMapping
     * const syncMapping = await prisma.syncMapping.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SyncMappingUpdateArgs>(args: SelectSubset<T, SyncMappingUpdateArgs<ExtArgs>>): Prisma__SyncMappingClient<$Result.GetResult<Prisma.$SyncMappingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SyncMappings.
     * @param {SyncMappingDeleteManyArgs} args - Arguments to filter SyncMappings to delete.
     * @example
     * // Delete a few SyncMappings
     * const { count } = await prisma.syncMapping.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SyncMappingDeleteManyArgs>(args?: SelectSubset<T, SyncMappingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SyncMappings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncMappingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SyncMappings
     * const syncMapping = await prisma.syncMapping.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SyncMappingUpdateManyArgs>(args: SelectSubset<T, SyncMappingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SyncMapping.
     * @param {SyncMappingUpsertArgs} args - Arguments to update or create a SyncMapping.
     * @example
     * // Update or create a SyncMapping
     * const syncMapping = await prisma.syncMapping.upsert({
     *   create: {
     *     // ... data to create a SyncMapping
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SyncMapping we want to update
     *   }
     * })
     */
    upsert<T extends SyncMappingUpsertArgs>(args: SelectSubset<T, SyncMappingUpsertArgs<ExtArgs>>): Prisma__SyncMappingClient<$Result.GetResult<Prisma.$SyncMappingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SyncMappings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncMappingCountArgs} args - Arguments to filter SyncMappings to count.
     * @example
     * // Count the number of SyncMappings
     * const count = await prisma.syncMapping.count({
     *   where: {
     *     // ... the filter for the SyncMappings we want to count
     *   }
     * })
    **/
    count<T extends SyncMappingCountArgs>(
      args?: Subset<T, SyncMappingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SyncMappingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SyncMapping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncMappingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SyncMappingAggregateArgs>(args: Subset<T, SyncMappingAggregateArgs>): Prisma.PrismaPromise<GetSyncMappingAggregateType<T>>

    /**
     * Group by SyncMapping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncMappingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SyncMappingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SyncMappingGroupByArgs['orderBy'] }
        : { orderBy?: SyncMappingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SyncMappingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSyncMappingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SyncMapping model
   */
  readonly fields: SyncMappingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SyncMapping.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SyncMappingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    syncLogs<T extends SyncMapping$syncLogsArgs<ExtArgs> = {}>(args?: Subset<T, SyncMapping$syncLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SyncMapping model
   */ 
  interface SyncMappingFieldRefs {
    readonly id: FieldRef<"SyncMapping", 'String'>
    readonly userId: FieldRef<"SyncMapping", 'String'>
    readonly asanaProjectId: FieldRef<"SyncMapping", 'String'>
    readonly asanaProjectName: FieldRef<"SyncMapping", 'String'>
    readonly ofProjectName: FieldRef<"SyncMapping", 'String'>
    readonly isActive: FieldRef<"SyncMapping", 'Boolean'>
    readonly lastSyncAt: FieldRef<"SyncMapping", 'DateTime'>
    readonly createdAt: FieldRef<"SyncMapping", 'DateTime'>
    readonly updatedAt: FieldRef<"SyncMapping", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SyncMapping findUnique
   */
  export type SyncMappingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncMapping
     */
    select?: SyncMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncMappingInclude<ExtArgs> | null
    /**
     * Filter, which SyncMapping to fetch.
     */
    where: SyncMappingWhereUniqueInput
  }

  /**
   * SyncMapping findUniqueOrThrow
   */
  export type SyncMappingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncMapping
     */
    select?: SyncMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncMappingInclude<ExtArgs> | null
    /**
     * Filter, which SyncMapping to fetch.
     */
    where: SyncMappingWhereUniqueInput
  }

  /**
   * SyncMapping findFirst
   */
  export type SyncMappingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncMapping
     */
    select?: SyncMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncMappingInclude<ExtArgs> | null
    /**
     * Filter, which SyncMapping to fetch.
     */
    where?: SyncMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncMappings to fetch.
     */
    orderBy?: SyncMappingOrderByWithRelationInput | SyncMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SyncMappings.
     */
    cursor?: SyncMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SyncMappings.
     */
    distinct?: SyncMappingScalarFieldEnum | SyncMappingScalarFieldEnum[]
  }

  /**
   * SyncMapping findFirstOrThrow
   */
  export type SyncMappingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncMapping
     */
    select?: SyncMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncMappingInclude<ExtArgs> | null
    /**
     * Filter, which SyncMapping to fetch.
     */
    where?: SyncMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncMappings to fetch.
     */
    orderBy?: SyncMappingOrderByWithRelationInput | SyncMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SyncMappings.
     */
    cursor?: SyncMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SyncMappings.
     */
    distinct?: SyncMappingScalarFieldEnum | SyncMappingScalarFieldEnum[]
  }

  /**
   * SyncMapping findMany
   */
  export type SyncMappingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncMapping
     */
    select?: SyncMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncMappingInclude<ExtArgs> | null
    /**
     * Filter, which SyncMappings to fetch.
     */
    where?: SyncMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncMappings to fetch.
     */
    orderBy?: SyncMappingOrderByWithRelationInput | SyncMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SyncMappings.
     */
    cursor?: SyncMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncMappings.
     */
    skip?: number
    distinct?: SyncMappingScalarFieldEnum | SyncMappingScalarFieldEnum[]
  }

  /**
   * SyncMapping create
   */
  export type SyncMappingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncMapping
     */
    select?: SyncMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncMappingInclude<ExtArgs> | null
    /**
     * The data needed to create a SyncMapping.
     */
    data: XOR<SyncMappingCreateInput, SyncMappingUncheckedCreateInput>
  }

  /**
   * SyncMapping createMany
   */
  export type SyncMappingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SyncMappings.
     */
    data: SyncMappingCreateManyInput | SyncMappingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SyncMapping createManyAndReturn
   */
  export type SyncMappingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncMapping
     */
    select?: SyncMappingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SyncMappings.
     */
    data: SyncMappingCreateManyInput | SyncMappingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncMappingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SyncMapping update
   */
  export type SyncMappingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncMapping
     */
    select?: SyncMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncMappingInclude<ExtArgs> | null
    /**
     * The data needed to update a SyncMapping.
     */
    data: XOR<SyncMappingUpdateInput, SyncMappingUncheckedUpdateInput>
    /**
     * Choose, which SyncMapping to update.
     */
    where: SyncMappingWhereUniqueInput
  }

  /**
   * SyncMapping updateMany
   */
  export type SyncMappingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SyncMappings.
     */
    data: XOR<SyncMappingUpdateManyMutationInput, SyncMappingUncheckedUpdateManyInput>
    /**
     * Filter which SyncMappings to update
     */
    where?: SyncMappingWhereInput
  }

  /**
   * SyncMapping upsert
   */
  export type SyncMappingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncMapping
     */
    select?: SyncMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncMappingInclude<ExtArgs> | null
    /**
     * The filter to search for the SyncMapping to update in case it exists.
     */
    where: SyncMappingWhereUniqueInput
    /**
     * In case the SyncMapping found by the `where` argument doesn't exist, create a new SyncMapping with this data.
     */
    create: XOR<SyncMappingCreateInput, SyncMappingUncheckedCreateInput>
    /**
     * In case the SyncMapping was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SyncMappingUpdateInput, SyncMappingUncheckedUpdateInput>
  }

  /**
   * SyncMapping delete
   */
  export type SyncMappingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncMapping
     */
    select?: SyncMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncMappingInclude<ExtArgs> | null
    /**
     * Filter which SyncMapping to delete.
     */
    where: SyncMappingWhereUniqueInput
  }

  /**
   * SyncMapping deleteMany
   */
  export type SyncMappingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SyncMappings to delete
     */
    where?: SyncMappingWhereInput
  }

  /**
   * SyncMapping.syncLogs
   */
  export type SyncMapping$syncLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    where?: SyncLogWhereInput
    orderBy?: SyncLogOrderByWithRelationInput | SyncLogOrderByWithRelationInput[]
    cursor?: SyncLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SyncLogScalarFieldEnum | SyncLogScalarFieldEnum[]
  }

  /**
   * SyncMapping without action
   */
  export type SyncMappingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncMapping
     */
    select?: SyncMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncMappingInclude<ExtArgs> | null
  }


  /**
   * Model SyncLog
   */

  export type AggregateSyncLog = {
    _count: SyncLogCountAggregateOutputType | null
    _avg: SyncLogAvgAggregateOutputType | null
    _sum: SyncLogSumAggregateOutputType | null
    _min: SyncLogMinAggregateOutputType | null
    _max: SyncLogMaxAggregateOutputType | null
  }

  export type SyncLogAvgAggregateOutputType = {
    itemssynced: number | null
  }

  export type SyncLogSumAggregateOutputType = {
    itemssynced: number | null
  }

  export type SyncLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    syncMappingId: string | null
    direction: $Enums.SyncDirection | null
    status: $Enums.SyncStatus | null
    itemssynced: number | null
    errorMessage: string | null
    createdAt: Date | null
  }

  export type SyncLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    syncMappingId: string | null
    direction: $Enums.SyncDirection | null
    status: $Enums.SyncStatus | null
    itemssynced: number | null
    errorMessage: string | null
    createdAt: Date | null
  }

  export type SyncLogCountAggregateOutputType = {
    id: number
    userId: number
    syncMappingId: number
    direction: number
    status: number
    itemssynced: number
    errorMessage: number
    createdAt: number
    _all: number
  }


  export type SyncLogAvgAggregateInputType = {
    itemssynced?: true
  }

  export type SyncLogSumAggregateInputType = {
    itemssynced?: true
  }

  export type SyncLogMinAggregateInputType = {
    id?: true
    userId?: true
    syncMappingId?: true
    direction?: true
    status?: true
    itemssynced?: true
    errorMessage?: true
    createdAt?: true
  }

  export type SyncLogMaxAggregateInputType = {
    id?: true
    userId?: true
    syncMappingId?: true
    direction?: true
    status?: true
    itemssynced?: true
    errorMessage?: true
    createdAt?: true
  }

  export type SyncLogCountAggregateInputType = {
    id?: true
    userId?: true
    syncMappingId?: true
    direction?: true
    status?: true
    itemssynced?: true
    errorMessage?: true
    createdAt?: true
    _all?: true
  }

  export type SyncLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SyncLog to aggregate.
     */
    where?: SyncLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncLogs to fetch.
     */
    orderBy?: SyncLogOrderByWithRelationInput | SyncLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SyncLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SyncLogs
    **/
    _count?: true | SyncLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SyncLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SyncLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SyncLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SyncLogMaxAggregateInputType
  }

  export type GetSyncLogAggregateType<T extends SyncLogAggregateArgs> = {
        [P in keyof T & keyof AggregateSyncLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSyncLog[P]>
      : GetScalarType<T[P], AggregateSyncLog[P]>
  }




  export type SyncLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SyncLogWhereInput
    orderBy?: SyncLogOrderByWithAggregationInput | SyncLogOrderByWithAggregationInput[]
    by: SyncLogScalarFieldEnum[] | SyncLogScalarFieldEnum
    having?: SyncLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SyncLogCountAggregateInputType | true
    _avg?: SyncLogAvgAggregateInputType
    _sum?: SyncLogSumAggregateInputType
    _min?: SyncLogMinAggregateInputType
    _max?: SyncLogMaxAggregateInputType
  }

  export type SyncLogGroupByOutputType = {
    id: string
    userId: string
    syncMappingId: string
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    itemssynced: number
    errorMessage: string | null
    createdAt: Date
    _count: SyncLogCountAggregateOutputType | null
    _avg: SyncLogAvgAggregateOutputType | null
    _sum: SyncLogSumAggregateOutputType | null
    _min: SyncLogMinAggregateOutputType | null
    _max: SyncLogMaxAggregateOutputType | null
  }

  type GetSyncLogGroupByPayload<T extends SyncLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SyncLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SyncLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SyncLogGroupByOutputType[P]>
            : GetScalarType<T[P], SyncLogGroupByOutputType[P]>
        }
      >
    >


  export type SyncLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    syncMappingId?: boolean
    direction?: boolean
    status?: boolean
    itemssynced?: boolean
    errorMessage?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    syncMapping?: boolean | SyncMappingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["syncLog"]>

  export type SyncLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    syncMappingId?: boolean
    direction?: boolean
    status?: boolean
    itemssynced?: boolean
    errorMessage?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    syncMapping?: boolean | SyncMappingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["syncLog"]>

  export type SyncLogSelectScalar = {
    id?: boolean
    userId?: boolean
    syncMappingId?: boolean
    direction?: boolean
    status?: boolean
    itemssynced?: boolean
    errorMessage?: boolean
    createdAt?: boolean
  }

  export type SyncLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    syncMapping?: boolean | SyncMappingDefaultArgs<ExtArgs>
  }
  export type SyncLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    syncMapping?: boolean | SyncMappingDefaultArgs<ExtArgs>
  }

  export type $SyncLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SyncLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      syncMapping: Prisma.$SyncMappingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      syncMappingId: string
      direction: $Enums.SyncDirection
      status: $Enums.SyncStatus
      itemssynced: number
      errorMessage: string | null
      createdAt: Date
    }, ExtArgs["result"]["syncLog"]>
    composites: {}
  }

  type SyncLogGetPayload<S extends boolean | null | undefined | SyncLogDefaultArgs> = $Result.GetResult<Prisma.$SyncLogPayload, S>

  type SyncLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SyncLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SyncLogCountAggregateInputType | true
    }

  export interface SyncLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SyncLog'], meta: { name: 'SyncLog' } }
    /**
     * Find zero or one SyncLog that matches the filter.
     * @param {SyncLogFindUniqueArgs} args - Arguments to find a SyncLog
     * @example
     * // Get one SyncLog
     * const syncLog = await prisma.syncLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SyncLogFindUniqueArgs>(args: SelectSubset<T, SyncLogFindUniqueArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SyncLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SyncLogFindUniqueOrThrowArgs} args - Arguments to find a SyncLog
     * @example
     * // Get one SyncLog
     * const syncLog = await prisma.syncLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SyncLogFindUniqueOrThrowArgs>(args: SelectSubset<T, SyncLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SyncLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncLogFindFirstArgs} args - Arguments to find a SyncLog
     * @example
     * // Get one SyncLog
     * const syncLog = await prisma.syncLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SyncLogFindFirstArgs>(args?: SelectSubset<T, SyncLogFindFirstArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SyncLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncLogFindFirstOrThrowArgs} args - Arguments to find a SyncLog
     * @example
     * // Get one SyncLog
     * const syncLog = await prisma.syncLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SyncLogFindFirstOrThrowArgs>(args?: SelectSubset<T, SyncLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SyncLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SyncLogs
     * const syncLogs = await prisma.syncLog.findMany()
     * 
     * // Get first 10 SyncLogs
     * const syncLogs = await prisma.syncLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const syncLogWithIdOnly = await prisma.syncLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SyncLogFindManyArgs>(args?: SelectSubset<T, SyncLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SyncLog.
     * @param {SyncLogCreateArgs} args - Arguments to create a SyncLog.
     * @example
     * // Create one SyncLog
     * const SyncLog = await prisma.syncLog.create({
     *   data: {
     *     // ... data to create a SyncLog
     *   }
     * })
     * 
     */
    create<T extends SyncLogCreateArgs>(args: SelectSubset<T, SyncLogCreateArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SyncLogs.
     * @param {SyncLogCreateManyArgs} args - Arguments to create many SyncLogs.
     * @example
     * // Create many SyncLogs
     * const syncLog = await prisma.syncLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SyncLogCreateManyArgs>(args?: SelectSubset<T, SyncLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SyncLogs and returns the data saved in the database.
     * @param {SyncLogCreateManyAndReturnArgs} args - Arguments to create many SyncLogs.
     * @example
     * // Create many SyncLogs
     * const syncLog = await prisma.syncLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SyncLogs and only return the `id`
     * const syncLogWithIdOnly = await prisma.syncLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SyncLogCreateManyAndReturnArgs>(args?: SelectSubset<T, SyncLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SyncLog.
     * @param {SyncLogDeleteArgs} args - Arguments to delete one SyncLog.
     * @example
     * // Delete one SyncLog
     * const SyncLog = await prisma.syncLog.delete({
     *   where: {
     *     // ... filter to delete one SyncLog
     *   }
     * })
     * 
     */
    delete<T extends SyncLogDeleteArgs>(args: SelectSubset<T, SyncLogDeleteArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SyncLog.
     * @param {SyncLogUpdateArgs} args - Arguments to update one SyncLog.
     * @example
     * // Update one SyncLog
     * const syncLog = await prisma.syncLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SyncLogUpdateArgs>(args: SelectSubset<T, SyncLogUpdateArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SyncLogs.
     * @param {SyncLogDeleteManyArgs} args - Arguments to filter SyncLogs to delete.
     * @example
     * // Delete a few SyncLogs
     * const { count } = await prisma.syncLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SyncLogDeleteManyArgs>(args?: SelectSubset<T, SyncLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SyncLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SyncLogs
     * const syncLog = await prisma.syncLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SyncLogUpdateManyArgs>(args: SelectSubset<T, SyncLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SyncLog.
     * @param {SyncLogUpsertArgs} args - Arguments to update or create a SyncLog.
     * @example
     * // Update or create a SyncLog
     * const syncLog = await prisma.syncLog.upsert({
     *   create: {
     *     // ... data to create a SyncLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SyncLog we want to update
     *   }
     * })
     */
    upsert<T extends SyncLogUpsertArgs>(args: SelectSubset<T, SyncLogUpsertArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SyncLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncLogCountArgs} args - Arguments to filter SyncLogs to count.
     * @example
     * // Count the number of SyncLogs
     * const count = await prisma.syncLog.count({
     *   where: {
     *     // ... the filter for the SyncLogs we want to count
     *   }
     * })
    **/
    count<T extends SyncLogCountArgs>(
      args?: Subset<T, SyncLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SyncLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SyncLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SyncLogAggregateArgs>(args: Subset<T, SyncLogAggregateArgs>): Prisma.PrismaPromise<GetSyncLogAggregateType<T>>

    /**
     * Group by SyncLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SyncLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SyncLogGroupByArgs['orderBy'] }
        : { orderBy?: SyncLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SyncLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSyncLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SyncLog model
   */
  readonly fields: SyncLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SyncLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SyncLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    syncMapping<T extends SyncMappingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SyncMappingDefaultArgs<ExtArgs>>): Prisma__SyncMappingClient<$Result.GetResult<Prisma.$SyncMappingPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SyncLog model
   */ 
  interface SyncLogFieldRefs {
    readonly id: FieldRef<"SyncLog", 'String'>
    readonly userId: FieldRef<"SyncLog", 'String'>
    readonly syncMappingId: FieldRef<"SyncLog", 'String'>
    readonly direction: FieldRef<"SyncLog", 'SyncDirection'>
    readonly status: FieldRef<"SyncLog", 'SyncStatus'>
    readonly itemssynced: FieldRef<"SyncLog", 'Int'>
    readonly errorMessage: FieldRef<"SyncLog", 'String'>
    readonly createdAt: FieldRef<"SyncLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SyncLog findUnique
   */
  export type SyncLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * Filter, which SyncLog to fetch.
     */
    where: SyncLogWhereUniqueInput
  }

  /**
   * SyncLog findUniqueOrThrow
   */
  export type SyncLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * Filter, which SyncLog to fetch.
     */
    where: SyncLogWhereUniqueInput
  }

  /**
   * SyncLog findFirst
   */
  export type SyncLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * Filter, which SyncLog to fetch.
     */
    where?: SyncLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncLogs to fetch.
     */
    orderBy?: SyncLogOrderByWithRelationInput | SyncLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SyncLogs.
     */
    cursor?: SyncLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SyncLogs.
     */
    distinct?: SyncLogScalarFieldEnum | SyncLogScalarFieldEnum[]
  }

  /**
   * SyncLog findFirstOrThrow
   */
  export type SyncLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * Filter, which SyncLog to fetch.
     */
    where?: SyncLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncLogs to fetch.
     */
    orderBy?: SyncLogOrderByWithRelationInput | SyncLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SyncLogs.
     */
    cursor?: SyncLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SyncLogs.
     */
    distinct?: SyncLogScalarFieldEnum | SyncLogScalarFieldEnum[]
  }

  /**
   * SyncLog findMany
   */
  export type SyncLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * Filter, which SyncLogs to fetch.
     */
    where?: SyncLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncLogs to fetch.
     */
    orderBy?: SyncLogOrderByWithRelationInput | SyncLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SyncLogs.
     */
    cursor?: SyncLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncLogs.
     */
    skip?: number
    distinct?: SyncLogScalarFieldEnum | SyncLogScalarFieldEnum[]
  }

  /**
   * SyncLog create
   */
  export type SyncLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * The data needed to create a SyncLog.
     */
    data: XOR<SyncLogCreateInput, SyncLogUncheckedCreateInput>
  }

  /**
   * SyncLog createMany
   */
  export type SyncLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SyncLogs.
     */
    data: SyncLogCreateManyInput | SyncLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SyncLog createManyAndReturn
   */
  export type SyncLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SyncLogs.
     */
    data: SyncLogCreateManyInput | SyncLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SyncLog update
   */
  export type SyncLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * The data needed to update a SyncLog.
     */
    data: XOR<SyncLogUpdateInput, SyncLogUncheckedUpdateInput>
    /**
     * Choose, which SyncLog to update.
     */
    where: SyncLogWhereUniqueInput
  }

  /**
   * SyncLog updateMany
   */
  export type SyncLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SyncLogs.
     */
    data: XOR<SyncLogUpdateManyMutationInput, SyncLogUncheckedUpdateManyInput>
    /**
     * Filter which SyncLogs to update
     */
    where?: SyncLogWhereInput
  }

  /**
   * SyncLog upsert
   */
  export type SyncLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * The filter to search for the SyncLog to update in case it exists.
     */
    where: SyncLogWhereUniqueInput
    /**
     * In case the SyncLog found by the `where` argument doesn't exist, create a new SyncLog with this data.
     */
    create: XOR<SyncLogCreateInput, SyncLogUncheckedCreateInput>
    /**
     * In case the SyncLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SyncLogUpdateInput, SyncLogUncheckedUpdateInput>
  }

  /**
   * SyncLog delete
   */
  export type SyncLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * Filter which SyncLog to delete.
     */
    where: SyncLogWhereUniqueInput
  }

  /**
   * SyncLog deleteMany
   */
  export type SyncLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SyncLogs to delete
     */
    where?: SyncLogWhereInput
  }

  /**
   * SyncLog without action
   */
  export type SyncLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
  }


  /**
   * Model SupportTicket
   */

  export type AggregateSupportTicket = {
    _count: SupportTicketCountAggregateOutputType | null
    _min: SupportTicketMinAggregateOutputType | null
    _max: SupportTicketMaxAggregateOutputType | null
  }

  export type SupportTicketMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    email: string | null
    subject: string | null
    category: $Enums.SupportCategory | null
    message: string | null
    priority: $Enums.SupportPriority | null
    status: $Enums.SupportStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SupportTicketMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    email: string | null
    subject: string | null
    category: $Enums.SupportCategory | null
    message: string | null
    priority: $Enums.SupportPriority | null
    status: $Enums.SupportStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SupportTicketCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    email: number
    subject: number
    category: number
    message: number
    priority: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SupportTicketMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    email?: true
    subject?: true
    category?: true
    message?: true
    priority?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SupportTicketMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    email?: true
    subject?: true
    category?: true
    message?: true
    priority?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SupportTicketCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    email?: true
    subject?: true
    category?: true
    message?: true
    priority?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SupportTicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SupportTicket to aggregate.
     */
    where?: SupportTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupportTickets to fetch.
     */
    orderBy?: SupportTicketOrderByWithRelationInput | SupportTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupportTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupportTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupportTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SupportTickets
    **/
    _count?: true | SupportTicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupportTicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupportTicketMaxAggregateInputType
  }

  export type GetSupportTicketAggregateType<T extends SupportTicketAggregateArgs> = {
        [P in keyof T & keyof AggregateSupportTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupportTicket[P]>
      : GetScalarType<T[P], AggregateSupportTicket[P]>
  }




  export type SupportTicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupportTicketWhereInput
    orderBy?: SupportTicketOrderByWithAggregationInput | SupportTicketOrderByWithAggregationInput[]
    by: SupportTicketScalarFieldEnum[] | SupportTicketScalarFieldEnum
    having?: SupportTicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupportTicketCountAggregateInputType | true
    _min?: SupportTicketMinAggregateInputType
    _max?: SupportTicketMaxAggregateInputType
  }

  export type SupportTicketGroupByOutputType = {
    id: string
    userId: string
    name: string
    email: string
    subject: string
    category: $Enums.SupportCategory
    message: string
    priority: $Enums.SupportPriority
    status: $Enums.SupportStatus
    createdAt: Date
    updatedAt: Date
    _count: SupportTicketCountAggregateOutputType | null
    _min: SupportTicketMinAggregateOutputType | null
    _max: SupportTicketMaxAggregateOutputType | null
  }

  type GetSupportTicketGroupByPayload<T extends SupportTicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupportTicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupportTicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupportTicketGroupByOutputType[P]>
            : GetScalarType<T[P], SupportTicketGroupByOutputType[P]>
        }
      >
    >


  export type SupportTicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    email?: boolean
    subject?: boolean
    category?: boolean
    message?: boolean
    priority?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    responses?: boolean | SupportTicket$responsesArgs<ExtArgs>
    _count?: boolean | SupportTicketCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supportTicket"]>

  export type SupportTicketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    email?: boolean
    subject?: boolean
    category?: boolean
    message?: boolean
    priority?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supportTicket"]>

  export type SupportTicketSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    email?: boolean
    subject?: boolean
    category?: boolean
    message?: boolean
    priority?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SupportTicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    responses?: boolean | SupportTicket$responsesArgs<ExtArgs>
    _count?: boolean | SupportTicketCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SupportTicketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SupportTicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SupportTicket"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      responses: Prisma.$SupportTicketResponsePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      email: string
      subject: string
      category: $Enums.SupportCategory
      message: string
      priority: $Enums.SupportPriority
      status: $Enums.SupportStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["supportTicket"]>
    composites: {}
  }

  type SupportTicketGetPayload<S extends boolean | null | undefined | SupportTicketDefaultArgs> = $Result.GetResult<Prisma.$SupportTicketPayload, S>

  type SupportTicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SupportTicketFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SupportTicketCountAggregateInputType | true
    }

  export interface SupportTicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SupportTicket'], meta: { name: 'SupportTicket' } }
    /**
     * Find zero or one SupportTicket that matches the filter.
     * @param {SupportTicketFindUniqueArgs} args - Arguments to find a SupportTicket
     * @example
     * // Get one SupportTicket
     * const supportTicket = await prisma.supportTicket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SupportTicketFindUniqueArgs>(args: SelectSubset<T, SupportTicketFindUniqueArgs<ExtArgs>>): Prisma__SupportTicketClient<$Result.GetResult<Prisma.$SupportTicketPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SupportTicket that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SupportTicketFindUniqueOrThrowArgs} args - Arguments to find a SupportTicket
     * @example
     * // Get one SupportTicket
     * const supportTicket = await prisma.supportTicket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SupportTicketFindUniqueOrThrowArgs>(args: SelectSubset<T, SupportTicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SupportTicketClient<$Result.GetResult<Prisma.$SupportTicketPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SupportTicket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportTicketFindFirstArgs} args - Arguments to find a SupportTicket
     * @example
     * // Get one SupportTicket
     * const supportTicket = await prisma.supportTicket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SupportTicketFindFirstArgs>(args?: SelectSubset<T, SupportTicketFindFirstArgs<ExtArgs>>): Prisma__SupportTicketClient<$Result.GetResult<Prisma.$SupportTicketPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SupportTicket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportTicketFindFirstOrThrowArgs} args - Arguments to find a SupportTicket
     * @example
     * // Get one SupportTicket
     * const supportTicket = await prisma.supportTicket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SupportTicketFindFirstOrThrowArgs>(args?: SelectSubset<T, SupportTicketFindFirstOrThrowArgs<ExtArgs>>): Prisma__SupportTicketClient<$Result.GetResult<Prisma.$SupportTicketPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SupportTickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportTicketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SupportTickets
     * const supportTickets = await prisma.supportTicket.findMany()
     * 
     * // Get first 10 SupportTickets
     * const supportTickets = await prisma.supportTicket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supportTicketWithIdOnly = await prisma.supportTicket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SupportTicketFindManyArgs>(args?: SelectSubset<T, SupportTicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupportTicketPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SupportTicket.
     * @param {SupportTicketCreateArgs} args - Arguments to create a SupportTicket.
     * @example
     * // Create one SupportTicket
     * const SupportTicket = await prisma.supportTicket.create({
     *   data: {
     *     // ... data to create a SupportTicket
     *   }
     * })
     * 
     */
    create<T extends SupportTicketCreateArgs>(args: SelectSubset<T, SupportTicketCreateArgs<ExtArgs>>): Prisma__SupportTicketClient<$Result.GetResult<Prisma.$SupportTicketPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SupportTickets.
     * @param {SupportTicketCreateManyArgs} args - Arguments to create many SupportTickets.
     * @example
     * // Create many SupportTickets
     * const supportTicket = await prisma.supportTicket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SupportTicketCreateManyArgs>(args?: SelectSubset<T, SupportTicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SupportTickets and returns the data saved in the database.
     * @param {SupportTicketCreateManyAndReturnArgs} args - Arguments to create many SupportTickets.
     * @example
     * // Create many SupportTickets
     * const supportTicket = await prisma.supportTicket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SupportTickets and only return the `id`
     * const supportTicketWithIdOnly = await prisma.supportTicket.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SupportTicketCreateManyAndReturnArgs>(args?: SelectSubset<T, SupportTicketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupportTicketPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SupportTicket.
     * @param {SupportTicketDeleteArgs} args - Arguments to delete one SupportTicket.
     * @example
     * // Delete one SupportTicket
     * const SupportTicket = await prisma.supportTicket.delete({
     *   where: {
     *     // ... filter to delete one SupportTicket
     *   }
     * })
     * 
     */
    delete<T extends SupportTicketDeleteArgs>(args: SelectSubset<T, SupportTicketDeleteArgs<ExtArgs>>): Prisma__SupportTicketClient<$Result.GetResult<Prisma.$SupportTicketPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SupportTicket.
     * @param {SupportTicketUpdateArgs} args - Arguments to update one SupportTicket.
     * @example
     * // Update one SupportTicket
     * const supportTicket = await prisma.supportTicket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SupportTicketUpdateArgs>(args: SelectSubset<T, SupportTicketUpdateArgs<ExtArgs>>): Prisma__SupportTicketClient<$Result.GetResult<Prisma.$SupportTicketPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SupportTickets.
     * @param {SupportTicketDeleteManyArgs} args - Arguments to filter SupportTickets to delete.
     * @example
     * // Delete a few SupportTickets
     * const { count } = await prisma.supportTicket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SupportTicketDeleteManyArgs>(args?: SelectSubset<T, SupportTicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SupportTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportTicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SupportTickets
     * const supportTicket = await prisma.supportTicket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SupportTicketUpdateManyArgs>(args: SelectSubset<T, SupportTicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SupportTicket.
     * @param {SupportTicketUpsertArgs} args - Arguments to update or create a SupportTicket.
     * @example
     * // Update or create a SupportTicket
     * const supportTicket = await prisma.supportTicket.upsert({
     *   create: {
     *     // ... data to create a SupportTicket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SupportTicket we want to update
     *   }
     * })
     */
    upsert<T extends SupportTicketUpsertArgs>(args: SelectSubset<T, SupportTicketUpsertArgs<ExtArgs>>): Prisma__SupportTicketClient<$Result.GetResult<Prisma.$SupportTicketPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SupportTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportTicketCountArgs} args - Arguments to filter SupportTickets to count.
     * @example
     * // Count the number of SupportTickets
     * const count = await prisma.supportTicket.count({
     *   where: {
     *     // ... the filter for the SupportTickets we want to count
     *   }
     * })
    **/
    count<T extends SupportTicketCountArgs>(
      args?: Subset<T, SupportTicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupportTicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SupportTicket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportTicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupportTicketAggregateArgs>(args: Subset<T, SupportTicketAggregateArgs>): Prisma.PrismaPromise<GetSupportTicketAggregateType<T>>

    /**
     * Group by SupportTicket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportTicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupportTicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupportTicketGroupByArgs['orderBy'] }
        : { orderBy?: SupportTicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupportTicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupportTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SupportTicket model
   */
  readonly fields: SupportTicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SupportTicket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupportTicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    responses<T extends SupportTicket$responsesArgs<ExtArgs> = {}>(args?: Subset<T, SupportTicket$responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupportTicketResponsePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SupportTicket model
   */ 
  interface SupportTicketFieldRefs {
    readonly id: FieldRef<"SupportTicket", 'String'>
    readonly userId: FieldRef<"SupportTicket", 'String'>
    readonly name: FieldRef<"SupportTicket", 'String'>
    readonly email: FieldRef<"SupportTicket", 'String'>
    readonly subject: FieldRef<"SupportTicket", 'String'>
    readonly category: FieldRef<"SupportTicket", 'SupportCategory'>
    readonly message: FieldRef<"SupportTicket", 'String'>
    readonly priority: FieldRef<"SupportTicket", 'SupportPriority'>
    readonly status: FieldRef<"SupportTicket", 'SupportStatus'>
    readonly createdAt: FieldRef<"SupportTicket", 'DateTime'>
    readonly updatedAt: FieldRef<"SupportTicket", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SupportTicket findUnique
   */
  export type SupportTicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicket
     */
    select?: SupportTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketInclude<ExtArgs> | null
    /**
     * Filter, which SupportTicket to fetch.
     */
    where: SupportTicketWhereUniqueInput
  }

  /**
   * SupportTicket findUniqueOrThrow
   */
  export type SupportTicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicket
     */
    select?: SupportTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketInclude<ExtArgs> | null
    /**
     * Filter, which SupportTicket to fetch.
     */
    where: SupportTicketWhereUniqueInput
  }

  /**
   * SupportTicket findFirst
   */
  export type SupportTicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicket
     */
    select?: SupportTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketInclude<ExtArgs> | null
    /**
     * Filter, which SupportTicket to fetch.
     */
    where?: SupportTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupportTickets to fetch.
     */
    orderBy?: SupportTicketOrderByWithRelationInput | SupportTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SupportTickets.
     */
    cursor?: SupportTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupportTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupportTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SupportTickets.
     */
    distinct?: SupportTicketScalarFieldEnum | SupportTicketScalarFieldEnum[]
  }

  /**
   * SupportTicket findFirstOrThrow
   */
  export type SupportTicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicket
     */
    select?: SupportTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketInclude<ExtArgs> | null
    /**
     * Filter, which SupportTicket to fetch.
     */
    where?: SupportTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupportTickets to fetch.
     */
    orderBy?: SupportTicketOrderByWithRelationInput | SupportTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SupportTickets.
     */
    cursor?: SupportTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupportTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupportTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SupportTickets.
     */
    distinct?: SupportTicketScalarFieldEnum | SupportTicketScalarFieldEnum[]
  }

  /**
   * SupportTicket findMany
   */
  export type SupportTicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicket
     */
    select?: SupportTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketInclude<ExtArgs> | null
    /**
     * Filter, which SupportTickets to fetch.
     */
    where?: SupportTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupportTickets to fetch.
     */
    orderBy?: SupportTicketOrderByWithRelationInput | SupportTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SupportTickets.
     */
    cursor?: SupportTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupportTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupportTickets.
     */
    skip?: number
    distinct?: SupportTicketScalarFieldEnum | SupportTicketScalarFieldEnum[]
  }

  /**
   * SupportTicket create
   */
  export type SupportTicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicket
     */
    select?: SupportTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketInclude<ExtArgs> | null
    /**
     * The data needed to create a SupportTicket.
     */
    data: XOR<SupportTicketCreateInput, SupportTicketUncheckedCreateInput>
  }

  /**
   * SupportTicket createMany
   */
  export type SupportTicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SupportTickets.
     */
    data: SupportTicketCreateManyInput | SupportTicketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SupportTicket createManyAndReturn
   */
  export type SupportTicketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicket
     */
    select?: SupportTicketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SupportTickets.
     */
    data: SupportTicketCreateManyInput | SupportTicketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SupportTicket update
   */
  export type SupportTicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicket
     */
    select?: SupportTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketInclude<ExtArgs> | null
    /**
     * The data needed to update a SupportTicket.
     */
    data: XOR<SupportTicketUpdateInput, SupportTicketUncheckedUpdateInput>
    /**
     * Choose, which SupportTicket to update.
     */
    where: SupportTicketWhereUniqueInput
  }

  /**
   * SupportTicket updateMany
   */
  export type SupportTicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SupportTickets.
     */
    data: XOR<SupportTicketUpdateManyMutationInput, SupportTicketUncheckedUpdateManyInput>
    /**
     * Filter which SupportTickets to update
     */
    where?: SupportTicketWhereInput
  }

  /**
   * SupportTicket upsert
   */
  export type SupportTicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicket
     */
    select?: SupportTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketInclude<ExtArgs> | null
    /**
     * The filter to search for the SupportTicket to update in case it exists.
     */
    where: SupportTicketWhereUniqueInput
    /**
     * In case the SupportTicket found by the `where` argument doesn't exist, create a new SupportTicket with this data.
     */
    create: XOR<SupportTicketCreateInput, SupportTicketUncheckedCreateInput>
    /**
     * In case the SupportTicket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupportTicketUpdateInput, SupportTicketUncheckedUpdateInput>
  }

  /**
   * SupportTicket delete
   */
  export type SupportTicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicket
     */
    select?: SupportTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketInclude<ExtArgs> | null
    /**
     * Filter which SupportTicket to delete.
     */
    where: SupportTicketWhereUniqueInput
  }

  /**
   * SupportTicket deleteMany
   */
  export type SupportTicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SupportTickets to delete
     */
    where?: SupportTicketWhereInput
  }

  /**
   * SupportTicket.responses
   */
  export type SupportTicket$responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicketResponse
     */
    select?: SupportTicketResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketResponseInclude<ExtArgs> | null
    where?: SupportTicketResponseWhereInput
    orderBy?: SupportTicketResponseOrderByWithRelationInput | SupportTicketResponseOrderByWithRelationInput[]
    cursor?: SupportTicketResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupportTicketResponseScalarFieldEnum | SupportTicketResponseScalarFieldEnum[]
  }

  /**
   * SupportTicket without action
   */
  export type SupportTicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicket
     */
    select?: SupportTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketInclude<ExtArgs> | null
  }


  /**
   * Model SupportTicketResponse
   */

  export type AggregateSupportTicketResponse = {
    _count: SupportTicketResponseCountAggregateOutputType | null
    _min: SupportTicketResponseMinAggregateOutputType | null
    _max: SupportTicketResponseMaxAggregateOutputType | null
  }

  export type SupportTicketResponseMinAggregateOutputType = {
    id: string | null
    ticketId: string | null
    message: string | null
    isFromUser: boolean | null
    createdAt: Date | null
  }

  export type SupportTicketResponseMaxAggregateOutputType = {
    id: string | null
    ticketId: string | null
    message: string | null
    isFromUser: boolean | null
    createdAt: Date | null
  }

  export type SupportTicketResponseCountAggregateOutputType = {
    id: number
    ticketId: number
    message: number
    isFromUser: number
    createdAt: number
    _all: number
  }


  export type SupportTicketResponseMinAggregateInputType = {
    id?: true
    ticketId?: true
    message?: true
    isFromUser?: true
    createdAt?: true
  }

  export type SupportTicketResponseMaxAggregateInputType = {
    id?: true
    ticketId?: true
    message?: true
    isFromUser?: true
    createdAt?: true
  }

  export type SupportTicketResponseCountAggregateInputType = {
    id?: true
    ticketId?: true
    message?: true
    isFromUser?: true
    createdAt?: true
    _all?: true
  }

  export type SupportTicketResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SupportTicketResponse to aggregate.
     */
    where?: SupportTicketResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupportTicketResponses to fetch.
     */
    orderBy?: SupportTicketResponseOrderByWithRelationInput | SupportTicketResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupportTicketResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupportTicketResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupportTicketResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SupportTicketResponses
    **/
    _count?: true | SupportTicketResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupportTicketResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupportTicketResponseMaxAggregateInputType
  }

  export type GetSupportTicketResponseAggregateType<T extends SupportTicketResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateSupportTicketResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupportTicketResponse[P]>
      : GetScalarType<T[P], AggregateSupportTicketResponse[P]>
  }




  export type SupportTicketResponseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupportTicketResponseWhereInput
    orderBy?: SupportTicketResponseOrderByWithAggregationInput | SupportTicketResponseOrderByWithAggregationInput[]
    by: SupportTicketResponseScalarFieldEnum[] | SupportTicketResponseScalarFieldEnum
    having?: SupportTicketResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupportTicketResponseCountAggregateInputType | true
    _min?: SupportTicketResponseMinAggregateInputType
    _max?: SupportTicketResponseMaxAggregateInputType
  }

  export type SupportTicketResponseGroupByOutputType = {
    id: string
    ticketId: string
    message: string
    isFromUser: boolean
    createdAt: Date
    _count: SupportTicketResponseCountAggregateOutputType | null
    _min: SupportTicketResponseMinAggregateOutputType | null
    _max: SupportTicketResponseMaxAggregateOutputType | null
  }

  type GetSupportTicketResponseGroupByPayload<T extends SupportTicketResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupportTicketResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupportTicketResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupportTicketResponseGroupByOutputType[P]>
            : GetScalarType<T[P], SupportTicketResponseGroupByOutputType[P]>
        }
      >
    >


  export type SupportTicketResponseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticketId?: boolean
    message?: boolean
    isFromUser?: boolean
    createdAt?: boolean
    ticket?: boolean | SupportTicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supportTicketResponse"]>

  export type SupportTicketResponseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticketId?: boolean
    message?: boolean
    isFromUser?: boolean
    createdAt?: boolean
    ticket?: boolean | SupportTicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supportTicketResponse"]>

  export type SupportTicketResponseSelectScalar = {
    id?: boolean
    ticketId?: boolean
    message?: boolean
    isFromUser?: boolean
    createdAt?: boolean
  }

  export type SupportTicketResponseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | SupportTicketDefaultArgs<ExtArgs>
  }
  export type SupportTicketResponseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | SupportTicketDefaultArgs<ExtArgs>
  }

  export type $SupportTicketResponsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SupportTicketResponse"
    objects: {
      ticket: Prisma.$SupportTicketPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ticketId: string
      message: string
      isFromUser: boolean
      createdAt: Date
    }, ExtArgs["result"]["supportTicketResponse"]>
    composites: {}
  }

  type SupportTicketResponseGetPayload<S extends boolean | null | undefined | SupportTicketResponseDefaultArgs> = $Result.GetResult<Prisma.$SupportTicketResponsePayload, S>

  type SupportTicketResponseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SupportTicketResponseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SupportTicketResponseCountAggregateInputType | true
    }

  export interface SupportTicketResponseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SupportTicketResponse'], meta: { name: 'SupportTicketResponse' } }
    /**
     * Find zero or one SupportTicketResponse that matches the filter.
     * @param {SupportTicketResponseFindUniqueArgs} args - Arguments to find a SupportTicketResponse
     * @example
     * // Get one SupportTicketResponse
     * const supportTicketResponse = await prisma.supportTicketResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SupportTicketResponseFindUniqueArgs>(args: SelectSubset<T, SupportTicketResponseFindUniqueArgs<ExtArgs>>): Prisma__SupportTicketResponseClient<$Result.GetResult<Prisma.$SupportTicketResponsePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SupportTicketResponse that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SupportTicketResponseFindUniqueOrThrowArgs} args - Arguments to find a SupportTicketResponse
     * @example
     * // Get one SupportTicketResponse
     * const supportTicketResponse = await prisma.supportTicketResponse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SupportTicketResponseFindUniqueOrThrowArgs>(args: SelectSubset<T, SupportTicketResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SupportTicketResponseClient<$Result.GetResult<Prisma.$SupportTicketResponsePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SupportTicketResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportTicketResponseFindFirstArgs} args - Arguments to find a SupportTicketResponse
     * @example
     * // Get one SupportTicketResponse
     * const supportTicketResponse = await prisma.supportTicketResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SupportTicketResponseFindFirstArgs>(args?: SelectSubset<T, SupportTicketResponseFindFirstArgs<ExtArgs>>): Prisma__SupportTicketResponseClient<$Result.GetResult<Prisma.$SupportTicketResponsePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SupportTicketResponse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportTicketResponseFindFirstOrThrowArgs} args - Arguments to find a SupportTicketResponse
     * @example
     * // Get one SupportTicketResponse
     * const supportTicketResponse = await prisma.supportTicketResponse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SupportTicketResponseFindFirstOrThrowArgs>(args?: SelectSubset<T, SupportTicketResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma__SupportTicketResponseClient<$Result.GetResult<Prisma.$SupportTicketResponsePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SupportTicketResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportTicketResponseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SupportTicketResponses
     * const supportTicketResponses = await prisma.supportTicketResponse.findMany()
     * 
     * // Get first 10 SupportTicketResponses
     * const supportTicketResponses = await prisma.supportTicketResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supportTicketResponseWithIdOnly = await prisma.supportTicketResponse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SupportTicketResponseFindManyArgs>(args?: SelectSubset<T, SupportTicketResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupportTicketResponsePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SupportTicketResponse.
     * @param {SupportTicketResponseCreateArgs} args - Arguments to create a SupportTicketResponse.
     * @example
     * // Create one SupportTicketResponse
     * const SupportTicketResponse = await prisma.supportTicketResponse.create({
     *   data: {
     *     // ... data to create a SupportTicketResponse
     *   }
     * })
     * 
     */
    create<T extends SupportTicketResponseCreateArgs>(args: SelectSubset<T, SupportTicketResponseCreateArgs<ExtArgs>>): Prisma__SupportTicketResponseClient<$Result.GetResult<Prisma.$SupportTicketResponsePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SupportTicketResponses.
     * @param {SupportTicketResponseCreateManyArgs} args - Arguments to create many SupportTicketResponses.
     * @example
     * // Create many SupportTicketResponses
     * const supportTicketResponse = await prisma.supportTicketResponse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SupportTicketResponseCreateManyArgs>(args?: SelectSubset<T, SupportTicketResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SupportTicketResponses and returns the data saved in the database.
     * @param {SupportTicketResponseCreateManyAndReturnArgs} args - Arguments to create many SupportTicketResponses.
     * @example
     * // Create many SupportTicketResponses
     * const supportTicketResponse = await prisma.supportTicketResponse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SupportTicketResponses and only return the `id`
     * const supportTicketResponseWithIdOnly = await prisma.supportTicketResponse.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SupportTicketResponseCreateManyAndReturnArgs>(args?: SelectSubset<T, SupportTicketResponseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupportTicketResponsePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SupportTicketResponse.
     * @param {SupportTicketResponseDeleteArgs} args - Arguments to delete one SupportTicketResponse.
     * @example
     * // Delete one SupportTicketResponse
     * const SupportTicketResponse = await prisma.supportTicketResponse.delete({
     *   where: {
     *     // ... filter to delete one SupportTicketResponse
     *   }
     * })
     * 
     */
    delete<T extends SupportTicketResponseDeleteArgs>(args: SelectSubset<T, SupportTicketResponseDeleteArgs<ExtArgs>>): Prisma__SupportTicketResponseClient<$Result.GetResult<Prisma.$SupportTicketResponsePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SupportTicketResponse.
     * @param {SupportTicketResponseUpdateArgs} args - Arguments to update one SupportTicketResponse.
     * @example
     * // Update one SupportTicketResponse
     * const supportTicketResponse = await prisma.supportTicketResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SupportTicketResponseUpdateArgs>(args: SelectSubset<T, SupportTicketResponseUpdateArgs<ExtArgs>>): Prisma__SupportTicketResponseClient<$Result.GetResult<Prisma.$SupportTicketResponsePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SupportTicketResponses.
     * @param {SupportTicketResponseDeleteManyArgs} args - Arguments to filter SupportTicketResponses to delete.
     * @example
     * // Delete a few SupportTicketResponses
     * const { count } = await prisma.supportTicketResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SupportTicketResponseDeleteManyArgs>(args?: SelectSubset<T, SupportTicketResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SupportTicketResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportTicketResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SupportTicketResponses
     * const supportTicketResponse = await prisma.supportTicketResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SupportTicketResponseUpdateManyArgs>(args: SelectSubset<T, SupportTicketResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SupportTicketResponse.
     * @param {SupportTicketResponseUpsertArgs} args - Arguments to update or create a SupportTicketResponse.
     * @example
     * // Update or create a SupportTicketResponse
     * const supportTicketResponse = await prisma.supportTicketResponse.upsert({
     *   create: {
     *     // ... data to create a SupportTicketResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SupportTicketResponse we want to update
     *   }
     * })
     */
    upsert<T extends SupportTicketResponseUpsertArgs>(args: SelectSubset<T, SupportTicketResponseUpsertArgs<ExtArgs>>): Prisma__SupportTicketResponseClient<$Result.GetResult<Prisma.$SupportTicketResponsePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SupportTicketResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportTicketResponseCountArgs} args - Arguments to filter SupportTicketResponses to count.
     * @example
     * // Count the number of SupportTicketResponses
     * const count = await prisma.supportTicketResponse.count({
     *   where: {
     *     // ... the filter for the SupportTicketResponses we want to count
     *   }
     * })
    **/
    count<T extends SupportTicketResponseCountArgs>(
      args?: Subset<T, SupportTicketResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupportTicketResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SupportTicketResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportTicketResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupportTicketResponseAggregateArgs>(args: Subset<T, SupportTicketResponseAggregateArgs>): Prisma.PrismaPromise<GetSupportTicketResponseAggregateType<T>>

    /**
     * Group by SupportTicketResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportTicketResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupportTicketResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupportTicketResponseGroupByArgs['orderBy'] }
        : { orderBy?: SupportTicketResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupportTicketResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupportTicketResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SupportTicketResponse model
   */
  readonly fields: SupportTicketResponseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SupportTicketResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupportTicketResponseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket<T extends SupportTicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SupportTicketDefaultArgs<ExtArgs>>): Prisma__SupportTicketClient<$Result.GetResult<Prisma.$SupportTicketPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SupportTicketResponse model
   */ 
  interface SupportTicketResponseFieldRefs {
    readonly id: FieldRef<"SupportTicketResponse", 'String'>
    readonly ticketId: FieldRef<"SupportTicketResponse", 'String'>
    readonly message: FieldRef<"SupportTicketResponse", 'String'>
    readonly isFromUser: FieldRef<"SupportTicketResponse", 'Boolean'>
    readonly createdAt: FieldRef<"SupportTicketResponse", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SupportTicketResponse findUnique
   */
  export type SupportTicketResponseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicketResponse
     */
    select?: SupportTicketResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketResponseInclude<ExtArgs> | null
    /**
     * Filter, which SupportTicketResponse to fetch.
     */
    where: SupportTicketResponseWhereUniqueInput
  }

  /**
   * SupportTicketResponse findUniqueOrThrow
   */
  export type SupportTicketResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicketResponse
     */
    select?: SupportTicketResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketResponseInclude<ExtArgs> | null
    /**
     * Filter, which SupportTicketResponse to fetch.
     */
    where: SupportTicketResponseWhereUniqueInput
  }

  /**
   * SupportTicketResponse findFirst
   */
  export type SupportTicketResponseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicketResponse
     */
    select?: SupportTicketResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketResponseInclude<ExtArgs> | null
    /**
     * Filter, which SupportTicketResponse to fetch.
     */
    where?: SupportTicketResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupportTicketResponses to fetch.
     */
    orderBy?: SupportTicketResponseOrderByWithRelationInput | SupportTicketResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SupportTicketResponses.
     */
    cursor?: SupportTicketResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupportTicketResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupportTicketResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SupportTicketResponses.
     */
    distinct?: SupportTicketResponseScalarFieldEnum | SupportTicketResponseScalarFieldEnum[]
  }

  /**
   * SupportTicketResponse findFirstOrThrow
   */
  export type SupportTicketResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicketResponse
     */
    select?: SupportTicketResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketResponseInclude<ExtArgs> | null
    /**
     * Filter, which SupportTicketResponse to fetch.
     */
    where?: SupportTicketResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupportTicketResponses to fetch.
     */
    orderBy?: SupportTicketResponseOrderByWithRelationInput | SupportTicketResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SupportTicketResponses.
     */
    cursor?: SupportTicketResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupportTicketResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupportTicketResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SupportTicketResponses.
     */
    distinct?: SupportTicketResponseScalarFieldEnum | SupportTicketResponseScalarFieldEnum[]
  }

  /**
   * SupportTicketResponse findMany
   */
  export type SupportTicketResponseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicketResponse
     */
    select?: SupportTicketResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketResponseInclude<ExtArgs> | null
    /**
     * Filter, which SupportTicketResponses to fetch.
     */
    where?: SupportTicketResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupportTicketResponses to fetch.
     */
    orderBy?: SupportTicketResponseOrderByWithRelationInput | SupportTicketResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SupportTicketResponses.
     */
    cursor?: SupportTicketResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupportTicketResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupportTicketResponses.
     */
    skip?: number
    distinct?: SupportTicketResponseScalarFieldEnum | SupportTicketResponseScalarFieldEnum[]
  }

  /**
   * SupportTicketResponse create
   */
  export type SupportTicketResponseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicketResponse
     */
    select?: SupportTicketResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a SupportTicketResponse.
     */
    data: XOR<SupportTicketResponseCreateInput, SupportTicketResponseUncheckedCreateInput>
  }

  /**
   * SupportTicketResponse createMany
   */
  export type SupportTicketResponseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SupportTicketResponses.
     */
    data: SupportTicketResponseCreateManyInput | SupportTicketResponseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SupportTicketResponse createManyAndReturn
   */
  export type SupportTicketResponseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicketResponse
     */
    select?: SupportTicketResponseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SupportTicketResponses.
     */
    data: SupportTicketResponseCreateManyInput | SupportTicketResponseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketResponseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SupportTicketResponse update
   */
  export type SupportTicketResponseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicketResponse
     */
    select?: SupportTicketResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a SupportTicketResponse.
     */
    data: XOR<SupportTicketResponseUpdateInput, SupportTicketResponseUncheckedUpdateInput>
    /**
     * Choose, which SupportTicketResponse to update.
     */
    where: SupportTicketResponseWhereUniqueInput
  }

  /**
   * SupportTicketResponse updateMany
   */
  export type SupportTicketResponseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SupportTicketResponses.
     */
    data: XOR<SupportTicketResponseUpdateManyMutationInput, SupportTicketResponseUncheckedUpdateManyInput>
    /**
     * Filter which SupportTicketResponses to update
     */
    where?: SupportTicketResponseWhereInput
  }

  /**
   * SupportTicketResponse upsert
   */
  export type SupportTicketResponseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicketResponse
     */
    select?: SupportTicketResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the SupportTicketResponse to update in case it exists.
     */
    where: SupportTicketResponseWhereUniqueInput
    /**
     * In case the SupportTicketResponse found by the `where` argument doesn't exist, create a new SupportTicketResponse with this data.
     */
    create: XOR<SupportTicketResponseCreateInput, SupportTicketResponseUncheckedCreateInput>
    /**
     * In case the SupportTicketResponse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupportTicketResponseUpdateInput, SupportTicketResponseUncheckedUpdateInput>
  }

  /**
   * SupportTicketResponse delete
   */
  export type SupportTicketResponseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicketResponse
     */
    select?: SupportTicketResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketResponseInclude<ExtArgs> | null
    /**
     * Filter which SupportTicketResponse to delete.
     */
    where: SupportTicketResponseWhereUniqueInput
  }

  /**
   * SupportTicketResponse deleteMany
   */
  export type SupportTicketResponseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SupportTicketResponses to delete
     */
    where?: SupportTicketResponseWhereInput
  }

  /**
   * SupportTicketResponse without action
   */
  export type SupportTicketResponseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportTicketResponse
     */
    select?: SupportTicketResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportTicketResponseInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    avatar: 'avatar',
    plan: 'plan',
    isAdmin: 'isAdmin',
    monthlyTasksUsed: 'monthlyTasksUsed',
    lastUsageReset: 'lastUsageReset',
    emailVerified: 'emailVerified',
    signupMethod: 'signupMethod',
    lastLoginAt: 'lastLoginAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SocialAccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    provider: 'provider',
    providerId: 'providerId',
    providerEmail: 'providerEmail',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SocialAccountScalarFieldEnum = (typeof SocialAccountScalarFieldEnum)[keyof typeof SocialAccountScalarFieldEnum]


  export const AsanaTokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AsanaTokenScalarFieldEnum = (typeof AsanaTokenScalarFieldEnum)[keyof typeof AsanaTokenScalarFieldEnum]


  export const OmniFocusSetupScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    agentKey: 'agentKey',
    isActive: 'isActive',
    version: 'version',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OmniFocusSetupScalarFieldEnum = (typeof OmniFocusSetupScalarFieldEnum)[keyof typeof OmniFocusSetupScalarFieldEnum]


  export const SyncMappingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    asanaProjectId: 'asanaProjectId',
    asanaProjectName: 'asanaProjectName',
    ofProjectName: 'ofProjectName',
    isActive: 'isActive',
    lastSyncAt: 'lastSyncAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SyncMappingScalarFieldEnum = (typeof SyncMappingScalarFieldEnum)[keyof typeof SyncMappingScalarFieldEnum]


  export const SyncLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    syncMappingId: 'syncMappingId',
    direction: 'direction',
    status: 'status',
    itemssynced: 'itemssynced',
    errorMessage: 'errorMessage',
    createdAt: 'createdAt'
  };

  export type SyncLogScalarFieldEnum = (typeof SyncLogScalarFieldEnum)[keyof typeof SyncLogScalarFieldEnum]


  export const SupportTicketScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    email: 'email',
    subject: 'subject',
    category: 'category',
    message: 'message',
    priority: 'priority',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SupportTicketScalarFieldEnum = (typeof SupportTicketScalarFieldEnum)[keyof typeof SupportTicketScalarFieldEnum]


  export const SupportTicketResponseScalarFieldEnum: {
    id: 'id',
    ticketId: 'ticketId',
    message: 'message',
    isFromUser: 'isFromUser',
    createdAt: 'createdAt'
  };

  export type SupportTicketResponseScalarFieldEnum = (typeof SupportTicketResponseScalarFieldEnum)[keyof typeof SupportTicketResponseScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserPlan'
   */
  export type EnumUserPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserPlan'>
    


  /**
   * Reference to a field of type 'UserPlan[]'
   */
  export type ListEnumUserPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserPlan[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'SignupMethod'
   */
  export type EnumSignupMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SignupMethod'>
    


  /**
   * Reference to a field of type 'SignupMethod[]'
   */
  export type ListEnumSignupMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SignupMethod[]'>
    


  /**
   * Reference to a field of type 'AuthProvider'
   */
  export type EnumAuthProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthProvider'>
    


  /**
   * Reference to a field of type 'AuthProvider[]'
   */
  export type ListEnumAuthProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthProvider[]'>
    


  /**
   * Reference to a field of type 'SyncDirection'
   */
  export type EnumSyncDirectionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SyncDirection'>
    


  /**
   * Reference to a field of type 'SyncDirection[]'
   */
  export type ListEnumSyncDirectionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SyncDirection[]'>
    


  /**
   * Reference to a field of type 'SyncStatus'
   */
  export type EnumSyncStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SyncStatus'>
    


  /**
   * Reference to a field of type 'SyncStatus[]'
   */
  export type ListEnumSyncStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SyncStatus[]'>
    


  /**
   * Reference to a field of type 'SupportCategory'
   */
  export type EnumSupportCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SupportCategory'>
    


  /**
   * Reference to a field of type 'SupportCategory[]'
   */
  export type ListEnumSupportCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SupportCategory[]'>
    


  /**
   * Reference to a field of type 'SupportPriority'
   */
  export type EnumSupportPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SupportPriority'>
    


  /**
   * Reference to a field of type 'SupportPriority[]'
   */
  export type ListEnumSupportPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SupportPriority[]'>
    


  /**
   * Reference to a field of type 'SupportStatus'
   */
  export type EnumSupportStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SupportStatus'>
    


  /**
   * Reference to a field of type 'SupportStatus[]'
   */
  export type ListEnumSupportStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SupportStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    plan?: EnumUserPlanFilter<"User"> | $Enums.UserPlan
    isAdmin?: BoolFilter<"User"> | boolean
    monthlyTasksUsed?: IntFilter<"User"> | number
    lastUsageReset?: DateTimeFilter<"User"> | Date | string
    emailVerified?: BoolFilter<"User"> | boolean
    signupMethod?: EnumSignupMethodFilter<"User"> | $Enums.SignupMethod
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    asanaTokens?: AsanaTokenListRelationFilter
    socialAccounts?: SocialAccountListRelationFilter
    omnifocusSetup?: XOR<OmniFocusSetupNullableRelationFilter, OmniFocusSetupWhereInput> | null
    syncMappings?: SyncMappingListRelationFilter
    syncLogs?: SyncLogListRelationFilter
    supportTickets?: SupportTicketListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    plan?: SortOrder
    isAdmin?: SortOrder
    monthlyTasksUsed?: SortOrder
    lastUsageReset?: SortOrder
    emailVerified?: SortOrder
    signupMethod?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asanaTokens?: AsanaTokenOrderByRelationAggregateInput
    socialAccounts?: SocialAccountOrderByRelationAggregateInput
    omnifocusSetup?: OmniFocusSetupOrderByWithRelationInput
    syncMappings?: SyncMappingOrderByRelationAggregateInput
    syncLogs?: SyncLogOrderByRelationAggregateInput
    supportTickets?: SupportTicketOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    plan?: EnumUserPlanFilter<"User"> | $Enums.UserPlan
    isAdmin?: BoolFilter<"User"> | boolean
    monthlyTasksUsed?: IntFilter<"User"> | number
    lastUsageReset?: DateTimeFilter<"User"> | Date | string
    emailVerified?: BoolFilter<"User"> | boolean
    signupMethod?: EnumSignupMethodFilter<"User"> | $Enums.SignupMethod
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    asanaTokens?: AsanaTokenListRelationFilter
    socialAccounts?: SocialAccountListRelationFilter
    omnifocusSetup?: XOR<OmniFocusSetupNullableRelationFilter, OmniFocusSetupWhereInput> | null
    syncMappings?: SyncMappingListRelationFilter
    syncLogs?: SyncLogListRelationFilter
    supportTickets?: SupportTicketListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    plan?: SortOrder
    isAdmin?: SortOrder
    monthlyTasksUsed?: SortOrder
    lastUsageReset?: SortOrder
    emailVerified?: SortOrder
    signupMethod?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    plan?: EnumUserPlanWithAggregatesFilter<"User"> | $Enums.UserPlan
    isAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    monthlyTasksUsed?: IntWithAggregatesFilter<"User"> | number
    lastUsageReset?: DateTimeWithAggregatesFilter<"User"> | Date | string
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    signupMethod?: EnumSignupMethodWithAggregatesFilter<"User"> | $Enums.SignupMethod
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SocialAccountWhereInput = {
    AND?: SocialAccountWhereInput | SocialAccountWhereInput[]
    OR?: SocialAccountWhereInput[]
    NOT?: SocialAccountWhereInput | SocialAccountWhereInput[]
    id?: StringFilter<"SocialAccount"> | string
    userId?: StringFilter<"SocialAccount"> | string
    provider?: EnumAuthProviderFilter<"SocialAccount"> | $Enums.AuthProvider
    providerId?: StringFilter<"SocialAccount"> | string
    providerEmail?: StringNullableFilter<"SocialAccount"> | string | null
    accessToken?: StringNullableFilter<"SocialAccount"> | string | null
    refreshToken?: StringNullableFilter<"SocialAccount"> | string | null
    expiresAt?: DateTimeNullableFilter<"SocialAccount"> | Date | string | null
    createdAt?: DateTimeFilter<"SocialAccount"> | Date | string
    updatedAt?: DateTimeFilter<"SocialAccount"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SocialAccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    providerEmail?: SortOrderInput | SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SocialAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerId?: SocialAccountProviderProviderIdCompoundUniqueInput
    AND?: SocialAccountWhereInput | SocialAccountWhereInput[]
    OR?: SocialAccountWhereInput[]
    NOT?: SocialAccountWhereInput | SocialAccountWhereInput[]
    userId?: StringFilter<"SocialAccount"> | string
    provider?: EnumAuthProviderFilter<"SocialAccount"> | $Enums.AuthProvider
    providerId?: StringFilter<"SocialAccount"> | string
    providerEmail?: StringNullableFilter<"SocialAccount"> | string | null
    accessToken?: StringNullableFilter<"SocialAccount"> | string | null
    refreshToken?: StringNullableFilter<"SocialAccount"> | string | null
    expiresAt?: DateTimeNullableFilter<"SocialAccount"> | Date | string | null
    createdAt?: DateTimeFilter<"SocialAccount"> | Date | string
    updatedAt?: DateTimeFilter<"SocialAccount"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "provider_providerId">

  export type SocialAccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    providerEmail?: SortOrderInput | SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SocialAccountCountOrderByAggregateInput
    _max?: SocialAccountMaxOrderByAggregateInput
    _min?: SocialAccountMinOrderByAggregateInput
  }

  export type SocialAccountScalarWhereWithAggregatesInput = {
    AND?: SocialAccountScalarWhereWithAggregatesInput | SocialAccountScalarWhereWithAggregatesInput[]
    OR?: SocialAccountScalarWhereWithAggregatesInput[]
    NOT?: SocialAccountScalarWhereWithAggregatesInput | SocialAccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SocialAccount"> | string
    userId?: StringWithAggregatesFilter<"SocialAccount"> | string
    provider?: EnumAuthProviderWithAggregatesFilter<"SocialAccount"> | $Enums.AuthProvider
    providerId?: StringWithAggregatesFilter<"SocialAccount"> | string
    providerEmail?: StringNullableWithAggregatesFilter<"SocialAccount"> | string | null
    accessToken?: StringNullableWithAggregatesFilter<"SocialAccount"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"SocialAccount"> | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"SocialAccount"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SocialAccount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SocialAccount"> | Date | string
  }

  export type AsanaTokenWhereInput = {
    AND?: AsanaTokenWhereInput | AsanaTokenWhereInput[]
    OR?: AsanaTokenWhereInput[]
    NOT?: AsanaTokenWhereInput | AsanaTokenWhereInput[]
    id?: StringFilter<"AsanaToken"> | string
    userId?: StringFilter<"AsanaToken"> | string
    accessToken?: StringFilter<"AsanaToken"> | string
    refreshToken?: StringNullableFilter<"AsanaToken"> | string | null
    expiresAt?: DateTimeNullableFilter<"AsanaToken"> | Date | string | null
    createdAt?: DateTimeFilter<"AsanaToken"> | Date | string
    updatedAt?: DateTimeFilter<"AsanaToken"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AsanaTokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AsanaTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: AsanaTokenWhereInput | AsanaTokenWhereInput[]
    OR?: AsanaTokenWhereInput[]
    NOT?: AsanaTokenWhereInput | AsanaTokenWhereInput[]
    accessToken?: StringFilter<"AsanaToken"> | string
    refreshToken?: StringNullableFilter<"AsanaToken"> | string | null
    expiresAt?: DateTimeNullableFilter<"AsanaToken"> | Date | string | null
    createdAt?: DateTimeFilter<"AsanaToken"> | Date | string
    updatedAt?: DateTimeFilter<"AsanaToken"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type AsanaTokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AsanaTokenCountOrderByAggregateInput
    _max?: AsanaTokenMaxOrderByAggregateInput
    _min?: AsanaTokenMinOrderByAggregateInput
  }

  export type AsanaTokenScalarWhereWithAggregatesInput = {
    AND?: AsanaTokenScalarWhereWithAggregatesInput | AsanaTokenScalarWhereWithAggregatesInput[]
    OR?: AsanaTokenScalarWhereWithAggregatesInput[]
    NOT?: AsanaTokenScalarWhereWithAggregatesInput | AsanaTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AsanaToken"> | string
    userId?: StringWithAggregatesFilter<"AsanaToken"> | string
    accessToken?: StringWithAggregatesFilter<"AsanaToken"> | string
    refreshToken?: StringNullableWithAggregatesFilter<"AsanaToken"> | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"AsanaToken"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AsanaToken"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AsanaToken"> | Date | string
  }

  export type OmniFocusSetupWhereInput = {
    AND?: OmniFocusSetupWhereInput | OmniFocusSetupWhereInput[]
    OR?: OmniFocusSetupWhereInput[]
    NOT?: OmniFocusSetupWhereInput | OmniFocusSetupWhereInput[]
    id?: StringFilter<"OmniFocusSetup"> | string
    userId?: StringFilter<"OmniFocusSetup"> | string
    agentKey?: StringFilter<"OmniFocusSetup"> | string
    isActive?: BoolFilter<"OmniFocusSetup"> | boolean
    version?: StringNullableFilter<"OmniFocusSetup"> | string | null
    createdAt?: DateTimeFilter<"OmniFocusSetup"> | Date | string
    updatedAt?: DateTimeFilter<"OmniFocusSetup"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type OmniFocusSetupOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    agentKey?: SortOrder
    isActive?: SortOrder
    version?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OmniFocusSetupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    agentKey?: string
    AND?: OmniFocusSetupWhereInput | OmniFocusSetupWhereInput[]
    OR?: OmniFocusSetupWhereInput[]
    NOT?: OmniFocusSetupWhereInput | OmniFocusSetupWhereInput[]
    isActive?: BoolFilter<"OmniFocusSetup"> | boolean
    version?: StringNullableFilter<"OmniFocusSetup"> | string | null
    createdAt?: DateTimeFilter<"OmniFocusSetup"> | Date | string
    updatedAt?: DateTimeFilter<"OmniFocusSetup"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId" | "agentKey">

  export type OmniFocusSetupOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    agentKey?: SortOrder
    isActive?: SortOrder
    version?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OmniFocusSetupCountOrderByAggregateInput
    _max?: OmniFocusSetupMaxOrderByAggregateInput
    _min?: OmniFocusSetupMinOrderByAggregateInput
  }

  export type OmniFocusSetupScalarWhereWithAggregatesInput = {
    AND?: OmniFocusSetupScalarWhereWithAggregatesInput | OmniFocusSetupScalarWhereWithAggregatesInput[]
    OR?: OmniFocusSetupScalarWhereWithAggregatesInput[]
    NOT?: OmniFocusSetupScalarWhereWithAggregatesInput | OmniFocusSetupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OmniFocusSetup"> | string
    userId?: StringWithAggregatesFilter<"OmniFocusSetup"> | string
    agentKey?: StringWithAggregatesFilter<"OmniFocusSetup"> | string
    isActive?: BoolWithAggregatesFilter<"OmniFocusSetup"> | boolean
    version?: StringNullableWithAggregatesFilter<"OmniFocusSetup"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"OmniFocusSetup"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OmniFocusSetup"> | Date | string
  }

  export type SyncMappingWhereInput = {
    AND?: SyncMappingWhereInput | SyncMappingWhereInput[]
    OR?: SyncMappingWhereInput[]
    NOT?: SyncMappingWhereInput | SyncMappingWhereInput[]
    id?: StringFilter<"SyncMapping"> | string
    userId?: StringFilter<"SyncMapping"> | string
    asanaProjectId?: StringFilter<"SyncMapping"> | string
    asanaProjectName?: StringFilter<"SyncMapping"> | string
    ofProjectName?: StringFilter<"SyncMapping"> | string
    isActive?: BoolFilter<"SyncMapping"> | boolean
    lastSyncAt?: DateTimeNullableFilter<"SyncMapping"> | Date | string | null
    createdAt?: DateTimeFilter<"SyncMapping"> | Date | string
    updatedAt?: DateTimeFilter<"SyncMapping"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    syncLogs?: SyncLogListRelationFilter
  }

  export type SyncMappingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    asanaProjectId?: SortOrder
    asanaProjectName?: SortOrder
    ofProjectName?: SortOrder
    isActive?: SortOrder
    lastSyncAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    syncLogs?: SyncLogOrderByRelationAggregateInput
  }

  export type SyncMappingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_asanaProjectId?: SyncMappingUserIdAsanaProjectIdCompoundUniqueInput
    AND?: SyncMappingWhereInput | SyncMappingWhereInput[]
    OR?: SyncMappingWhereInput[]
    NOT?: SyncMappingWhereInput | SyncMappingWhereInput[]
    userId?: StringFilter<"SyncMapping"> | string
    asanaProjectId?: StringFilter<"SyncMapping"> | string
    asanaProjectName?: StringFilter<"SyncMapping"> | string
    ofProjectName?: StringFilter<"SyncMapping"> | string
    isActive?: BoolFilter<"SyncMapping"> | boolean
    lastSyncAt?: DateTimeNullableFilter<"SyncMapping"> | Date | string | null
    createdAt?: DateTimeFilter<"SyncMapping"> | Date | string
    updatedAt?: DateTimeFilter<"SyncMapping"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    syncLogs?: SyncLogListRelationFilter
  }, "id" | "userId_asanaProjectId">

  export type SyncMappingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    asanaProjectId?: SortOrder
    asanaProjectName?: SortOrder
    ofProjectName?: SortOrder
    isActive?: SortOrder
    lastSyncAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SyncMappingCountOrderByAggregateInput
    _max?: SyncMappingMaxOrderByAggregateInput
    _min?: SyncMappingMinOrderByAggregateInput
  }

  export type SyncMappingScalarWhereWithAggregatesInput = {
    AND?: SyncMappingScalarWhereWithAggregatesInput | SyncMappingScalarWhereWithAggregatesInput[]
    OR?: SyncMappingScalarWhereWithAggregatesInput[]
    NOT?: SyncMappingScalarWhereWithAggregatesInput | SyncMappingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SyncMapping"> | string
    userId?: StringWithAggregatesFilter<"SyncMapping"> | string
    asanaProjectId?: StringWithAggregatesFilter<"SyncMapping"> | string
    asanaProjectName?: StringWithAggregatesFilter<"SyncMapping"> | string
    ofProjectName?: StringWithAggregatesFilter<"SyncMapping"> | string
    isActive?: BoolWithAggregatesFilter<"SyncMapping"> | boolean
    lastSyncAt?: DateTimeNullableWithAggregatesFilter<"SyncMapping"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SyncMapping"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SyncMapping"> | Date | string
  }

  export type SyncLogWhereInput = {
    AND?: SyncLogWhereInput | SyncLogWhereInput[]
    OR?: SyncLogWhereInput[]
    NOT?: SyncLogWhereInput | SyncLogWhereInput[]
    id?: StringFilter<"SyncLog"> | string
    userId?: StringFilter<"SyncLog"> | string
    syncMappingId?: StringFilter<"SyncLog"> | string
    direction?: EnumSyncDirectionFilter<"SyncLog"> | $Enums.SyncDirection
    status?: EnumSyncStatusFilter<"SyncLog"> | $Enums.SyncStatus
    itemssynced?: IntFilter<"SyncLog"> | number
    errorMessage?: StringNullableFilter<"SyncLog"> | string | null
    createdAt?: DateTimeFilter<"SyncLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    syncMapping?: XOR<SyncMappingRelationFilter, SyncMappingWhereInput>
  }

  export type SyncLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    syncMappingId?: SortOrder
    direction?: SortOrder
    status?: SortOrder
    itemssynced?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    syncMapping?: SyncMappingOrderByWithRelationInput
  }

  export type SyncLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SyncLogWhereInput | SyncLogWhereInput[]
    OR?: SyncLogWhereInput[]
    NOT?: SyncLogWhereInput | SyncLogWhereInput[]
    userId?: StringFilter<"SyncLog"> | string
    syncMappingId?: StringFilter<"SyncLog"> | string
    direction?: EnumSyncDirectionFilter<"SyncLog"> | $Enums.SyncDirection
    status?: EnumSyncStatusFilter<"SyncLog"> | $Enums.SyncStatus
    itemssynced?: IntFilter<"SyncLog"> | number
    errorMessage?: StringNullableFilter<"SyncLog"> | string | null
    createdAt?: DateTimeFilter<"SyncLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    syncMapping?: XOR<SyncMappingRelationFilter, SyncMappingWhereInput>
  }, "id">

  export type SyncLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    syncMappingId?: SortOrder
    direction?: SortOrder
    status?: SortOrder
    itemssynced?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SyncLogCountOrderByAggregateInput
    _avg?: SyncLogAvgOrderByAggregateInput
    _max?: SyncLogMaxOrderByAggregateInput
    _min?: SyncLogMinOrderByAggregateInput
    _sum?: SyncLogSumOrderByAggregateInput
  }

  export type SyncLogScalarWhereWithAggregatesInput = {
    AND?: SyncLogScalarWhereWithAggregatesInput | SyncLogScalarWhereWithAggregatesInput[]
    OR?: SyncLogScalarWhereWithAggregatesInput[]
    NOT?: SyncLogScalarWhereWithAggregatesInput | SyncLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SyncLog"> | string
    userId?: StringWithAggregatesFilter<"SyncLog"> | string
    syncMappingId?: StringWithAggregatesFilter<"SyncLog"> | string
    direction?: EnumSyncDirectionWithAggregatesFilter<"SyncLog"> | $Enums.SyncDirection
    status?: EnumSyncStatusWithAggregatesFilter<"SyncLog"> | $Enums.SyncStatus
    itemssynced?: IntWithAggregatesFilter<"SyncLog"> | number
    errorMessage?: StringNullableWithAggregatesFilter<"SyncLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SyncLog"> | Date | string
  }

  export type SupportTicketWhereInput = {
    AND?: SupportTicketWhereInput | SupportTicketWhereInput[]
    OR?: SupportTicketWhereInput[]
    NOT?: SupportTicketWhereInput | SupportTicketWhereInput[]
    id?: StringFilter<"SupportTicket"> | string
    userId?: StringFilter<"SupportTicket"> | string
    name?: StringFilter<"SupportTicket"> | string
    email?: StringFilter<"SupportTicket"> | string
    subject?: StringFilter<"SupportTicket"> | string
    category?: EnumSupportCategoryFilter<"SupportTicket"> | $Enums.SupportCategory
    message?: StringFilter<"SupportTicket"> | string
    priority?: EnumSupportPriorityFilter<"SupportTicket"> | $Enums.SupportPriority
    status?: EnumSupportStatusFilter<"SupportTicket"> | $Enums.SupportStatus
    createdAt?: DateTimeFilter<"SupportTicket"> | Date | string
    updatedAt?: DateTimeFilter<"SupportTicket"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    responses?: SupportTicketResponseListRelationFilter
  }

  export type SupportTicketOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    category?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    responses?: SupportTicketResponseOrderByRelationAggregateInput
  }

  export type SupportTicketWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SupportTicketWhereInput | SupportTicketWhereInput[]
    OR?: SupportTicketWhereInput[]
    NOT?: SupportTicketWhereInput | SupportTicketWhereInput[]
    userId?: StringFilter<"SupportTicket"> | string
    name?: StringFilter<"SupportTicket"> | string
    email?: StringFilter<"SupportTicket"> | string
    subject?: StringFilter<"SupportTicket"> | string
    category?: EnumSupportCategoryFilter<"SupportTicket"> | $Enums.SupportCategory
    message?: StringFilter<"SupportTicket"> | string
    priority?: EnumSupportPriorityFilter<"SupportTicket"> | $Enums.SupportPriority
    status?: EnumSupportStatusFilter<"SupportTicket"> | $Enums.SupportStatus
    createdAt?: DateTimeFilter<"SupportTicket"> | Date | string
    updatedAt?: DateTimeFilter<"SupportTicket"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    responses?: SupportTicketResponseListRelationFilter
  }, "id">

  export type SupportTicketOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    category?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SupportTicketCountOrderByAggregateInput
    _max?: SupportTicketMaxOrderByAggregateInput
    _min?: SupportTicketMinOrderByAggregateInput
  }

  export type SupportTicketScalarWhereWithAggregatesInput = {
    AND?: SupportTicketScalarWhereWithAggregatesInput | SupportTicketScalarWhereWithAggregatesInput[]
    OR?: SupportTicketScalarWhereWithAggregatesInput[]
    NOT?: SupportTicketScalarWhereWithAggregatesInput | SupportTicketScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SupportTicket"> | string
    userId?: StringWithAggregatesFilter<"SupportTicket"> | string
    name?: StringWithAggregatesFilter<"SupportTicket"> | string
    email?: StringWithAggregatesFilter<"SupportTicket"> | string
    subject?: StringWithAggregatesFilter<"SupportTicket"> | string
    category?: EnumSupportCategoryWithAggregatesFilter<"SupportTicket"> | $Enums.SupportCategory
    message?: StringWithAggregatesFilter<"SupportTicket"> | string
    priority?: EnumSupportPriorityWithAggregatesFilter<"SupportTicket"> | $Enums.SupportPriority
    status?: EnumSupportStatusWithAggregatesFilter<"SupportTicket"> | $Enums.SupportStatus
    createdAt?: DateTimeWithAggregatesFilter<"SupportTicket"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SupportTicket"> | Date | string
  }

  export type SupportTicketResponseWhereInput = {
    AND?: SupportTicketResponseWhereInput | SupportTicketResponseWhereInput[]
    OR?: SupportTicketResponseWhereInput[]
    NOT?: SupportTicketResponseWhereInput | SupportTicketResponseWhereInput[]
    id?: StringFilter<"SupportTicketResponse"> | string
    ticketId?: StringFilter<"SupportTicketResponse"> | string
    message?: StringFilter<"SupportTicketResponse"> | string
    isFromUser?: BoolFilter<"SupportTicketResponse"> | boolean
    createdAt?: DateTimeFilter<"SupportTicketResponse"> | Date | string
    ticket?: XOR<SupportTicketRelationFilter, SupportTicketWhereInput>
  }

  export type SupportTicketResponseOrderByWithRelationInput = {
    id?: SortOrder
    ticketId?: SortOrder
    message?: SortOrder
    isFromUser?: SortOrder
    createdAt?: SortOrder
    ticket?: SupportTicketOrderByWithRelationInput
  }

  export type SupportTicketResponseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SupportTicketResponseWhereInput | SupportTicketResponseWhereInput[]
    OR?: SupportTicketResponseWhereInput[]
    NOT?: SupportTicketResponseWhereInput | SupportTicketResponseWhereInput[]
    ticketId?: StringFilter<"SupportTicketResponse"> | string
    message?: StringFilter<"SupportTicketResponse"> | string
    isFromUser?: BoolFilter<"SupportTicketResponse"> | boolean
    createdAt?: DateTimeFilter<"SupportTicketResponse"> | Date | string
    ticket?: XOR<SupportTicketRelationFilter, SupportTicketWhereInput>
  }, "id">

  export type SupportTicketResponseOrderByWithAggregationInput = {
    id?: SortOrder
    ticketId?: SortOrder
    message?: SortOrder
    isFromUser?: SortOrder
    createdAt?: SortOrder
    _count?: SupportTicketResponseCountOrderByAggregateInput
    _max?: SupportTicketResponseMaxOrderByAggregateInput
    _min?: SupportTicketResponseMinOrderByAggregateInput
  }

  export type SupportTicketResponseScalarWhereWithAggregatesInput = {
    AND?: SupportTicketResponseScalarWhereWithAggregatesInput | SupportTicketResponseScalarWhereWithAggregatesInput[]
    OR?: SupportTicketResponseScalarWhereWithAggregatesInput[]
    NOT?: SupportTicketResponseScalarWhereWithAggregatesInput | SupportTicketResponseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SupportTicketResponse"> | string
    ticketId?: StringWithAggregatesFilter<"SupportTicketResponse"> | string
    message?: StringWithAggregatesFilter<"SupportTicketResponse"> | string
    isFromUser?: BoolWithAggregatesFilter<"SupportTicketResponse"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SupportTicketResponse"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asanaTokens?: AsanaTokenCreateNestedManyWithoutUserInput
    socialAccounts?: SocialAccountCreateNestedManyWithoutUserInput
    omnifocusSetup?: OmniFocusSetupCreateNestedOneWithoutUserInput
    syncMappings?: SyncMappingCreateNestedManyWithoutUserInput
    syncLogs?: SyncLogCreateNestedManyWithoutUserInput
    supportTickets?: SupportTicketCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asanaTokens?: AsanaTokenUncheckedCreateNestedManyWithoutUserInput
    socialAccounts?: SocialAccountUncheckedCreateNestedManyWithoutUserInput
    omnifocusSetup?: OmniFocusSetupUncheckedCreateNestedOneWithoutUserInput
    syncMappings?: SyncMappingUncheckedCreateNestedManyWithoutUserInput
    syncLogs?: SyncLogUncheckedCreateNestedManyWithoutUserInput
    supportTickets?: SupportTicketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asanaTokens?: AsanaTokenUpdateManyWithoutUserNestedInput
    socialAccounts?: SocialAccountUpdateManyWithoutUserNestedInput
    omnifocusSetup?: OmniFocusSetupUpdateOneWithoutUserNestedInput
    syncMappings?: SyncMappingUpdateManyWithoutUserNestedInput
    syncLogs?: SyncLogUpdateManyWithoutUserNestedInput
    supportTickets?: SupportTicketUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asanaTokens?: AsanaTokenUncheckedUpdateManyWithoutUserNestedInput
    socialAccounts?: SocialAccountUncheckedUpdateManyWithoutUserNestedInput
    omnifocusSetup?: OmniFocusSetupUncheckedUpdateOneWithoutUserNestedInput
    syncMappings?: SyncMappingUncheckedUpdateManyWithoutUserNestedInput
    syncLogs?: SyncLogUncheckedUpdateManyWithoutUserNestedInput
    supportTickets?: SupportTicketUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialAccountCreateInput = {
    id?: string
    provider: $Enums.AuthProvider
    providerId: string
    providerEmail?: string | null
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSocialAccountsInput
  }

  export type SocialAccountUncheckedCreateInput = {
    id?: string
    userId: string
    provider: $Enums.AuthProvider
    providerId: string
    providerEmail?: string | null
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SocialAccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumAuthProviderFieldUpdateOperationsInput | $Enums.AuthProvider
    providerId?: StringFieldUpdateOperationsInput | string
    providerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSocialAccountsNestedInput
  }

  export type SocialAccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    provider?: EnumAuthProviderFieldUpdateOperationsInput | $Enums.AuthProvider
    providerId?: StringFieldUpdateOperationsInput | string
    providerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialAccountCreateManyInput = {
    id?: string
    userId: string
    provider: $Enums.AuthProvider
    providerId: string
    providerEmail?: string | null
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SocialAccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumAuthProviderFieldUpdateOperationsInput | $Enums.AuthProvider
    providerId?: StringFieldUpdateOperationsInput | string
    providerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialAccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    provider?: EnumAuthProviderFieldUpdateOperationsInput | $Enums.AuthProvider
    providerId?: StringFieldUpdateOperationsInput | string
    providerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AsanaTokenCreateInput = {
    id?: string
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAsanaTokensInput
  }

  export type AsanaTokenUncheckedCreateInput = {
    id?: string
    userId: string
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AsanaTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAsanaTokensNestedInput
  }

  export type AsanaTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AsanaTokenCreateManyInput = {
    id?: string
    userId: string
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AsanaTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AsanaTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OmniFocusSetupCreateInput = {
    id?: string
    agentKey: string
    isActive?: boolean
    version?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOmnifocusSetupInput
  }

  export type OmniFocusSetupUncheckedCreateInput = {
    id?: string
    userId: string
    agentKey: string
    isActive?: boolean
    version?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OmniFocusSetupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentKey?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    version?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOmnifocusSetupNestedInput
  }

  export type OmniFocusSetupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    agentKey?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    version?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OmniFocusSetupCreateManyInput = {
    id?: string
    userId: string
    agentKey: string
    isActive?: boolean
    version?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OmniFocusSetupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentKey?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    version?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OmniFocusSetupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    agentKey?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    version?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncMappingCreateInput = {
    id?: string
    asanaProjectId: string
    asanaProjectName: string
    ofProjectName: string
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSyncMappingsInput
    syncLogs?: SyncLogCreateNestedManyWithoutSyncMappingInput
  }

  export type SyncMappingUncheckedCreateInput = {
    id?: string
    userId: string
    asanaProjectId: string
    asanaProjectName: string
    ofProjectName: string
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    syncLogs?: SyncLogUncheckedCreateNestedManyWithoutSyncMappingInput
  }

  export type SyncMappingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    asanaProjectId?: StringFieldUpdateOperationsInput | string
    asanaProjectName?: StringFieldUpdateOperationsInput | string
    ofProjectName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSyncMappingsNestedInput
    syncLogs?: SyncLogUpdateManyWithoutSyncMappingNestedInput
  }

  export type SyncMappingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    asanaProjectId?: StringFieldUpdateOperationsInput | string
    asanaProjectName?: StringFieldUpdateOperationsInput | string
    ofProjectName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncLogs?: SyncLogUncheckedUpdateManyWithoutSyncMappingNestedInput
  }

  export type SyncMappingCreateManyInput = {
    id?: string
    userId: string
    asanaProjectId: string
    asanaProjectName: string
    ofProjectName: string
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SyncMappingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    asanaProjectId?: StringFieldUpdateOperationsInput | string
    asanaProjectName?: StringFieldUpdateOperationsInput | string
    ofProjectName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncMappingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    asanaProjectId?: StringFieldUpdateOperationsInput | string
    asanaProjectName?: StringFieldUpdateOperationsInput | string
    ofProjectName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncLogCreateInput = {
    id?: string
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    itemssynced?: number
    errorMessage?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSyncLogsInput
    syncMapping: SyncMappingCreateNestedOneWithoutSyncLogsInput
  }

  export type SyncLogUncheckedCreateInput = {
    id?: string
    userId: string
    syncMappingId: string
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    itemssynced?: number
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type SyncLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    itemssynced?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSyncLogsNestedInput
    syncMapping?: SyncMappingUpdateOneRequiredWithoutSyncLogsNestedInput
  }

  export type SyncLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    syncMappingId?: StringFieldUpdateOperationsInput | string
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    itemssynced?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncLogCreateManyInput = {
    id?: string
    userId: string
    syncMappingId: string
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    itemssynced?: number
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type SyncLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    itemssynced?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    syncMappingId?: StringFieldUpdateOperationsInput | string
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    itemssynced?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupportTicketCreateInput = {
    id?: string
    name: string
    email: string
    subject: string
    category: $Enums.SupportCategory
    message: string
    priority?: $Enums.SupportPriority
    status?: $Enums.SupportStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSupportTicketsInput
    responses?: SupportTicketResponseCreateNestedManyWithoutTicketInput
  }

  export type SupportTicketUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    email: string
    subject: string
    category: $Enums.SupportCategory
    message: string
    priority?: $Enums.SupportPriority
    status?: $Enums.SupportStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    responses?: SupportTicketResponseUncheckedCreateNestedManyWithoutTicketInput
  }

  export type SupportTicketUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumSupportCategoryFieldUpdateOperationsInput | $Enums.SupportCategory
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumSupportPriorityFieldUpdateOperationsInput | $Enums.SupportPriority
    status?: EnumSupportStatusFieldUpdateOperationsInput | $Enums.SupportStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSupportTicketsNestedInput
    responses?: SupportTicketResponseUpdateManyWithoutTicketNestedInput
  }

  export type SupportTicketUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumSupportCategoryFieldUpdateOperationsInput | $Enums.SupportCategory
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumSupportPriorityFieldUpdateOperationsInput | $Enums.SupportPriority
    status?: EnumSupportStatusFieldUpdateOperationsInput | $Enums.SupportStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responses?: SupportTicketResponseUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type SupportTicketCreateManyInput = {
    id?: string
    userId: string
    name: string
    email: string
    subject: string
    category: $Enums.SupportCategory
    message: string
    priority?: $Enums.SupportPriority
    status?: $Enums.SupportStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SupportTicketUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumSupportCategoryFieldUpdateOperationsInput | $Enums.SupportCategory
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumSupportPriorityFieldUpdateOperationsInput | $Enums.SupportPriority
    status?: EnumSupportStatusFieldUpdateOperationsInput | $Enums.SupportStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupportTicketUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumSupportCategoryFieldUpdateOperationsInput | $Enums.SupportCategory
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumSupportPriorityFieldUpdateOperationsInput | $Enums.SupportPriority
    status?: EnumSupportStatusFieldUpdateOperationsInput | $Enums.SupportStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupportTicketResponseCreateInput = {
    id?: string
    message: string
    isFromUser?: boolean
    createdAt?: Date | string
    ticket: SupportTicketCreateNestedOneWithoutResponsesInput
  }

  export type SupportTicketResponseUncheckedCreateInput = {
    id?: string
    ticketId: string
    message: string
    isFromUser?: boolean
    createdAt?: Date | string
  }

  export type SupportTicketResponseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isFromUser?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: SupportTicketUpdateOneRequiredWithoutResponsesNestedInput
  }

  export type SupportTicketResponseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ticketId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isFromUser?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupportTicketResponseCreateManyInput = {
    id?: string
    ticketId: string
    message: string
    isFromUser?: boolean
    createdAt?: Date | string
  }

  export type SupportTicketResponseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isFromUser?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupportTicketResponseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ticketId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isFromUser?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.UserPlan | EnumUserPlanFieldRefInput<$PrismaModel>
    in?: $Enums.UserPlan[] | ListEnumUserPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserPlan[] | ListEnumUserPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumUserPlanFilter<$PrismaModel> | $Enums.UserPlan
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumSignupMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.SignupMethod | EnumSignupMethodFieldRefInput<$PrismaModel>
    in?: $Enums.SignupMethod[] | ListEnumSignupMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignupMethod[] | ListEnumSignupMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumSignupMethodFilter<$PrismaModel> | $Enums.SignupMethod
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AsanaTokenListRelationFilter = {
    every?: AsanaTokenWhereInput
    some?: AsanaTokenWhereInput
    none?: AsanaTokenWhereInput
  }

  export type SocialAccountListRelationFilter = {
    every?: SocialAccountWhereInput
    some?: SocialAccountWhereInput
    none?: SocialAccountWhereInput
  }

  export type OmniFocusSetupNullableRelationFilter = {
    is?: OmniFocusSetupWhereInput | null
    isNot?: OmniFocusSetupWhereInput | null
  }

  export type SyncMappingListRelationFilter = {
    every?: SyncMappingWhereInput
    some?: SyncMappingWhereInput
    none?: SyncMappingWhereInput
  }

  export type SyncLogListRelationFilter = {
    every?: SyncLogWhereInput
    some?: SyncLogWhereInput
    none?: SyncLogWhereInput
  }

  export type SupportTicketListRelationFilter = {
    every?: SupportTicketWhereInput
    some?: SupportTicketWhereInput
    none?: SupportTicketWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AsanaTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SocialAccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SyncMappingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SyncLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SupportTicketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    plan?: SortOrder
    isAdmin?: SortOrder
    monthlyTasksUsed?: SortOrder
    lastUsageReset?: SortOrder
    emailVerified?: SortOrder
    signupMethod?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    monthlyTasksUsed?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    plan?: SortOrder
    isAdmin?: SortOrder
    monthlyTasksUsed?: SortOrder
    lastUsageReset?: SortOrder
    emailVerified?: SortOrder
    signupMethod?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    plan?: SortOrder
    isAdmin?: SortOrder
    monthlyTasksUsed?: SortOrder
    lastUsageReset?: SortOrder
    emailVerified?: SortOrder
    signupMethod?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    monthlyTasksUsed?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserPlan | EnumUserPlanFieldRefInput<$PrismaModel>
    in?: $Enums.UserPlan[] | ListEnumUserPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserPlan[] | ListEnumUserPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumUserPlanWithAggregatesFilter<$PrismaModel> | $Enums.UserPlan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserPlanFilter<$PrismaModel>
    _max?: NestedEnumUserPlanFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumSignupMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SignupMethod | EnumSignupMethodFieldRefInput<$PrismaModel>
    in?: $Enums.SignupMethod[] | ListEnumSignupMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignupMethod[] | ListEnumSignupMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumSignupMethodWithAggregatesFilter<$PrismaModel> | $Enums.SignupMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSignupMethodFilter<$PrismaModel>
    _max?: NestedEnumSignupMethodFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumAuthProviderFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthProvider | EnumAuthProviderFieldRefInput<$PrismaModel>
    in?: $Enums.AuthProvider[] | ListEnumAuthProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthProvider[] | ListEnumAuthProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthProviderFilter<$PrismaModel> | $Enums.AuthProvider
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SocialAccountProviderProviderIdCompoundUniqueInput = {
    provider: $Enums.AuthProvider
    providerId: string
  }

  export type SocialAccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    providerEmail?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SocialAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    providerEmail?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SocialAccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    providerEmail?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAuthProviderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthProvider | EnumAuthProviderFieldRefInput<$PrismaModel>
    in?: $Enums.AuthProvider[] | ListEnumAuthProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthProvider[] | ListEnumAuthProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthProviderWithAggregatesFilter<$PrismaModel> | $Enums.AuthProvider
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthProviderFilter<$PrismaModel>
    _max?: NestedEnumAuthProviderFilter<$PrismaModel>
  }

  export type AsanaTokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AsanaTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AsanaTokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OmniFocusSetupCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    agentKey?: SortOrder
    isActive?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OmniFocusSetupMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    agentKey?: SortOrder
    isActive?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OmniFocusSetupMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    agentKey?: SortOrder
    isActive?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SyncMappingUserIdAsanaProjectIdCompoundUniqueInput = {
    userId: string
    asanaProjectId: string
  }

  export type SyncMappingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    asanaProjectId?: SortOrder
    asanaProjectName?: SortOrder
    ofProjectName?: SortOrder
    isActive?: SortOrder
    lastSyncAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SyncMappingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    asanaProjectId?: SortOrder
    asanaProjectName?: SortOrder
    ofProjectName?: SortOrder
    isActive?: SortOrder
    lastSyncAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SyncMappingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    asanaProjectId?: SortOrder
    asanaProjectName?: SortOrder
    ofProjectName?: SortOrder
    isActive?: SortOrder
    lastSyncAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSyncDirectionFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncDirection | EnumSyncDirectionFieldRefInput<$PrismaModel>
    in?: $Enums.SyncDirection[] | ListEnumSyncDirectionFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncDirection[] | ListEnumSyncDirectionFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncDirectionFilter<$PrismaModel> | $Enums.SyncDirection
  }

  export type EnumSyncStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncStatus | EnumSyncStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncStatusFilter<$PrismaModel> | $Enums.SyncStatus
  }

  export type SyncMappingRelationFilter = {
    is?: SyncMappingWhereInput
    isNot?: SyncMappingWhereInput
  }

  export type SyncLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    syncMappingId?: SortOrder
    direction?: SortOrder
    status?: SortOrder
    itemssynced?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type SyncLogAvgOrderByAggregateInput = {
    itemssynced?: SortOrder
  }

  export type SyncLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    syncMappingId?: SortOrder
    direction?: SortOrder
    status?: SortOrder
    itemssynced?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type SyncLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    syncMappingId?: SortOrder
    direction?: SortOrder
    status?: SortOrder
    itemssynced?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type SyncLogSumOrderByAggregateInput = {
    itemssynced?: SortOrder
  }

  export type EnumSyncDirectionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncDirection | EnumSyncDirectionFieldRefInput<$PrismaModel>
    in?: $Enums.SyncDirection[] | ListEnumSyncDirectionFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncDirection[] | ListEnumSyncDirectionFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncDirectionWithAggregatesFilter<$PrismaModel> | $Enums.SyncDirection
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncDirectionFilter<$PrismaModel>
    _max?: NestedEnumSyncDirectionFilter<$PrismaModel>
  }

  export type EnumSyncStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncStatus | EnumSyncStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncStatusWithAggregatesFilter<$PrismaModel> | $Enums.SyncStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncStatusFilter<$PrismaModel>
    _max?: NestedEnumSyncStatusFilter<$PrismaModel>
  }

  export type EnumSupportCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.SupportCategory | EnumSupportCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.SupportCategory[] | ListEnumSupportCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.SupportCategory[] | ListEnumSupportCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumSupportCategoryFilter<$PrismaModel> | $Enums.SupportCategory
  }

  export type EnumSupportPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.SupportPriority | EnumSupportPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.SupportPriority[] | ListEnumSupportPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.SupportPriority[] | ListEnumSupportPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumSupportPriorityFilter<$PrismaModel> | $Enums.SupportPriority
  }

  export type EnumSupportStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SupportStatus | EnumSupportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SupportStatus[] | ListEnumSupportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SupportStatus[] | ListEnumSupportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSupportStatusFilter<$PrismaModel> | $Enums.SupportStatus
  }

  export type SupportTicketResponseListRelationFilter = {
    every?: SupportTicketResponseWhereInput
    some?: SupportTicketResponseWhereInput
    none?: SupportTicketResponseWhereInput
  }

  export type SupportTicketResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SupportTicketCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    category?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SupportTicketMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    category?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SupportTicketMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    category?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSupportCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SupportCategory | EnumSupportCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.SupportCategory[] | ListEnumSupportCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.SupportCategory[] | ListEnumSupportCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumSupportCategoryWithAggregatesFilter<$PrismaModel> | $Enums.SupportCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSupportCategoryFilter<$PrismaModel>
    _max?: NestedEnumSupportCategoryFilter<$PrismaModel>
  }

  export type EnumSupportPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SupportPriority | EnumSupportPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.SupportPriority[] | ListEnumSupportPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.SupportPriority[] | ListEnumSupportPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumSupportPriorityWithAggregatesFilter<$PrismaModel> | $Enums.SupportPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSupportPriorityFilter<$PrismaModel>
    _max?: NestedEnumSupportPriorityFilter<$PrismaModel>
  }

  export type EnumSupportStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SupportStatus | EnumSupportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SupportStatus[] | ListEnumSupportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SupportStatus[] | ListEnumSupportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSupportStatusWithAggregatesFilter<$PrismaModel> | $Enums.SupportStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSupportStatusFilter<$PrismaModel>
    _max?: NestedEnumSupportStatusFilter<$PrismaModel>
  }

  export type SupportTicketRelationFilter = {
    is?: SupportTicketWhereInput
    isNot?: SupportTicketWhereInput
  }

  export type SupportTicketResponseCountOrderByAggregateInput = {
    id?: SortOrder
    ticketId?: SortOrder
    message?: SortOrder
    isFromUser?: SortOrder
    createdAt?: SortOrder
  }

  export type SupportTicketResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    ticketId?: SortOrder
    message?: SortOrder
    isFromUser?: SortOrder
    createdAt?: SortOrder
  }

  export type SupportTicketResponseMinOrderByAggregateInput = {
    id?: SortOrder
    ticketId?: SortOrder
    message?: SortOrder
    isFromUser?: SortOrder
    createdAt?: SortOrder
  }

  export type AsanaTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<AsanaTokenCreateWithoutUserInput, AsanaTokenUncheckedCreateWithoutUserInput> | AsanaTokenCreateWithoutUserInput[] | AsanaTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AsanaTokenCreateOrConnectWithoutUserInput | AsanaTokenCreateOrConnectWithoutUserInput[]
    createMany?: AsanaTokenCreateManyUserInputEnvelope
    connect?: AsanaTokenWhereUniqueInput | AsanaTokenWhereUniqueInput[]
  }

  export type SocialAccountCreateNestedManyWithoutUserInput = {
    create?: XOR<SocialAccountCreateWithoutUserInput, SocialAccountUncheckedCreateWithoutUserInput> | SocialAccountCreateWithoutUserInput[] | SocialAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SocialAccountCreateOrConnectWithoutUserInput | SocialAccountCreateOrConnectWithoutUserInput[]
    createMany?: SocialAccountCreateManyUserInputEnvelope
    connect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
  }

  export type OmniFocusSetupCreateNestedOneWithoutUserInput = {
    create?: XOR<OmniFocusSetupCreateWithoutUserInput, OmniFocusSetupUncheckedCreateWithoutUserInput>
    connectOrCreate?: OmniFocusSetupCreateOrConnectWithoutUserInput
    connect?: OmniFocusSetupWhereUniqueInput
  }

  export type SyncMappingCreateNestedManyWithoutUserInput = {
    create?: XOR<SyncMappingCreateWithoutUserInput, SyncMappingUncheckedCreateWithoutUserInput> | SyncMappingCreateWithoutUserInput[] | SyncMappingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SyncMappingCreateOrConnectWithoutUserInput | SyncMappingCreateOrConnectWithoutUserInput[]
    createMany?: SyncMappingCreateManyUserInputEnvelope
    connect?: SyncMappingWhereUniqueInput | SyncMappingWhereUniqueInput[]
  }

  export type SyncLogCreateNestedManyWithoutUserInput = {
    create?: XOR<SyncLogCreateWithoutUserInput, SyncLogUncheckedCreateWithoutUserInput> | SyncLogCreateWithoutUserInput[] | SyncLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SyncLogCreateOrConnectWithoutUserInput | SyncLogCreateOrConnectWithoutUserInput[]
    createMany?: SyncLogCreateManyUserInputEnvelope
    connect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
  }

  export type SupportTicketCreateNestedManyWithoutUserInput = {
    create?: XOR<SupportTicketCreateWithoutUserInput, SupportTicketUncheckedCreateWithoutUserInput> | SupportTicketCreateWithoutUserInput[] | SupportTicketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SupportTicketCreateOrConnectWithoutUserInput | SupportTicketCreateOrConnectWithoutUserInput[]
    createMany?: SupportTicketCreateManyUserInputEnvelope
    connect?: SupportTicketWhereUniqueInput | SupportTicketWhereUniqueInput[]
  }

  export type AsanaTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AsanaTokenCreateWithoutUserInput, AsanaTokenUncheckedCreateWithoutUserInput> | AsanaTokenCreateWithoutUserInput[] | AsanaTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AsanaTokenCreateOrConnectWithoutUserInput | AsanaTokenCreateOrConnectWithoutUserInput[]
    createMany?: AsanaTokenCreateManyUserInputEnvelope
    connect?: AsanaTokenWhereUniqueInput | AsanaTokenWhereUniqueInput[]
  }

  export type SocialAccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SocialAccountCreateWithoutUserInput, SocialAccountUncheckedCreateWithoutUserInput> | SocialAccountCreateWithoutUserInput[] | SocialAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SocialAccountCreateOrConnectWithoutUserInput | SocialAccountCreateOrConnectWithoutUserInput[]
    createMany?: SocialAccountCreateManyUserInputEnvelope
    connect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
  }

  export type OmniFocusSetupUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<OmniFocusSetupCreateWithoutUserInput, OmniFocusSetupUncheckedCreateWithoutUserInput>
    connectOrCreate?: OmniFocusSetupCreateOrConnectWithoutUserInput
    connect?: OmniFocusSetupWhereUniqueInput
  }

  export type SyncMappingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SyncMappingCreateWithoutUserInput, SyncMappingUncheckedCreateWithoutUserInput> | SyncMappingCreateWithoutUserInput[] | SyncMappingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SyncMappingCreateOrConnectWithoutUserInput | SyncMappingCreateOrConnectWithoutUserInput[]
    createMany?: SyncMappingCreateManyUserInputEnvelope
    connect?: SyncMappingWhereUniqueInput | SyncMappingWhereUniqueInput[]
  }

  export type SyncLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SyncLogCreateWithoutUserInput, SyncLogUncheckedCreateWithoutUserInput> | SyncLogCreateWithoutUserInput[] | SyncLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SyncLogCreateOrConnectWithoutUserInput | SyncLogCreateOrConnectWithoutUserInput[]
    createMany?: SyncLogCreateManyUserInputEnvelope
    connect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
  }

  export type SupportTicketUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SupportTicketCreateWithoutUserInput, SupportTicketUncheckedCreateWithoutUserInput> | SupportTicketCreateWithoutUserInput[] | SupportTicketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SupportTicketCreateOrConnectWithoutUserInput | SupportTicketCreateOrConnectWithoutUserInput[]
    createMany?: SupportTicketCreateManyUserInputEnvelope
    connect?: SupportTicketWhereUniqueInput | SupportTicketWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserPlanFieldUpdateOperationsInput = {
    set?: $Enums.UserPlan
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumSignupMethodFieldUpdateOperationsInput = {
    set?: $Enums.SignupMethod
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AsanaTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<AsanaTokenCreateWithoutUserInput, AsanaTokenUncheckedCreateWithoutUserInput> | AsanaTokenCreateWithoutUserInput[] | AsanaTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AsanaTokenCreateOrConnectWithoutUserInput | AsanaTokenCreateOrConnectWithoutUserInput[]
    upsert?: AsanaTokenUpsertWithWhereUniqueWithoutUserInput | AsanaTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AsanaTokenCreateManyUserInputEnvelope
    set?: AsanaTokenWhereUniqueInput | AsanaTokenWhereUniqueInput[]
    disconnect?: AsanaTokenWhereUniqueInput | AsanaTokenWhereUniqueInput[]
    delete?: AsanaTokenWhereUniqueInput | AsanaTokenWhereUniqueInput[]
    connect?: AsanaTokenWhereUniqueInput | AsanaTokenWhereUniqueInput[]
    update?: AsanaTokenUpdateWithWhereUniqueWithoutUserInput | AsanaTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AsanaTokenUpdateManyWithWhereWithoutUserInput | AsanaTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AsanaTokenScalarWhereInput | AsanaTokenScalarWhereInput[]
  }

  export type SocialAccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<SocialAccountCreateWithoutUserInput, SocialAccountUncheckedCreateWithoutUserInput> | SocialAccountCreateWithoutUserInput[] | SocialAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SocialAccountCreateOrConnectWithoutUserInput | SocialAccountCreateOrConnectWithoutUserInput[]
    upsert?: SocialAccountUpsertWithWhereUniqueWithoutUserInput | SocialAccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SocialAccountCreateManyUserInputEnvelope
    set?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    disconnect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    delete?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    connect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    update?: SocialAccountUpdateWithWhereUniqueWithoutUserInput | SocialAccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SocialAccountUpdateManyWithWhereWithoutUserInput | SocialAccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SocialAccountScalarWhereInput | SocialAccountScalarWhereInput[]
  }

  export type OmniFocusSetupUpdateOneWithoutUserNestedInput = {
    create?: XOR<OmniFocusSetupCreateWithoutUserInput, OmniFocusSetupUncheckedCreateWithoutUserInput>
    connectOrCreate?: OmniFocusSetupCreateOrConnectWithoutUserInput
    upsert?: OmniFocusSetupUpsertWithoutUserInput
    disconnect?: OmniFocusSetupWhereInput | boolean
    delete?: OmniFocusSetupWhereInput | boolean
    connect?: OmniFocusSetupWhereUniqueInput
    update?: XOR<XOR<OmniFocusSetupUpdateToOneWithWhereWithoutUserInput, OmniFocusSetupUpdateWithoutUserInput>, OmniFocusSetupUncheckedUpdateWithoutUserInput>
  }

  export type SyncMappingUpdateManyWithoutUserNestedInput = {
    create?: XOR<SyncMappingCreateWithoutUserInput, SyncMappingUncheckedCreateWithoutUserInput> | SyncMappingCreateWithoutUserInput[] | SyncMappingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SyncMappingCreateOrConnectWithoutUserInput | SyncMappingCreateOrConnectWithoutUserInput[]
    upsert?: SyncMappingUpsertWithWhereUniqueWithoutUserInput | SyncMappingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SyncMappingCreateManyUserInputEnvelope
    set?: SyncMappingWhereUniqueInput | SyncMappingWhereUniqueInput[]
    disconnect?: SyncMappingWhereUniqueInput | SyncMappingWhereUniqueInput[]
    delete?: SyncMappingWhereUniqueInput | SyncMappingWhereUniqueInput[]
    connect?: SyncMappingWhereUniqueInput | SyncMappingWhereUniqueInput[]
    update?: SyncMappingUpdateWithWhereUniqueWithoutUserInput | SyncMappingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SyncMappingUpdateManyWithWhereWithoutUserInput | SyncMappingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SyncMappingScalarWhereInput | SyncMappingScalarWhereInput[]
  }

  export type SyncLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<SyncLogCreateWithoutUserInput, SyncLogUncheckedCreateWithoutUserInput> | SyncLogCreateWithoutUserInput[] | SyncLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SyncLogCreateOrConnectWithoutUserInput | SyncLogCreateOrConnectWithoutUserInput[]
    upsert?: SyncLogUpsertWithWhereUniqueWithoutUserInput | SyncLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SyncLogCreateManyUserInputEnvelope
    set?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    disconnect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    delete?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    connect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    update?: SyncLogUpdateWithWhereUniqueWithoutUserInput | SyncLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SyncLogUpdateManyWithWhereWithoutUserInput | SyncLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SyncLogScalarWhereInput | SyncLogScalarWhereInput[]
  }

  export type SupportTicketUpdateManyWithoutUserNestedInput = {
    create?: XOR<SupportTicketCreateWithoutUserInput, SupportTicketUncheckedCreateWithoutUserInput> | SupportTicketCreateWithoutUserInput[] | SupportTicketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SupportTicketCreateOrConnectWithoutUserInput | SupportTicketCreateOrConnectWithoutUserInput[]
    upsert?: SupportTicketUpsertWithWhereUniqueWithoutUserInput | SupportTicketUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SupportTicketCreateManyUserInputEnvelope
    set?: SupportTicketWhereUniqueInput | SupportTicketWhereUniqueInput[]
    disconnect?: SupportTicketWhereUniqueInput | SupportTicketWhereUniqueInput[]
    delete?: SupportTicketWhereUniqueInput | SupportTicketWhereUniqueInput[]
    connect?: SupportTicketWhereUniqueInput | SupportTicketWhereUniqueInput[]
    update?: SupportTicketUpdateWithWhereUniqueWithoutUserInput | SupportTicketUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SupportTicketUpdateManyWithWhereWithoutUserInput | SupportTicketUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SupportTicketScalarWhereInput | SupportTicketScalarWhereInput[]
  }

  export type AsanaTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AsanaTokenCreateWithoutUserInput, AsanaTokenUncheckedCreateWithoutUserInput> | AsanaTokenCreateWithoutUserInput[] | AsanaTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AsanaTokenCreateOrConnectWithoutUserInput | AsanaTokenCreateOrConnectWithoutUserInput[]
    upsert?: AsanaTokenUpsertWithWhereUniqueWithoutUserInput | AsanaTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AsanaTokenCreateManyUserInputEnvelope
    set?: AsanaTokenWhereUniqueInput | AsanaTokenWhereUniqueInput[]
    disconnect?: AsanaTokenWhereUniqueInput | AsanaTokenWhereUniqueInput[]
    delete?: AsanaTokenWhereUniqueInput | AsanaTokenWhereUniqueInput[]
    connect?: AsanaTokenWhereUniqueInput | AsanaTokenWhereUniqueInput[]
    update?: AsanaTokenUpdateWithWhereUniqueWithoutUserInput | AsanaTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AsanaTokenUpdateManyWithWhereWithoutUserInput | AsanaTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AsanaTokenScalarWhereInput | AsanaTokenScalarWhereInput[]
  }

  export type SocialAccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SocialAccountCreateWithoutUserInput, SocialAccountUncheckedCreateWithoutUserInput> | SocialAccountCreateWithoutUserInput[] | SocialAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SocialAccountCreateOrConnectWithoutUserInput | SocialAccountCreateOrConnectWithoutUserInput[]
    upsert?: SocialAccountUpsertWithWhereUniqueWithoutUserInput | SocialAccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SocialAccountCreateManyUserInputEnvelope
    set?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    disconnect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    delete?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    connect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    update?: SocialAccountUpdateWithWhereUniqueWithoutUserInput | SocialAccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SocialAccountUpdateManyWithWhereWithoutUserInput | SocialAccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SocialAccountScalarWhereInput | SocialAccountScalarWhereInput[]
  }

  export type OmniFocusSetupUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<OmniFocusSetupCreateWithoutUserInput, OmniFocusSetupUncheckedCreateWithoutUserInput>
    connectOrCreate?: OmniFocusSetupCreateOrConnectWithoutUserInput
    upsert?: OmniFocusSetupUpsertWithoutUserInput
    disconnect?: OmniFocusSetupWhereInput | boolean
    delete?: OmniFocusSetupWhereInput | boolean
    connect?: OmniFocusSetupWhereUniqueInput
    update?: XOR<XOR<OmniFocusSetupUpdateToOneWithWhereWithoutUserInput, OmniFocusSetupUpdateWithoutUserInput>, OmniFocusSetupUncheckedUpdateWithoutUserInput>
  }

  export type SyncMappingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SyncMappingCreateWithoutUserInput, SyncMappingUncheckedCreateWithoutUserInput> | SyncMappingCreateWithoutUserInput[] | SyncMappingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SyncMappingCreateOrConnectWithoutUserInput | SyncMappingCreateOrConnectWithoutUserInput[]
    upsert?: SyncMappingUpsertWithWhereUniqueWithoutUserInput | SyncMappingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SyncMappingCreateManyUserInputEnvelope
    set?: SyncMappingWhereUniqueInput | SyncMappingWhereUniqueInput[]
    disconnect?: SyncMappingWhereUniqueInput | SyncMappingWhereUniqueInput[]
    delete?: SyncMappingWhereUniqueInput | SyncMappingWhereUniqueInput[]
    connect?: SyncMappingWhereUniqueInput | SyncMappingWhereUniqueInput[]
    update?: SyncMappingUpdateWithWhereUniqueWithoutUserInput | SyncMappingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SyncMappingUpdateManyWithWhereWithoutUserInput | SyncMappingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SyncMappingScalarWhereInput | SyncMappingScalarWhereInput[]
  }

  export type SyncLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SyncLogCreateWithoutUserInput, SyncLogUncheckedCreateWithoutUserInput> | SyncLogCreateWithoutUserInput[] | SyncLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SyncLogCreateOrConnectWithoutUserInput | SyncLogCreateOrConnectWithoutUserInput[]
    upsert?: SyncLogUpsertWithWhereUniqueWithoutUserInput | SyncLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SyncLogCreateManyUserInputEnvelope
    set?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    disconnect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    delete?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    connect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    update?: SyncLogUpdateWithWhereUniqueWithoutUserInput | SyncLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SyncLogUpdateManyWithWhereWithoutUserInput | SyncLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SyncLogScalarWhereInput | SyncLogScalarWhereInput[]
  }

  export type SupportTicketUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SupportTicketCreateWithoutUserInput, SupportTicketUncheckedCreateWithoutUserInput> | SupportTicketCreateWithoutUserInput[] | SupportTicketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SupportTicketCreateOrConnectWithoutUserInput | SupportTicketCreateOrConnectWithoutUserInput[]
    upsert?: SupportTicketUpsertWithWhereUniqueWithoutUserInput | SupportTicketUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SupportTicketCreateManyUserInputEnvelope
    set?: SupportTicketWhereUniqueInput | SupportTicketWhereUniqueInput[]
    disconnect?: SupportTicketWhereUniqueInput | SupportTicketWhereUniqueInput[]
    delete?: SupportTicketWhereUniqueInput | SupportTicketWhereUniqueInput[]
    connect?: SupportTicketWhereUniqueInput | SupportTicketWhereUniqueInput[]
    update?: SupportTicketUpdateWithWhereUniqueWithoutUserInput | SupportTicketUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SupportTicketUpdateManyWithWhereWithoutUserInput | SupportTicketUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SupportTicketScalarWhereInput | SupportTicketScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSocialAccountsInput = {
    create?: XOR<UserCreateWithoutSocialAccountsInput, UserUncheckedCreateWithoutSocialAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSocialAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAuthProviderFieldUpdateOperationsInput = {
    set?: $Enums.AuthProvider
  }

  export type UserUpdateOneRequiredWithoutSocialAccountsNestedInput = {
    create?: XOR<UserCreateWithoutSocialAccountsInput, UserUncheckedCreateWithoutSocialAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSocialAccountsInput
    upsert?: UserUpsertWithoutSocialAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSocialAccountsInput, UserUpdateWithoutSocialAccountsInput>, UserUncheckedUpdateWithoutSocialAccountsInput>
  }

  export type UserCreateNestedOneWithoutAsanaTokensInput = {
    create?: XOR<UserCreateWithoutAsanaTokensInput, UserUncheckedCreateWithoutAsanaTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutAsanaTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAsanaTokensNestedInput = {
    create?: XOR<UserCreateWithoutAsanaTokensInput, UserUncheckedCreateWithoutAsanaTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutAsanaTokensInput
    upsert?: UserUpsertWithoutAsanaTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAsanaTokensInput, UserUpdateWithoutAsanaTokensInput>, UserUncheckedUpdateWithoutAsanaTokensInput>
  }

  export type UserCreateNestedOneWithoutOmnifocusSetupInput = {
    create?: XOR<UserCreateWithoutOmnifocusSetupInput, UserUncheckedCreateWithoutOmnifocusSetupInput>
    connectOrCreate?: UserCreateOrConnectWithoutOmnifocusSetupInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutOmnifocusSetupNestedInput = {
    create?: XOR<UserCreateWithoutOmnifocusSetupInput, UserUncheckedCreateWithoutOmnifocusSetupInput>
    connectOrCreate?: UserCreateOrConnectWithoutOmnifocusSetupInput
    upsert?: UserUpsertWithoutOmnifocusSetupInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOmnifocusSetupInput, UserUpdateWithoutOmnifocusSetupInput>, UserUncheckedUpdateWithoutOmnifocusSetupInput>
  }

  export type UserCreateNestedOneWithoutSyncMappingsInput = {
    create?: XOR<UserCreateWithoutSyncMappingsInput, UserUncheckedCreateWithoutSyncMappingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSyncMappingsInput
    connect?: UserWhereUniqueInput
  }

  export type SyncLogCreateNestedManyWithoutSyncMappingInput = {
    create?: XOR<SyncLogCreateWithoutSyncMappingInput, SyncLogUncheckedCreateWithoutSyncMappingInput> | SyncLogCreateWithoutSyncMappingInput[] | SyncLogUncheckedCreateWithoutSyncMappingInput[]
    connectOrCreate?: SyncLogCreateOrConnectWithoutSyncMappingInput | SyncLogCreateOrConnectWithoutSyncMappingInput[]
    createMany?: SyncLogCreateManySyncMappingInputEnvelope
    connect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
  }

  export type SyncLogUncheckedCreateNestedManyWithoutSyncMappingInput = {
    create?: XOR<SyncLogCreateWithoutSyncMappingInput, SyncLogUncheckedCreateWithoutSyncMappingInput> | SyncLogCreateWithoutSyncMappingInput[] | SyncLogUncheckedCreateWithoutSyncMappingInput[]
    connectOrCreate?: SyncLogCreateOrConnectWithoutSyncMappingInput | SyncLogCreateOrConnectWithoutSyncMappingInput[]
    createMany?: SyncLogCreateManySyncMappingInputEnvelope
    connect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSyncMappingsNestedInput = {
    create?: XOR<UserCreateWithoutSyncMappingsInput, UserUncheckedCreateWithoutSyncMappingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSyncMappingsInput
    upsert?: UserUpsertWithoutSyncMappingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSyncMappingsInput, UserUpdateWithoutSyncMappingsInput>, UserUncheckedUpdateWithoutSyncMappingsInput>
  }

  export type SyncLogUpdateManyWithoutSyncMappingNestedInput = {
    create?: XOR<SyncLogCreateWithoutSyncMappingInput, SyncLogUncheckedCreateWithoutSyncMappingInput> | SyncLogCreateWithoutSyncMappingInput[] | SyncLogUncheckedCreateWithoutSyncMappingInput[]
    connectOrCreate?: SyncLogCreateOrConnectWithoutSyncMappingInput | SyncLogCreateOrConnectWithoutSyncMappingInput[]
    upsert?: SyncLogUpsertWithWhereUniqueWithoutSyncMappingInput | SyncLogUpsertWithWhereUniqueWithoutSyncMappingInput[]
    createMany?: SyncLogCreateManySyncMappingInputEnvelope
    set?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    disconnect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    delete?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    connect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    update?: SyncLogUpdateWithWhereUniqueWithoutSyncMappingInput | SyncLogUpdateWithWhereUniqueWithoutSyncMappingInput[]
    updateMany?: SyncLogUpdateManyWithWhereWithoutSyncMappingInput | SyncLogUpdateManyWithWhereWithoutSyncMappingInput[]
    deleteMany?: SyncLogScalarWhereInput | SyncLogScalarWhereInput[]
  }

  export type SyncLogUncheckedUpdateManyWithoutSyncMappingNestedInput = {
    create?: XOR<SyncLogCreateWithoutSyncMappingInput, SyncLogUncheckedCreateWithoutSyncMappingInput> | SyncLogCreateWithoutSyncMappingInput[] | SyncLogUncheckedCreateWithoutSyncMappingInput[]
    connectOrCreate?: SyncLogCreateOrConnectWithoutSyncMappingInput | SyncLogCreateOrConnectWithoutSyncMappingInput[]
    upsert?: SyncLogUpsertWithWhereUniqueWithoutSyncMappingInput | SyncLogUpsertWithWhereUniqueWithoutSyncMappingInput[]
    createMany?: SyncLogCreateManySyncMappingInputEnvelope
    set?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    disconnect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    delete?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    connect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    update?: SyncLogUpdateWithWhereUniqueWithoutSyncMappingInput | SyncLogUpdateWithWhereUniqueWithoutSyncMappingInput[]
    updateMany?: SyncLogUpdateManyWithWhereWithoutSyncMappingInput | SyncLogUpdateManyWithWhereWithoutSyncMappingInput[]
    deleteMany?: SyncLogScalarWhereInput | SyncLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSyncLogsInput = {
    create?: XOR<UserCreateWithoutSyncLogsInput, UserUncheckedCreateWithoutSyncLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSyncLogsInput
    connect?: UserWhereUniqueInput
  }

  export type SyncMappingCreateNestedOneWithoutSyncLogsInput = {
    create?: XOR<SyncMappingCreateWithoutSyncLogsInput, SyncMappingUncheckedCreateWithoutSyncLogsInput>
    connectOrCreate?: SyncMappingCreateOrConnectWithoutSyncLogsInput
    connect?: SyncMappingWhereUniqueInput
  }

  export type EnumSyncDirectionFieldUpdateOperationsInput = {
    set?: $Enums.SyncDirection
  }

  export type EnumSyncStatusFieldUpdateOperationsInput = {
    set?: $Enums.SyncStatus
  }

  export type UserUpdateOneRequiredWithoutSyncLogsNestedInput = {
    create?: XOR<UserCreateWithoutSyncLogsInput, UserUncheckedCreateWithoutSyncLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSyncLogsInput
    upsert?: UserUpsertWithoutSyncLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSyncLogsInput, UserUpdateWithoutSyncLogsInput>, UserUncheckedUpdateWithoutSyncLogsInput>
  }

  export type SyncMappingUpdateOneRequiredWithoutSyncLogsNestedInput = {
    create?: XOR<SyncMappingCreateWithoutSyncLogsInput, SyncMappingUncheckedCreateWithoutSyncLogsInput>
    connectOrCreate?: SyncMappingCreateOrConnectWithoutSyncLogsInput
    upsert?: SyncMappingUpsertWithoutSyncLogsInput
    connect?: SyncMappingWhereUniqueInput
    update?: XOR<XOR<SyncMappingUpdateToOneWithWhereWithoutSyncLogsInput, SyncMappingUpdateWithoutSyncLogsInput>, SyncMappingUncheckedUpdateWithoutSyncLogsInput>
  }

  export type UserCreateNestedOneWithoutSupportTicketsInput = {
    create?: XOR<UserCreateWithoutSupportTicketsInput, UserUncheckedCreateWithoutSupportTicketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSupportTicketsInput
    connect?: UserWhereUniqueInput
  }

  export type SupportTicketResponseCreateNestedManyWithoutTicketInput = {
    create?: XOR<SupportTicketResponseCreateWithoutTicketInput, SupportTicketResponseUncheckedCreateWithoutTicketInput> | SupportTicketResponseCreateWithoutTicketInput[] | SupportTicketResponseUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: SupportTicketResponseCreateOrConnectWithoutTicketInput | SupportTicketResponseCreateOrConnectWithoutTicketInput[]
    createMany?: SupportTicketResponseCreateManyTicketInputEnvelope
    connect?: SupportTicketResponseWhereUniqueInput | SupportTicketResponseWhereUniqueInput[]
  }

  export type SupportTicketResponseUncheckedCreateNestedManyWithoutTicketInput = {
    create?: XOR<SupportTicketResponseCreateWithoutTicketInput, SupportTicketResponseUncheckedCreateWithoutTicketInput> | SupportTicketResponseCreateWithoutTicketInput[] | SupportTicketResponseUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: SupportTicketResponseCreateOrConnectWithoutTicketInput | SupportTicketResponseCreateOrConnectWithoutTicketInput[]
    createMany?: SupportTicketResponseCreateManyTicketInputEnvelope
    connect?: SupportTicketResponseWhereUniqueInput | SupportTicketResponseWhereUniqueInput[]
  }

  export type EnumSupportCategoryFieldUpdateOperationsInput = {
    set?: $Enums.SupportCategory
  }

  export type EnumSupportPriorityFieldUpdateOperationsInput = {
    set?: $Enums.SupportPriority
  }

  export type EnumSupportStatusFieldUpdateOperationsInput = {
    set?: $Enums.SupportStatus
  }

  export type UserUpdateOneRequiredWithoutSupportTicketsNestedInput = {
    create?: XOR<UserCreateWithoutSupportTicketsInput, UserUncheckedCreateWithoutSupportTicketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSupportTicketsInput
    upsert?: UserUpsertWithoutSupportTicketsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSupportTicketsInput, UserUpdateWithoutSupportTicketsInput>, UserUncheckedUpdateWithoutSupportTicketsInput>
  }

  export type SupportTicketResponseUpdateManyWithoutTicketNestedInput = {
    create?: XOR<SupportTicketResponseCreateWithoutTicketInput, SupportTicketResponseUncheckedCreateWithoutTicketInput> | SupportTicketResponseCreateWithoutTicketInput[] | SupportTicketResponseUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: SupportTicketResponseCreateOrConnectWithoutTicketInput | SupportTicketResponseCreateOrConnectWithoutTicketInput[]
    upsert?: SupportTicketResponseUpsertWithWhereUniqueWithoutTicketInput | SupportTicketResponseUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: SupportTicketResponseCreateManyTicketInputEnvelope
    set?: SupportTicketResponseWhereUniqueInput | SupportTicketResponseWhereUniqueInput[]
    disconnect?: SupportTicketResponseWhereUniqueInput | SupportTicketResponseWhereUniqueInput[]
    delete?: SupportTicketResponseWhereUniqueInput | SupportTicketResponseWhereUniqueInput[]
    connect?: SupportTicketResponseWhereUniqueInput | SupportTicketResponseWhereUniqueInput[]
    update?: SupportTicketResponseUpdateWithWhereUniqueWithoutTicketInput | SupportTicketResponseUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: SupportTicketResponseUpdateManyWithWhereWithoutTicketInput | SupportTicketResponseUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: SupportTicketResponseScalarWhereInput | SupportTicketResponseScalarWhereInput[]
  }

  export type SupportTicketResponseUncheckedUpdateManyWithoutTicketNestedInput = {
    create?: XOR<SupportTicketResponseCreateWithoutTicketInput, SupportTicketResponseUncheckedCreateWithoutTicketInput> | SupportTicketResponseCreateWithoutTicketInput[] | SupportTicketResponseUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: SupportTicketResponseCreateOrConnectWithoutTicketInput | SupportTicketResponseCreateOrConnectWithoutTicketInput[]
    upsert?: SupportTicketResponseUpsertWithWhereUniqueWithoutTicketInput | SupportTicketResponseUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: SupportTicketResponseCreateManyTicketInputEnvelope
    set?: SupportTicketResponseWhereUniqueInput | SupportTicketResponseWhereUniqueInput[]
    disconnect?: SupportTicketResponseWhereUniqueInput | SupportTicketResponseWhereUniqueInput[]
    delete?: SupportTicketResponseWhereUniqueInput | SupportTicketResponseWhereUniqueInput[]
    connect?: SupportTicketResponseWhereUniqueInput | SupportTicketResponseWhereUniqueInput[]
    update?: SupportTicketResponseUpdateWithWhereUniqueWithoutTicketInput | SupportTicketResponseUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: SupportTicketResponseUpdateManyWithWhereWithoutTicketInput | SupportTicketResponseUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: SupportTicketResponseScalarWhereInput | SupportTicketResponseScalarWhereInput[]
  }

  export type SupportTicketCreateNestedOneWithoutResponsesInput = {
    create?: XOR<SupportTicketCreateWithoutResponsesInput, SupportTicketUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: SupportTicketCreateOrConnectWithoutResponsesInput
    connect?: SupportTicketWhereUniqueInput
  }

  export type SupportTicketUpdateOneRequiredWithoutResponsesNestedInput = {
    create?: XOR<SupportTicketCreateWithoutResponsesInput, SupportTicketUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: SupportTicketCreateOrConnectWithoutResponsesInput
    upsert?: SupportTicketUpsertWithoutResponsesInput
    connect?: SupportTicketWhereUniqueInput
    update?: XOR<XOR<SupportTicketUpdateToOneWithWhereWithoutResponsesInput, SupportTicketUpdateWithoutResponsesInput>, SupportTicketUncheckedUpdateWithoutResponsesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.UserPlan | EnumUserPlanFieldRefInput<$PrismaModel>
    in?: $Enums.UserPlan[] | ListEnumUserPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserPlan[] | ListEnumUserPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumUserPlanFilter<$PrismaModel> | $Enums.UserPlan
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumSignupMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.SignupMethod | EnumSignupMethodFieldRefInput<$PrismaModel>
    in?: $Enums.SignupMethod[] | ListEnumSignupMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignupMethod[] | ListEnumSignupMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumSignupMethodFilter<$PrismaModel> | $Enums.SignupMethod
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserPlan | EnumUserPlanFieldRefInput<$PrismaModel>
    in?: $Enums.UserPlan[] | ListEnumUserPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserPlan[] | ListEnumUserPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumUserPlanWithAggregatesFilter<$PrismaModel> | $Enums.UserPlan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserPlanFilter<$PrismaModel>
    _max?: NestedEnumUserPlanFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumSignupMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SignupMethod | EnumSignupMethodFieldRefInput<$PrismaModel>
    in?: $Enums.SignupMethod[] | ListEnumSignupMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignupMethod[] | ListEnumSignupMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumSignupMethodWithAggregatesFilter<$PrismaModel> | $Enums.SignupMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSignupMethodFilter<$PrismaModel>
    _max?: NestedEnumSignupMethodFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumAuthProviderFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthProvider | EnumAuthProviderFieldRefInput<$PrismaModel>
    in?: $Enums.AuthProvider[] | ListEnumAuthProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthProvider[] | ListEnumAuthProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthProviderFilter<$PrismaModel> | $Enums.AuthProvider
  }

  export type NestedEnumAuthProviderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthProvider | EnumAuthProviderFieldRefInput<$PrismaModel>
    in?: $Enums.AuthProvider[] | ListEnumAuthProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthProvider[] | ListEnumAuthProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthProviderWithAggregatesFilter<$PrismaModel> | $Enums.AuthProvider
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthProviderFilter<$PrismaModel>
    _max?: NestedEnumAuthProviderFilter<$PrismaModel>
  }

  export type NestedEnumSyncDirectionFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncDirection | EnumSyncDirectionFieldRefInput<$PrismaModel>
    in?: $Enums.SyncDirection[] | ListEnumSyncDirectionFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncDirection[] | ListEnumSyncDirectionFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncDirectionFilter<$PrismaModel> | $Enums.SyncDirection
  }

  export type NestedEnumSyncStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncStatus | EnumSyncStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncStatusFilter<$PrismaModel> | $Enums.SyncStatus
  }

  export type NestedEnumSyncDirectionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncDirection | EnumSyncDirectionFieldRefInput<$PrismaModel>
    in?: $Enums.SyncDirection[] | ListEnumSyncDirectionFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncDirection[] | ListEnumSyncDirectionFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncDirectionWithAggregatesFilter<$PrismaModel> | $Enums.SyncDirection
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncDirectionFilter<$PrismaModel>
    _max?: NestedEnumSyncDirectionFilter<$PrismaModel>
  }

  export type NestedEnumSyncStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncStatus | EnumSyncStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncStatusWithAggregatesFilter<$PrismaModel> | $Enums.SyncStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncStatusFilter<$PrismaModel>
    _max?: NestedEnumSyncStatusFilter<$PrismaModel>
  }

  export type NestedEnumSupportCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.SupportCategory | EnumSupportCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.SupportCategory[] | ListEnumSupportCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.SupportCategory[] | ListEnumSupportCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumSupportCategoryFilter<$PrismaModel> | $Enums.SupportCategory
  }

  export type NestedEnumSupportPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.SupportPriority | EnumSupportPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.SupportPriority[] | ListEnumSupportPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.SupportPriority[] | ListEnumSupportPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumSupportPriorityFilter<$PrismaModel> | $Enums.SupportPriority
  }

  export type NestedEnumSupportStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SupportStatus | EnumSupportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SupportStatus[] | ListEnumSupportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SupportStatus[] | ListEnumSupportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSupportStatusFilter<$PrismaModel> | $Enums.SupportStatus
  }

  export type NestedEnumSupportCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SupportCategory | EnumSupportCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.SupportCategory[] | ListEnumSupportCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.SupportCategory[] | ListEnumSupportCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumSupportCategoryWithAggregatesFilter<$PrismaModel> | $Enums.SupportCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSupportCategoryFilter<$PrismaModel>
    _max?: NestedEnumSupportCategoryFilter<$PrismaModel>
  }

  export type NestedEnumSupportPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SupportPriority | EnumSupportPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.SupportPriority[] | ListEnumSupportPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.SupportPriority[] | ListEnumSupportPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumSupportPriorityWithAggregatesFilter<$PrismaModel> | $Enums.SupportPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSupportPriorityFilter<$PrismaModel>
    _max?: NestedEnumSupportPriorityFilter<$PrismaModel>
  }

  export type NestedEnumSupportStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SupportStatus | EnumSupportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SupportStatus[] | ListEnumSupportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SupportStatus[] | ListEnumSupportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSupportStatusWithAggregatesFilter<$PrismaModel> | $Enums.SupportStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSupportStatusFilter<$PrismaModel>
    _max?: NestedEnumSupportStatusFilter<$PrismaModel>
  }

  export type AsanaTokenCreateWithoutUserInput = {
    id?: string
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AsanaTokenUncheckedCreateWithoutUserInput = {
    id?: string
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AsanaTokenCreateOrConnectWithoutUserInput = {
    where: AsanaTokenWhereUniqueInput
    create: XOR<AsanaTokenCreateWithoutUserInput, AsanaTokenUncheckedCreateWithoutUserInput>
  }

  export type AsanaTokenCreateManyUserInputEnvelope = {
    data: AsanaTokenCreateManyUserInput | AsanaTokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SocialAccountCreateWithoutUserInput = {
    id?: string
    provider: $Enums.AuthProvider
    providerId: string
    providerEmail?: string | null
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SocialAccountUncheckedCreateWithoutUserInput = {
    id?: string
    provider: $Enums.AuthProvider
    providerId: string
    providerEmail?: string | null
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SocialAccountCreateOrConnectWithoutUserInput = {
    where: SocialAccountWhereUniqueInput
    create: XOR<SocialAccountCreateWithoutUserInput, SocialAccountUncheckedCreateWithoutUserInput>
  }

  export type SocialAccountCreateManyUserInputEnvelope = {
    data: SocialAccountCreateManyUserInput | SocialAccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OmniFocusSetupCreateWithoutUserInput = {
    id?: string
    agentKey: string
    isActive?: boolean
    version?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OmniFocusSetupUncheckedCreateWithoutUserInput = {
    id?: string
    agentKey: string
    isActive?: boolean
    version?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OmniFocusSetupCreateOrConnectWithoutUserInput = {
    where: OmniFocusSetupWhereUniqueInput
    create: XOR<OmniFocusSetupCreateWithoutUserInput, OmniFocusSetupUncheckedCreateWithoutUserInput>
  }

  export type SyncMappingCreateWithoutUserInput = {
    id?: string
    asanaProjectId: string
    asanaProjectName: string
    ofProjectName: string
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    syncLogs?: SyncLogCreateNestedManyWithoutSyncMappingInput
  }

  export type SyncMappingUncheckedCreateWithoutUserInput = {
    id?: string
    asanaProjectId: string
    asanaProjectName: string
    ofProjectName: string
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    syncLogs?: SyncLogUncheckedCreateNestedManyWithoutSyncMappingInput
  }

  export type SyncMappingCreateOrConnectWithoutUserInput = {
    where: SyncMappingWhereUniqueInput
    create: XOR<SyncMappingCreateWithoutUserInput, SyncMappingUncheckedCreateWithoutUserInput>
  }

  export type SyncMappingCreateManyUserInputEnvelope = {
    data: SyncMappingCreateManyUserInput | SyncMappingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SyncLogCreateWithoutUserInput = {
    id?: string
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    itemssynced?: number
    errorMessage?: string | null
    createdAt?: Date | string
    syncMapping: SyncMappingCreateNestedOneWithoutSyncLogsInput
  }

  export type SyncLogUncheckedCreateWithoutUserInput = {
    id?: string
    syncMappingId: string
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    itemssynced?: number
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type SyncLogCreateOrConnectWithoutUserInput = {
    where: SyncLogWhereUniqueInput
    create: XOR<SyncLogCreateWithoutUserInput, SyncLogUncheckedCreateWithoutUserInput>
  }

  export type SyncLogCreateManyUserInputEnvelope = {
    data: SyncLogCreateManyUserInput | SyncLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SupportTicketCreateWithoutUserInput = {
    id?: string
    name: string
    email: string
    subject: string
    category: $Enums.SupportCategory
    message: string
    priority?: $Enums.SupportPriority
    status?: $Enums.SupportStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    responses?: SupportTicketResponseCreateNestedManyWithoutTicketInput
  }

  export type SupportTicketUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    email: string
    subject: string
    category: $Enums.SupportCategory
    message: string
    priority?: $Enums.SupportPriority
    status?: $Enums.SupportStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    responses?: SupportTicketResponseUncheckedCreateNestedManyWithoutTicketInput
  }

  export type SupportTicketCreateOrConnectWithoutUserInput = {
    where: SupportTicketWhereUniqueInput
    create: XOR<SupportTicketCreateWithoutUserInput, SupportTicketUncheckedCreateWithoutUserInput>
  }

  export type SupportTicketCreateManyUserInputEnvelope = {
    data: SupportTicketCreateManyUserInput | SupportTicketCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AsanaTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: AsanaTokenWhereUniqueInput
    update: XOR<AsanaTokenUpdateWithoutUserInput, AsanaTokenUncheckedUpdateWithoutUserInput>
    create: XOR<AsanaTokenCreateWithoutUserInput, AsanaTokenUncheckedCreateWithoutUserInput>
  }

  export type AsanaTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: AsanaTokenWhereUniqueInput
    data: XOR<AsanaTokenUpdateWithoutUserInput, AsanaTokenUncheckedUpdateWithoutUserInput>
  }

  export type AsanaTokenUpdateManyWithWhereWithoutUserInput = {
    where: AsanaTokenScalarWhereInput
    data: XOR<AsanaTokenUpdateManyMutationInput, AsanaTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type AsanaTokenScalarWhereInput = {
    AND?: AsanaTokenScalarWhereInput | AsanaTokenScalarWhereInput[]
    OR?: AsanaTokenScalarWhereInput[]
    NOT?: AsanaTokenScalarWhereInput | AsanaTokenScalarWhereInput[]
    id?: StringFilter<"AsanaToken"> | string
    userId?: StringFilter<"AsanaToken"> | string
    accessToken?: StringFilter<"AsanaToken"> | string
    refreshToken?: StringNullableFilter<"AsanaToken"> | string | null
    expiresAt?: DateTimeNullableFilter<"AsanaToken"> | Date | string | null
    createdAt?: DateTimeFilter<"AsanaToken"> | Date | string
    updatedAt?: DateTimeFilter<"AsanaToken"> | Date | string
  }

  export type SocialAccountUpsertWithWhereUniqueWithoutUserInput = {
    where: SocialAccountWhereUniqueInput
    update: XOR<SocialAccountUpdateWithoutUserInput, SocialAccountUncheckedUpdateWithoutUserInput>
    create: XOR<SocialAccountCreateWithoutUserInput, SocialAccountUncheckedCreateWithoutUserInput>
  }

  export type SocialAccountUpdateWithWhereUniqueWithoutUserInput = {
    where: SocialAccountWhereUniqueInput
    data: XOR<SocialAccountUpdateWithoutUserInput, SocialAccountUncheckedUpdateWithoutUserInput>
  }

  export type SocialAccountUpdateManyWithWhereWithoutUserInput = {
    where: SocialAccountScalarWhereInput
    data: XOR<SocialAccountUpdateManyMutationInput, SocialAccountUncheckedUpdateManyWithoutUserInput>
  }

  export type SocialAccountScalarWhereInput = {
    AND?: SocialAccountScalarWhereInput | SocialAccountScalarWhereInput[]
    OR?: SocialAccountScalarWhereInput[]
    NOT?: SocialAccountScalarWhereInput | SocialAccountScalarWhereInput[]
    id?: StringFilter<"SocialAccount"> | string
    userId?: StringFilter<"SocialAccount"> | string
    provider?: EnumAuthProviderFilter<"SocialAccount"> | $Enums.AuthProvider
    providerId?: StringFilter<"SocialAccount"> | string
    providerEmail?: StringNullableFilter<"SocialAccount"> | string | null
    accessToken?: StringNullableFilter<"SocialAccount"> | string | null
    refreshToken?: StringNullableFilter<"SocialAccount"> | string | null
    expiresAt?: DateTimeNullableFilter<"SocialAccount"> | Date | string | null
    createdAt?: DateTimeFilter<"SocialAccount"> | Date | string
    updatedAt?: DateTimeFilter<"SocialAccount"> | Date | string
  }

  export type OmniFocusSetupUpsertWithoutUserInput = {
    update: XOR<OmniFocusSetupUpdateWithoutUserInput, OmniFocusSetupUncheckedUpdateWithoutUserInput>
    create: XOR<OmniFocusSetupCreateWithoutUserInput, OmniFocusSetupUncheckedCreateWithoutUserInput>
    where?: OmniFocusSetupWhereInput
  }

  export type OmniFocusSetupUpdateToOneWithWhereWithoutUserInput = {
    where?: OmniFocusSetupWhereInput
    data: XOR<OmniFocusSetupUpdateWithoutUserInput, OmniFocusSetupUncheckedUpdateWithoutUserInput>
  }

  export type OmniFocusSetupUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentKey?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    version?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OmniFocusSetupUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentKey?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    version?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncMappingUpsertWithWhereUniqueWithoutUserInput = {
    where: SyncMappingWhereUniqueInput
    update: XOR<SyncMappingUpdateWithoutUserInput, SyncMappingUncheckedUpdateWithoutUserInput>
    create: XOR<SyncMappingCreateWithoutUserInput, SyncMappingUncheckedCreateWithoutUserInput>
  }

  export type SyncMappingUpdateWithWhereUniqueWithoutUserInput = {
    where: SyncMappingWhereUniqueInput
    data: XOR<SyncMappingUpdateWithoutUserInput, SyncMappingUncheckedUpdateWithoutUserInput>
  }

  export type SyncMappingUpdateManyWithWhereWithoutUserInput = {
    where: SyncMappingScalarWhereInput
    data: XOR<SyncMappingUpdateManyMutationInput, SyncMappingUncheckedUpdateManyWithoutUserInput>
  }

  export type SyncMappingScalarWhereInput = {
    AND?: SyncMappingScalarWhereInput | SyncMappingScalarWhereInput[]
    OR?: SyncMappingScalarWhereInput[]
    NOT?: SyncMappingScalarWhereInput | SyncMappingScalarWhereInput[]
    id?: StringFilter<"SyncMapping"> | string
    userId?: StringFilter<"SyncMapping"> | string
    asanaProjectId?: StringFilter<"SyncMapping"> | string
    asanaProjectName?: StringFilter<"SyncMapping"> | string
    ofProjectName?: StringFilter<"SyncMapping"> | string
    isActive?: BoolFilter<"SyncMapping"> | boolean
    lastSyncAt?: DateTimeNullableFilter<"SyncMapping"> | Date | string | null
    createdAt?: DateTimeFilter<"SyncMapping"> | Date | string
    updatedAt?: DateTimeFilter<"SyncMapping"> | Date | string
  }

  export type SyncLogUpsertWithWhereUniqueWithoutUserInput = {
    where: SyncLogWhereUniqueInput
    update: XOR<SyncLogUpdateWithoutUserInput, SyncLogUncheckedUpdateWithoutUserInput>
    create: XOR<SyncLogCreateWithoutUserInput, SyncLogUncheckedCreateWithoutUserInput>
  }

  export type SyncLogUpdateWithWhereUniqueWithoutUserInput = {
    where: SyncLogWhereUniqueInput
    data: XOR<SyncLogUpdateWithoutUserInput, SyncLogUncheckedUpdateWithoutUserInput>
  }

  export type SyncLogUpdateManyWithWhereWithoutUserInput = {
    where: SyncLogScalarWhereInput
    data: XOR<SyncLogUpdateManyMutationInput, SyncLogUncheckedUpdateManyWithoutUserInput>
  }

  export type SyncLogScalarWhereInput = {
    AND?: SyncLogScalarWhereInput | SyncLogScalarWhereInput[]
    OR?: SyncLogScalarWhereInput[]
    NOT?: SyncLogScalarWhereInput | SyncLogScalarWhereInput[]
    id?: StringFilter<"SyncLog"> | string
    userId?: StringFilter<"SyncLog"> | string
    syncMappingId?: StringFilter<"SyncLog"> | string
    direction?: EnumSyncDirectionFilter<"SyncLog"> | $Enums.SyncDirection
    status?: EnumSyncStatusFilter<"SyncLog"> | $Enums.SyncStatus
    itemssynced?: IntFilter<"SyncLog"> | number
    errorMessage?: StringNullableFilter<"SyncLog"> | string | null
    createdAt?: DateTimeFilter<"SyncLog"> | Date | string
  }

  export type SupportTicketUpsertWithWhereUniqueWithoutUserInput = {
    where: SupportTicketWhereUniqueInput
    update: XOR<SupportTicketUpdateWithoutUserInput, SupportTicketUncheckedUpdateWithoutUserInput>
    create: XOR<SupportTicketCreateWithoutUserInput, SupportTicketUncheckedCreateWithoutUserInput>
  }

  export type SupportTicketUpdateWithWhereUniqueWithoutUserInput = {
    where: SupportTicketWhereUniqueInput
    data: XOR<SupportTicketUpdateWithoutUserInput, SupportTicketUncheckedUpdateWithoutUserInput>
  }

  export type SupportTicketUpdateManyWithWhereWithoutUserInput = {
    where: SupportTicketScalarWhereInput
    data: XOR<SupportTicketUpdateManyMutationInput, SupportTicketUncheckedUpdateManyWithoutUserInput>
  }

  export type SupportTicketScalarWhereInput = {
    AND?: SupportTicketScalarWhereInput | SupportTicketScalarWhereInput[]
    OR?: SupportTicketScalarWhereInput[]
    NOT?: SupportTicketScalarWhereInput | SupportTicketScalarWhereInput[]
    id?: StringFilter<"SupportTicket"> | string
    userId?: StringFilter<"SupportTicket"> | string
    name?: StringFilter<"SupportTicket"> | string
    email?: StringFilter<"SupportTicket"> | string
    subject?: StringFilter<"SupportTicket"> | string
    category?: EnumSupportCategoryFilter<"SupportTicket"> | $Enums.SupportCategory
    message?: StringFilter<"SupportTicket"> | string
    priority?: EnumSupportPriorityFilter<"SupportTicket"> | $Enums.SupportPriority
    status?: EnumSupportStatusFilter<"SupportTicket"> | $Enums.SupportStatus
    createdAt?: DateTimeFilter<"SupportTicket"> | Date | string
    updatedAt?: DateTimeFilter<"SupportTicket"> | Date | string
  }

  export type UserCreateWithoutSocialAccountsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asanaTokens?: AsanaTokenCreateNestedManyWithoutUserInput
    omnifocusSetup?: OmniFocusSetupCreateNestedOneWithoutUserInput
    syncMappings?: SyncMappingCreateNestedManyWithoutUserInput
    syncLogs?: SyncLogCreateNestedManyWithoutUserInput
    supportTickets?: SupportTicketCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSocialAccountsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asanaTokens?: AsanaTokenUncheckedCreateNestedManyWithoutUserInput
    omnifocusSetup?: OmniFocusSetupUncheckedCreateNestedOneWithoutUserInput
    syncMappings?: SyncMappingUncheckedCreateNestedManyWithoutUserInput
    syncLogs?: SyncLogUncheckedCreateNestedManyWithoutUserInput
    supportTickets?: SupportTicketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSocialAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSocialAccountsInput, UserUncheckedCreateWithoutSocialAccountsInput>
  }

  export type UserUpsertWithoutSocialAccountsInput = {
    update: XOR<UserUpdateWithoutSocialAccountsInput, UserUncheckedUpdateWithoutSocialAccountsInput>
    create: XOR<UserCreateWithoutSocialAccountsInput, UserUncheckedCreateWithoutSocialAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSocialAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSocialAccountsInput, UserUncheckedUpdateWithoutSocialAccountsInput>
  }

  export type UserUpdateWithoutSocialAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asanaTokens?: AsanaTokenUpdateManyWithoutUserNestedInput
    omnifocusSetup?: OmniFocusSetupUpdateOneWithoutUserNestedInput
    syncMappings?: SyncMappingUpdateManyWithoutUserNestedInput
    syncLogs?: SyncLogUpdateManyWithoutUserNestedInput
    supportTickets?: SupportTicketUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSocialAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asanaTokens?: AsanaTokenUncheckedUpdateManyWithoutUserNestedInput
    omnifocusSetup?: OmniFocusSetupUncheckedUpdateOneWithoutUserNestedInput
    syncMappings?: SyncMappingUncheckedUpdateManyWithoutUserNestedInput
    syncLogs?: SyncLogUncheckedUpdateManyWithoutUserNestedInput
    supportTickets?: SupportTicketUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAsanaTokensInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    socialAccounts?: SocialAccountCreateNestedManyWithoutUserInput
    omnifocusSetup?: OmniFocusSetupCreateNestedOneWithoutUserInput
    syncMappings?: SyncMappingCreateNestedManyWithoutUserInput
    syncLogs?: SyncLogCreateNestedManyWithoutUserInput
    supportTickets?: SupportTicketCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAsanaTokensInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    socialAccounts?: SocialAccountUncheckedCreateNestedManyWithoutUserInput
    omnifocusSetup?: OmniFocusSetupUncheckedCreateNestedOneWithoutUserInput
    syncMappings?: SyncMappingUncheckedCreateNestedManyWithoutUserInput
    syncLogs?: SyncLogUncheckedCreateNestedManyWithoutUserInput
    supportTickets?: SupportTicketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAsanaTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAsanaTokensInput, UserUncheckedCreateWithoutAsanaTokensInput>
  }

  export type UserUpsertWithoutAsanaTokensInput = {
    update: XOR<UserUpdateWithoutAsanaTokensInput, UserUncheckedUpdateWithoutAsanaTokensInput>
    create: XOR<UserCreateWithoutAsanaTokensInput, UserUncheckedCreateWithoutAsanaTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAsanaTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAsanaTokensInput, UserUncheckedUpdateWithoutAsanaTokensInput>
  }

  export type UserUpdateWithoutAsanaTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    socialAccounts?: SocialAccountUpdateManyWithoutUserNestedInput
    omnifocusSetup?: OmniFocusSetupUpdateOneWithoutUserNestedInput
    syncMappings?: SyncMappingUpdateManyWithoutUserNestedInput
    syncLogs?: SyncLogUpdateManyWithoutUserNestedInput
    supportTickets?: SupportTicketUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAsanaTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    socialAccounts?: SocialAccountUncheckedUpdateManyWithoutUserNestedInput
    omnifocusSetup?: OmniFocusSetupUncheckedUpdateOneWithoutUserNestedInput
    syncMappings?: SyncMappingUncheckedUpdateManyWithoutUserNestedInput
    syncLogs?: SyncLogUncheckedUpdateManyWithoutUserNestedInput
    supportTickets?: SupportTicketUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutOmnifocusSetupInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asanaTokens?: AsanaTokenCreateNestedManyWithoutUserInput
    socialAccounts?: SocialAccountCreateNestedManyWithoutUserInput
    syncMappings?: SyncMappingCreateNestedManyWithoutUserInput
    syncLogs?: SyncLogCreateNestedManyWithoutUserInput
    supportTickets?: SupportTicketCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOmnifocusSetupInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asanaTokens?: AsanaTokenUncheckedCreateNestedManyWithoutUserInput
    socialAccounts?: SocialAccountUncheckedCreateNestedManyWithoutUserInput
    syncMappings?: SyncMappingUncheckedCreateNestedManyWithoutUserInput
    syncLogs?: SyncLogUncheckedCreateNestedManyWithoutUserInput
    supportTickets?: SupportTicketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOmnifocusSetupInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOmnifocusSetupInput, UserUncheckedCreateWithoutOmnifocusSetupInput>
  }

  export type UserUpsertWithoutOmnifocusSetupInput = {
    update: XOR<UserUpdateWithoutOmnifocusSetupInput, UserUncheckedUpdateWithoutOmnifocusSetupInput>
    create: XOR<UserCreateWithoutOmnifocusSetupInput, UserUncheckedCreateWithoutOmnifocusSetupInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOmnifocusSetupInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOmnifocusSetupInput, UserUncheckedUpdateWithoutOmnifocusSetupInput>
  }

  export type UserUpdateWithoutOmnifocusSetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asanaTokens?: AsanaTokenUpdateManyWithoutUserNestedInput
    socialAccounts?: SocialAccountUpdateManyWithoutUserNestedInput
    syncMappings?: SyncMappingUpdateManyWithoutUserNestedInput
    syncLogs?: SyncLogUpdateManyWithoutUserNestedInput
    supportTickets?: SupportTicketUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOmnifocusSetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asanaTokens?: AsanaTokenUncheckedUpdateManyWithoutUserNestedInput
    socialAccounts?: SocialAccountUncheckedUpdateManyWithoutUserNestedInput
    syncMappings?: SyncMappingUncheckedUpdateManyWithoutUserNestedInput
    syncLogs?: SyncLogUncheckedUpdateManyWithoutUserNestedInput
    supportTickets?: SupportTicketUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSyncMappingsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asanaTokens?: AsanaTokenCreateNestedManyWithoutUserInput
    socialAccounts?: SocialAccountCreateNestedManyWithoutUserInput
    omnifocusSetup?: OmniFocusSetupCreateNestedOneWithoutUserInput
    syncLogs?: SyncLogCreateNestedManyWithoutUserInput
    supportTickets?: SupportTicketCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSyncMappingsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asanaTokens?: AsanaTokenUncheckedCreateNestedManyWithoutUserInput
    socialAccounts?: SocialAccountUncheckedCreateNestedManyWithoutUserInput
    omnifocusSetup?: OmniFocusSetupUncheckedCreateNestedOneWithoutUserInput
    syncLogs?: SyncLogUncheckedCreateNestedManyWithoutUserInput
    supportTickets?: SupportTicketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSyncMappingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSyncMappingsInput, UserUncheckedCreateWithoutSyncMappingsInput>
  }

  export type SyncLogCreateWithoutSyncMappingInput = {
    id?: string
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    itemssynced?: number
    errorMessage?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSyncLogsInput
  }

  export type SyncLogUncheckedCreateWithoutSyncMappingInput = {
    id?: string
    userId: string
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    itemssynced?: number
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type SyncLogCreateOrConnectWithoutSyncMappingInput = {
    where: SyncLogWhereUniqueInput
    create: XOR<SyncLogCreateWithoutSyncMappingInput, SyncLogUncheckedCreateWithoutSyncMappingInput>
  }

  export type SyncLogCreateManySyncMappingInputEnvelope = {
    data: SyncLogCreateManySyncMappingInput | SyncLogCreateManySyncMappingInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSyncMappingsInput = {
    update: XOR<UserUpdateWithoutSyncMappingsInput, UserUncheckedUpdateWithoutSyncMappingsInput>
    create: XOR<UserCreateWithoutSyncMappingsInput, UserUncheckedCreateWithoutSyncMappingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSyncMappingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSyncMappingsInput, UserUncheckedUpdateWithoutSyncMappingsInput>
  }

  export type UserUpdateWithoutSyncMappingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asanaTokens?: AsanaTokenUpdateManyWithoutUserNestedInput
    socialAccounts?: SocialAccountUpdateManyWithoutUserNestedInput
    omnifocusSetup?: OmniFocusSetupUpdateOneWithoutUserNestedInput
    syncLogs?: SyncLogUpdateManyWithoutUserNestedInput
    supportTickets?: SupportTicketUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSyncMappingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asanaTokens?: AsanaTokenUncheckedUpdateManyWithoutUserNestedInput
    socialAccounts?: SocialAccountUncheckedUpdateManyWithoutUserNestedInput
    omnifocusSetup?: OmniFocusSetupUncheckedUpdateOneWithoutUserNestedInput
    syncLogs?: SyncLogUncheckedUpdateManyWithoutUserNestedInput
    supportTickets?: SupportTicketUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SyncLogUpsertWithWhereUniqueWithoutSyncMappingInput = {
    where: SyncLogWhereUniqueInput
    update: XOR<SyncLogUpdateWithoutSyncMappingInput, SyncLogUncheckedUpdateWithoutSyncMappingInput>
    create: XOR<SyncLogCreateWithoutSyncMappingInput, SyncLogUncheckedCreateWithoutSyncMappingInput>
  }

  export type SyncLogUpdateWithWhereUniqueWithoutSyncMappingInput = {
    where: SyncLogWhereUniqueInput
    data: XOR<SyncLogUpdateWithoutSyncMappingInput, SyncLogUncheckedUpdateWithoutSyncMappingInput>
  }

  export type SyncLogUpdateManyWithWhereWithoutSyncMappingInput = {
    where: SyncLogScalarWhereInput
    data: XOR<SyncLogUpdateManyMutationInput, SyncLogUncheckedUpdateManyWithoutSyncMappingInput>
  }

  export type UserCreateWithoutSyncLogsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asanaTokens?: AsanaTokenCreateNestedManyWithoutUserInput
    socialAccounts?: SocialAccountCreateNestedManyWithoutUserInput
    omnifocusSetup?: OmniFocusSetupCreateNestedOneWithoutUserInput
    syncMappings?: SyncMappingCreateNestedManyWithoutUserInput
    supportTickets?: SupportTicketCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSyncLogsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asanaTokens?: AsanaTokenUncheckedCreateNestedManyWithoutUserInput
    socialAccounts?: SocialAccountUncheckedCreateNestedManyWithoutUserInput
    omnifocusSetup?: OmniFocusSetupUncheckedCreateNestedOneWithoutUserInput
    syncMappings?: SyncMappingUncheckedCreateNestedManyWithoutUserInput
    supportTickets?: SupportTicketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSyncLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSyncLogsInput, UserUncheckedCreateWithoutSyncLogsInput>
  }

  export type SyncMappingCreateWithoutSyncLogsInput = {
    id?: string
    asanaProjectId: string
    asanaProjectName: string
    ofProjectName: string
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSyncMappingsInput
  }

  export type SyncMappingUncheckedCreateWithoutSyncLogsInput = {
    id?: string
    userId: string
    asanaProjectId: string
    asanaProjectName: string
    ofProjectName: string
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SyncMappingCreateOrConnectWithoutSyncLogsInput = {
    where: SyncMappingWhereUniqueInput
    create: XOR<SyncMappingCreateWithoutSyncLogsInput, SyncMappingUncheckedCreateWithoutSyncLogsInput>
  }

  export type UserUpsertWithoutSyncLogsInput = {
    update: XOR<UserUpdateWithoutSyncLogsInput, UserUncheckedUpdateWithoutSyncLogsInput>
    create: XOR<UserCreateWithoutSyncLogsInput, UserUncheckedCreateWithoutSyncLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSyncLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSyncLogsInput, UserUncheckedUpdateWithoutSyncLogsInput>
  }

  export type UserUpdateWithoutSyncLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asanaTokens?: AsanaTokenUpdateManyWithoutUserNestedInput
    socialAccounts?: SocialAccountUpdateManyWithoutUserNestedInput
    omnifocusSetup?: OmniFocusSetupUpdateOneWithoutUserNestedInput
    syncMappings?: SyncMappingUpdateManyWithoutUserNestedInput
    supportTickets?: SupportTicketUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSyncLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asanaTokens?: AsanaTokenUncheckedUpdateManyWithoutUserNestedInput
    socialAccounts?: SocialAccountUncheckedUpdateManyWithoutUserNestedInput
    omnifocusSetup?: OmniFocusSetupUncheckedUpdateOneWithoutUserNestedInput
    syncMappings?: SyncMappingUncheckedUpdateManyWithoutUserNestedInput
    supportTickets?: SupportTicketUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SyncMappingUpsertWithoutSyncLogsInput = {
    update: XOR<SyncMappingUpdateWithoutSyncLogsInput, SyncMappingUncheckedUpdateWithoutSyncLogsInput>
    create: XOR<SyncMappingCreateWithoutSyncLogsInput, SyncMappingUncheckedCreateWithoutSyncLogsInput>
    where?: SyncMappingWhereInput
  }

  export type SyncMappingUpdateToOneWithWhereWithoutSyncLogsInput = {
    where?: SyncMappingWhereInput
    data: XOR<SyncMappingUpdateWithoutSyncLogsInput, SyncMappingUncheckedUpdateWithoutSyncLogsInput>
  }

  export type SyncMappingUpdateWithoutSyncLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    asanaProjectId?: StringFieldUpdateOperationsInput | string
    asanaProjectName?: StringFieldUpdateOperationsInput | string
    ofProjectName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSyncMappingsNestedInput
  }

  export type SyncMappingUncheckedUpdateWithoutSyncLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    asanaProjectId?: StringFieldUpdateOperationsInput | string
    asanaProjectName?: StringFieldUpdateOperationsInput | string
    ofProjectName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutSupportTicketsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asanaTokens?: AsanaTokenCreateNestedManyWithoutUserInput
    socialAccounts?: SocialAccountCreateNestedManyWithoutUserInput
    omnifocusSetup?: OmniFocusSetupCreateNestedOneWithoutUserInput
    syncMappings?: SyncMappingCreateNestedManyWithoutUserInput
    syncLogs?: SyncLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSupportTicketsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    plan?: $Enums.UserPlan
    isAdmin?: boolean
    monthlyTasksUsed?: number
    lastUsageReset?: Date | string
    emailVerified?: boolean
    signupMethod?: $Enums.SignupMethod
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asanaTokens?: AsanaTokenUncheckedCreateNestedManyWithoutUserInput
    socialAccounts?: SocialAccountUncheckedCreateNestedManyWithoutUserInput
    omnifocusSetup?: OmniFocusSetupUncheckedCreateNestedOneWithoutUserInput
    syncMappings?: SyncMappingUncheckedCreateNestedManyWithoutUserInput
    syncLogs?: SyncLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSupportTicketsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSupportTicketsInput, UserUncheckedCreateWithoutSupportTicketsInput>
  }

  export type SupportTicketResponseCreateWithoutTicketInput = {
    id?: string
    message: string
    isFromUser?: boolean
    createdAt?: Date | string
  }

  export type SupportTicketResponseUncheckedCreateWithoutTicketInput = {
    id?: string
    message: string
    isFromUser?: boolean
    createdAt?: Date | string
  }

  export type SupportTicketResponseCreateOrConnectWithoutTicketInput = {
    where: SupportTicketResponseWhereUniqueInput
    create: XOR<SupportTicketResponseCreateWithoutTicketInput, SupportTicketResponseUncheckedCreateWithoutTicketInput>
  }

  export type SupportTicketResponseCreateManyTicketInputEnvelope = {
    data: SupportTicketResponseCreateManyTicketInput | SupportTicketResponseCreateManyTicketInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSupportTicketsInput = {
    update: XOR<UserUpdateWithoutSupportTicketsInput, UserUncheckedUpdateWithoutSupportTicketsInput>
    create: XOR<UserCreateWithoutSupportTicketsInput, UserUncheckedCreateWithoutSupportTicketsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSupportTicketsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSupportTicketsInput, UserUncheckedUpdateWithoutSupportTicketsInput>
  }

  export type UserUpdateWithoutSupportTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asanaTokens?: AsanaTokenUpdateManyWithoutUserNestedInput
    socialAccounts?: SocialAccountUpdateManyWithoutUserNestedInput
    omnifocusSetup?: OmniFocusSetupUpdateOneWithoutUserNestedInput
    syncMappings?: SyncMappingUpdateManyWithoutUserNestedInput
    syncLogs?: SyncLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSupportTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | $Enums.UserPlan
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    monthlyTasksUsed?: IntFieldUpdateOperationsInput | number
    lastUsageReset?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    signupMethod?: EnumSignupMethodFieldUpdateOperationsInput | $Enums.SignupMethod
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asanaTokens?: AsanaTokenUncheckedUpdateManyWithoutUserNestedInput
    socialAccounts?: SocialAccountUncheckedUpdateManyWithoutUserNestedInput
    omnifocusSetup?: OmniFocusSetupUncheckedUpdateOneWithoutUserNestedInput
    syncMappings?: SyncMappingUncheckedUpdateManyWithoutUserNestedInput
    syncLogs?: SyncLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SupportTicketResponseUpsertWithWhereUniqueWithoutTicketInput = {
    where: SupportTicketResponseWhereUniqueInput
    update: XOR<SupportTicketResponseUpdateWithoutTicketInput, SupportTicketResponseUncheckedUpdateWithoutTicketInput>
    create: XOR<SupportTicketResponseCreateWithoutTicketInput, SupportTicketResponseUncheckedCreateWithoutTicketInput>
  }

  export type SupportTicketResponseUpdateWithWhereUniqueWithoutTicketInput = {
    where: SupportTicketResponseWhereUniqueInput
    data: XOR<SupportTicketResponseUpdateWithoutTicketInput, SupportTicketResponseUncheckedUpdateWithoutTicketInput>
  }

  export type SupportTicketResponseUpdateManyWithWhereWithoutTicketInput = {
    where: SupportTicketResponseScalarWhereInput
    data: XOR<SupportTicketResponseUpdateManyMutationInput, SupportTicketResponseUncheckedUpdateManyWithoutTicketInput>
  }

  export type SupportTicketResponseScalarWhereInput = {
    AND?: SupportTicketResponseScalarWhereInput | SupportTicketResponseScalarWhereInput[]
    OR?: SupportTicketResponseScalarWhereInput[]
    NOT?: SupportTicketResponseScalarWhereInput | SupportTicketResponseScalarWhereInput[]
    id?: StringFilter<"SupportTicketResponse"> | string
    ticketId?: StringFilter<"SupportTicketResponse"> | string
    message?: StringFilter<"SupportTicketResponse"> | string
    isFromUser?: BoolFilter<"SupportTicketResponse"> | boolean
    createdAt?: DateTimeFilter<"SupportTicketResponse"> | Date | string
  }

  export type SupportTicketCreateWithoutResponsesInput = {
    id?: string
    name: string
    email: string
    subject: string
    category: $Enums.SupportCategory
    message: string
    priority?: $Enums.SupportPriority
    status?: $Enums.SupportStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSupportTicketsInput
  }

  export type SupportTicketUncheckedCreateWithoutResponsesInput = {
    id?: string
    userId: string
    name: string
    email: string
    subject: string
    category: $Enums.SupportCategory
    message: string
    priority?: $Enums.SupportPriority
    status?: $Enums.SupportStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SupportTicketCreateOrConnectWithoutResponsesInput = {
    where: SupportTicketWhereUniqueInput
    create: XOR<SupportTicketCreateWithoutResponsesInput, SupportTicketUncheckedCreateWithoutResponsesInput>
  }

  export type SupportTicketUpsertWithoutResponsesInput = {
    update: XOR<SupportTicketUpdateWithoutResponsesInput, SupportTicketUncheckedUpdateWithoutResponsesInput>
    create: XOR<SupportTicketCreateWithoutResponsesInput, SupportTicketUncheckedCreateWithoutResponsesInput>
    where?: SupportTicketWhereInput
  }

  export type SupportTicketUpdateToOneWithWhereWithoutResponsesInput = {
    where?: SupportTicketWhereInput
    data: XOR<SupportTicketUpdateWithoutResponsesInput, SupportTicketUncheckedUpdateWithoutResponsesInput>
  }

  export type SupportTicketUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumSupportCategoryFieldUpdateOperationsInput | $Enums.SupportCategory
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumSupportPriorityFieldUpdateOperationsInput | $Enums.SupportPriority
    status?: EnumSupportStatusFieldUpdateOperationsInput | $Enums.SupportStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSupportTicketsNestedInput
  }

  export type SupportTicketUncheckedUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumSupportCategoryFieldUpdateOperationsInput | $Enums.SupportCategory
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumSupportPriorityFieldUpdateOperationsInput | $Enums.SupportPriority
    status?: EnumSupportStatusFieldUpdateOperationsInput | $Enums.SupportStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AsanaTokenCreateManyUserInput = {
    id?: string
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SocialAccountCreateManyUserInput = {
    id?: string
    provider: $Enums.AuthProvider
    providerId: string
    providerEmail?: string | null
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SyncMappingCreateManyUserInput = {
    id?: string
    asanaProjectId: string
    asanaProjectName: string
    ofProjectName: string
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SyncLogCreateManyUserInput = {
    id?: string
    syncMappingId: string
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    itemssynced?: number
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type SupportTicketCreateManyUserInput = {
    id?: string
    name: string
    email: string
    subject: string
    category: $Enums.SupportCategory
    message: string
    priority?: $Enums.SupportPriority
    status?: $Enums.SupportStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AsanaTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AsanaTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AsanaTokenUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialAccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumAuthProviderFieldUpdateOperationsInput | $Enums.AuthProvider
    providerId?: StringFieldUpdateOperationsInput | string
    providerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialAccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumAuthProviderFieldUpdateOperationsInput | $Enums.AuthProvider
    providerId?: StringFieldUpdateOperationsInput | string
    providerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialAccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumAuthProviderFieldUpdateOperationsInput | $Enums.AuthProvider
    providerId?: StringFieldUpdateOperationsInput | string
    providerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncMappingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    asanaProjectId?: StringFieldUpdateOperationsInput | string
    asanaProjectName?: StringFieldUpdateOperationsInput | string
    ofProjectName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncLogs?: SyncLogUpdateManyWithoutSyncMappingNestedInput
  }

  export type SyncMappingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    asanaProjectId?: StringFieldUpdateOperationsInput | string
    asanaProjectName?: StringFieldUpdateOperationsInput | string
    ofProjectName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncLogs?: SyncLogUncheckedUpdateManyWithoutSyncMappingNestedInput
  }

  export type SyncMappingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    asanaProjectId?: StringFieldUpdateOperationsInput | string
    asanaProjectName?: StringFieldUpdateOperationsInput | string
    ofProjectName?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    itemssynced?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncMapping?: SyncMappingUpdateOneRequiredWithoutSyncLogsNestedInput
  }

  export type SyncLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    syncMappingId?: StringFieldUpdateOperationsInput | string
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    itemssynced?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    syncMappingId?: StringFieldUpdateOperationsInput | string
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    itemssynced?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupportTicketUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumSupportCategoryFieldUpdateOperationsInput | $Enums.SupportCategory
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumSupportPriorityFieldUpdateOperationsInput | $Enums.SupportPriority
    status?: EnumSupportStatusFieldUpdateOperationsInput | $Enums.SupportStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responses?: SupportTicketResponseUpdateManyWithoutTicketNestedInput
  }

  export type SupportTicketUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumSupportCategoryFieldUpdateOperationsInput | $Enums.SupportCategory
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumSupportPriorityFieldUpdateOperationsInput | $Enums.SupportPriority
    status?: EnumSupportStatusFieldUpdateOperationsInput | $Enums.SupportStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responses?: SupportTicketResponseUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type SupportTicketUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumSupportCategoryFieldUpdateOperationsInput | $Enums.SupportCategory
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumSupportPriorityFieldUpdateOperationsInput | $Enums.SupportPriority
    status?: EnumSupportStatusFieldUpdateOperationsInput | $Enums.SupportStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncLogCreateManySyncMappingInput = {
    id?: string
    userId: string
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    itemssynced?: number
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type SyncLogUpdateWithoutSyncMappingInput = {
    id?: StringFieldUpdateOperationsInput | string
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    itemssynced?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSyncLogsNestedInput
  }

  export type SyncLogUncheckedUpdateWithoutSyncMappingInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    itemssynced?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncLogUncheckedUpdateManyWithoutSyncMappingInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    itemssynced?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupportTicketResponseCreateManyTicketInput = {
    id?: string
    message: string
    isFromUser?: boolean
    createdAt?: Date | string
  }

  export type SupportTicketResponseUpdateWithoutTicketInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isFromUser?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupportTicketResponseUncheckedUpdateWithoutTicketInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isFromUser?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupportTicketResponseUncheckedUpdateManyWithoutTicketInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isFromUser?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SyncMappingCountOutputTypeDefaultArgs instead
     */
    export type SyncMappingCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SyncMappingCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupportTicketCountOutputTypeDefaultArgs instead
     */
    export type SupportTicketCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupportTicketCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SocialAccountDefaultArgs instead
     */
    export type SocialAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SocialAccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AsanaTokenDefaultArgs instead
     */
    export type AsanaTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AsanaTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OmniFocusSetupDefaultArgs instead
     */
    export type OmniFocusSetupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OmniFocusSetupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SyncMappingDefaultArgs instead
     */
    export type SyncMappingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SyncMappingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SyncLogDefaultArgs instead
     */
    export type SyncLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SyncLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupportTicketDefaultArgs instead
     */
    export type SupportTicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupportTicketDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupportTicketResponseDefaultArgs instead
     */
    export type SupportTicketResponseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupportTicketResponseDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}