import * as readline from 'readline';
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';
import axios from 'axios';

interface SetupAnswers {
  agentKey: string;
  apiBaseUrl: string;
  syncInterval: string;
  logLevel: string;
}

export class SetupWizard {
  private rl: readline.Interface;

  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  async run(): Promise<void> {
    console.log('\nüéØ AsanaBridge Setup Wizard');
    console.log('‚ïê'.repeat(50));
    console.log('Welcome! Let\'s get your AsanaBridge agent configured.\n');

    try {
      const answers = await this.collectAnswers();
      await this.saveConfiguration(answers);
      await this.testConnection(answers);
      
      console.log('\n‚úÖ Setup completed successfully!');
      console.log('Your AsanaBridge agent is now ready to run.');
      console.log('\nNext steps:');
      console.log('1. The agent will start automatically');
      console.log('2. Check your AsanaBridge dashboard to verify connection');
      console.log('3. Your tasks will sync every', answers.syncInterval, 'minutes\n');
      
    } catch (error) {
      console.error('\n‚ùå Setup failed:', error);
      process.exit(1);
    } finally {
      this.rl.close();
    }
  }

  private async collectAnswers(): Promise<SetupAnswers> {
    console.log('üìù Please provide the following information:\n');

    const agentKey = await this.askQuestion(
      'üîë Agent Key (from your AsanaBridge dashboard): ',
      (input) => {
        if (!input || input.length < 32) {
          return 'Agent key must be at least 32 characters long';
        }
        return null;
      }
    );

    const apiBaseUrl = await this.askQuestion(
      'üåê API Base URL (default: https://asanabridge.com): ',
      (input) => {
        const url = input || 'https://asanabridge.com';
        try {
          new URL(url);
          return null;
        } catch {
          return 'Please enter a valid URL';
        }
      }
    );

    // Note: Sync interval will be determined by user's plan on the server
    const syncInterval = await this.askQuestion(
      '‚è±Ô∏è  Sync interval in minutes (Free: 60, Pro: 5-60, default: 60): ',
      (input) => {
        const interval = parseInt(input || '60');
        if (isNaN(interval) || interval < 5 || interval > 1440) {
          return 'Please enter a number between 5 and 1440 (24 hours)';
        }
        return null;
      }
    );

    const logLevel = await this.askQuestion(
      'üìä Log level (debug/info/warn/error, default: info): ',
      (input) => {
        const level = input || 'info';
        if (!['debug', 'info', 'warn', 'error'].includes(level)) {
          return 'Please choose: debug, info, warn, or error';
        }
        return null;
      }
    );

    return {
      agentKey,
      apiBaseUrl: apiBaseUrl || 'https://asanabridge.com',
      syncInterval: syncInterval || '60',
      logLevel: logLevel || 'info'
    };
  }

  private async askQuestion(question: string, validator?: (input: string) => string | null): Promise<string> {
    return new Promise((resolve) => {
      const ask = () => {
        this.rl.question(question, (answer) => {
          if (validator) {
            const error = validator(answer);
            if (error) {
              console.log(`‚ùå ${error}`);
              ask();
              return;
            }
          }
          resolve(answer);
        });
      };
      ask();
    });
  }

  private async saveConfiguration(answers: SetupAnswers): Promise<void> {
    console.log('\nüíæ Saving configuration...');

    const configContent = `# AsanaBridge Agent Configuration
# Generated by setup wizard on ${new Date().toISOString()}

# Your unique agent key from AsanaBridge dashboard
AGENT_KEY=${answers.agentKey}

# AsanaBridge web service URL
API_BASE_URL=${answers.apiBaseUrl}

# Sync frequency (minutes)
SYNC_INTERVAL_MINUTES=${answers.syncInterval}

# Logging level
LOG_LEVEL=${answers.logLevel}
`;

    // Determine config file location
    const configPath = this.getConfigPath();
    
    try {
      // Ensure directory exists
      const configDir = path.dirname(configPath);
      if (!fs.existsSync(configDir)) {
        fs.mkdirSync(configDir, { recursive: true });
      }

      // Write config file
      fs.writeFileSync(configPath, configContent);
      console.log(`‚úÖ Configuration saved to: ${configPath}`);
      
      // Set environment variables for immediate use
      process.env.AGENT_KEY = answers.agentKey;
      process.env.API_BASE_URL = answers.apiBaseUrl;
      process.env.SYNC_INTERVAL_MINUTES = answers.syncInterval;
      process.env.LOG_LEVEL = answers.logLevel;
      
    } catch (error) {
      throw new Error(`Failed to save configuration: ${error}`);
    }
  }

  private getConfigPath(): string {
    // Try to save in the same directory as the executable
    const exePath = process.argv[0];
    const exeDir = path.dirname(exePath);
    
    // Check if we can write to exe directory
    try {
      const testFile = path.join(exeDir, '.write-test');
      fs.writeFileSync(testFile, 'test');
      fs.unlinkSync(testFile);
      return path.join(exeDir, '.env');
    } catch {
      // Fall back to user home directory
      return path.join(os.homedir(), '.asanabridge', '.env');
    }
  }

  private async testConnection(answers: SetupAnswers): Promise<void> {
    console.log('\nüîç Testing connection to AsanaBridge...');
    
    try {
      const response = await axios.get(`${answers.apiBaseUrl}/api/health`, {
        headers: {
          'Authorization': `Bearer ${answers.agentKey}`,
          'User-Agent': 'AsanaBridge-Setup/0.1.0'
        },
        timeout: 10000
      });

      if (response.status === 200) {
        console.log('‚úÖ Connection successful!');
      } else {
        console.log('‚ö†Ô∏è  Connection test inconclusive, but configuration saved.');
      }
    } catch (error: any) {
      if (error.response?.status === 401) {
        throw new Error('Invalid agent key. Please check your key from the AsanaBridge dashboard.');
      } else if (error.code === 'ECONNREFUSED') {
        console.log('‚ö†Ô∏è  Could not connect to AsanaBridge service. This may be temporary.');
        console.log('   Configuration saved and agent will retry when started.');
      } else {
        console.log('‚ö†Ô∏è  Connection test failed, but configuration saved.');
        console.log('   Error:', error.message);
      }
    }
  }

  static async checkAndRunSetup(): Promise<boolean> {
    // Load dotenv in various locations
    const possiblePaths = [
      path.join(process.cwd(), '.env'),
      path.join(path.dirname(process.argv[0]), '.env'),
      path.join(os.homedir(), '.asanabridge', '.env')
    ];

    for (const envPath of possiblePaths) {
      if (fs.existsSync(envPath)) {
        try {
          require('dotenv').config({ path: envPath });
          // Test if we have the required environment variables
          if (process.env.AGENT_KEY && process.env.AGENT_KEY.length >= 32) {
            return false; // Configuration exists and looks valid
          }
        } catch {
          // Continue to next path
        }
      }
    }

    // Check environment variables directly (in case they're set without .env file)
    if (process.env.AGENT_KEY && process.env.AGENT_KEY.length >= 32) {
      return false; // Configuration exists
    }

    // No valid configuration found, run setup
    const wizard = new SetupWizard();
    await wizard.run();
    return true;
  }
}