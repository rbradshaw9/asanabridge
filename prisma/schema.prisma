// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  plan      UserPlan @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // OAuth tokens
  asanaTokens    AsanaToken[]
  omnifocusSetup OmniFocusSetup?

  // Sync relationships
  syncMappings SyncMapping[]
  syncLogs     SyncLog[]

  @@map("users")
}

model AsanaToken {
  id           String   @id @default(cuid())
  userId       String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("asana_tokens")
}

model OmniFocusSetup {
  id        String   @id @default(cuid())
  userId    String   @unique
  agentKey  String   @unique // Secret key for local agent auth
  isActive  Boolean  @default(false)
  version   String? // "3" or "4"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("omnifocus_setups")
}

model SyncMapping {
  id               String   @id @default(cuid())
  userId           String
  asanaProjectId   String
  asanaProjectName String
  ofProjectName    String
  isActive         Boolean  @default(true)
  lastSyncAt       DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  syncLogs SyncLog[]

  @@unique([userId, asanaProjectId])
  @@map("sync_mappings")
}

model SyncLog {
  id            String     @id @default(cuid())
  userId        String
  syncMappingId String
  direction     SyncDirection
  status        SyncStatus
  itemssynced   Int        @default(0)
  errorMessage  String?
  createdAt     DateTime   @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  syncMapping SyncMapping @relation(fields: [syncMappingId], references: [id], onDelete: Cascade)

  @@map("sync_logs")
}

enum UserPlan {
  FREE
  PRO
}

enum SyncDirection {
  ASANA_TO_OF
  OF_TO_ASANA
  BIDIRECTIONAL
}

enum SyncStatus {
  PENDING
  RUNNING
  SUCCESS
  ERROR
}