import { Router, Request, Response } from 'express';
import bcrypt from 'bcrypt';
import { passport } from '../config/passport';
import { generateToken, authenticateToken, AuthenticatedRequest } from '../services/auth';
import { logger } from '../config/logger';
import { prisma } from '../config/database';
import { loadEnv } from '../config/env';
import { z } from 'zod';

const router = Router();
const env = loadEnv();

// Validation schemas
const registerSchema = z.object({
  email: z.string().email('Invalid email format'),
  password: z.string().min(8, 'Password must be at least 8 characters'),
  name: z.string().min(1, 'Name is required').optional()
});

const loginSchema = z.object({
  email: z.string().email('Invalid email format'),
  password: z.string().min(1, 'Password is required')
});

// =============================================================================
// EMAIL/PASSWORD AUTHENTICATION
// =============================================================================

// User registration
router.post('/register', async (req: Request, res: Response) => {
  try {
    const { email, password, name } = registerSchema.parse(req.body);
    
    // Check if user already exists
    const existingUser = await prisma.user.findUnique({
      where: { email: email.toLowerCase() }
    });
    
    if (existingUser) {
      return res.status(400).json({ error: 'User with this email already exists' });
    }
    
    // Hash password
    const hashedPassword = await bcrypt.hash(password, 12);
    
    // Create user
    const user = await prisma.user.create({
      data: {
        email: email.toLowerCase(),
        password: hashedPassword,
        name: name || null,
        signupMethod: 'EMAIL',
        emailVerified: false // In production, send verification email
      },
      select: {
        id: true,
        email: true,
        name: true,
        plan: true,
        signupMethod: true,
        createdAt: true
      }
    });
    
    // Generate JWT token
    const token = generateToken(user.id);
    
    logger.info('User registered successfully', { 
      userId: user.id, 
      email: user.email,
      method: 'email'
    });
    
    res.status(201).json({
      message: 'User registered successfully',
      user,
      token
    });
    
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ 
        error: 'Validation failed', 
        details: error.errors 
      });
    }
    
    logger.error('Registration error', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// User login
router.post('/login', async (req: Request, res: Response) => {
  try {
    const { email, password } = loginSchema.parse(req.body);
    
    // Find user
    const user = await prisma.user.findUnique({
      where: { email: email.toLowerCase() },
      include: {
        socialAccounts: true,
        asanaTokens: true
      }
    });
    
    if (!user) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }
    
    if (!user.password) {
      const socialMethods = user.socialAccounts.map(acc => acc.provider.toLowerCase()).join(', ');
      return res.status(401).json({ 
        error: `Please sign in with your ${socialMethods} account` 
      });
    }
    
    // Verify password
    const isValidPassword = await bcrypt.compare(password, user.password);
    if (!isValidPassword) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }
    
    // Update last login
    await prisma.user.update({
      where: { id: user.id },
      data: { lastLoginAt: new Date() }
    });
    
    // Generate JWT token
    const token = generateToken(user.id);
    
    logger.info('User logged in successfully', { 
      userId: user.id, 
      email: user.email,
      method: 'email'
    });
    
    res.json({
      message: 'Login successful',
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        plan: user.plan,
        signupMethod: user.signupMethod,
        hasAsanaConnection: user.asanaTokens.length > 0
      },
      token
    });
    
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ 
        error: 'Validation failed', 
        details: error.errors 
      });
    }
    
    logger.error('Login error', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// =============================================================================
// SOCIAL AUTHENTICATION ROUTES
// =============================================================================

// Google OAuth
router.get('/google', 
  passport.authenticate('google', { scope: ['profile', 'email'] })
);

router.get('/google/callback',
  passport.authenticate('google', { session: false }),
  async (req: Request, res: Response) => {
    try {
      const user = req.user as any;
      const token = generateToken(user.id);
      
      // Redirect to frontend with token
      const redirectUrl = `${env.FRONTEND_URL}/auth/callback?token=${token}&provider=google`;
      res.redirect(redirectUrl);
    } catch (error) {
      logger.error('Google OAuth callback error', error);
      res.redirect(`${env.FRONTEND_URL}/auth/error?provider=google`);
    }
  }
);

// GitHub OAuth
router.get('/github',
  passport.authenticate('github', { scope: ['user:email'] })
);

router.get('/github/callback',
  passport.authenticate('github', { session: false }),
  async (req: Request, res: Response) => {
    try {
      const user = req.user as any;
      const token = generateToken(user.id);
      
      const redirectUrl = `${env.FRONTEND_URL}/auth/callback?token=${token}&provider=github`;
      res.redirect(redirectUrl);
    } catch (error) {
      logger.error('GitHub OAuth callback error', error);
      res.redirect(`${env.FRONTEND_URL}/auth/error?provider=github`);
    }
  }
);

// Microsoft OAuth
router.get('/microsoft',
  passport.authenticate('microsoft', { scope: ['user.read'] })
);

router.get('/microsoft/callback',
  passport.authenticate('microsoft', { session: false }),
  async (req: Request, res: Response) => {
    try {
      const user = req.user as any;
      const token = generateToken(user.id);
      
      const redirectUrl = `${env.FRONTEND_URL}/auth/callback?token=${token}&provider=microsoft`;
      res.redirect(redirectUrl);
    } catch (error) {
      logger.error('Microsoft OAuth callback error', error);
      res.redirect(`${env.FRONTEND_URL}/auth/error?provider=microsoft`);
    }
  }
);

// =============================================================================
// USER PROFILE & SESSION MANAGEMENT
// =============================================================================

// Get current user profile
router.get('/me', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
  try {
    const user = await prisma.user.findUnique({
      where: { id: req.user!.userId },
      select: {
        id: true,
        email: true,
        name: true,
        avatar: true,
        plan: true,
        signupMethod: true,
        emailVerified: true,
        monthlyTasksUsed: true,
        lastUsageReset: true,
        createdAt: true,
        lastLoginAt: true,
        socialAccounts: {
          select: {
            provider: true,
            createdAt: true
          }
        },
        asanaTokens: {
          select: {
            id: true,
            createdAt: true,
            expiresAt: true
          }
        }
      }
    });
    
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    res.json({
      user: {
        ...user,
        hasAsanaConnection: user.asanaTokens.length > 0,
        connectedProviders: user.socialAccounts.map(acc => acc.provider.toLowerCase())
      }
    });
    
  } catch (error) {
    logger.error('Get user profile error', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Update user profile
router.patch('/me', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
  try {
    const updateSchema = z.object({
      name: z.string().min(1).optional(),
      avatar: z.string().url().optional()
    });
    
    const updates = updateSchema.parse(req.body);
    
    const user = await prisma.user.update({
      where: { id: req.user!.userId },
      data: updates,
      select: {
        id: true,
        email: true,
        name: true,
        avatar: true,
        plan: true
      }
    });
    
    res.json({ user });
    
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ 
        error: 'Validation failed', 
        details: error.errors 
      });
    }
    
    logger.error('Update profile error', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Logout (with JWT, just respond successfully - token invalidation would require token blacklisting)
router.post('/logout', authenticateToken, (req: AuthenticatedRequest, res: Response) => {
  logger.info('User logged out', { userId: req.user!.userId });
  res.json({ message: 'Logged out successfully' });
});

// =============================================================================
// ACCOUNT LINKING
// =============================================================================

// Link social account to existing account
router.post('/link/:provider', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
  const { provider } = req.params;
  const validProviders = ['google', 'github', 'microsoft'];
  
  if (!validProviders.includes(provider)) {
    return res.status(400).json({ error: 'Invalid provider' });
  }
  
  // Redirect to OAuth flow with state parameter containing user ID
  const authUrl = `/auth/${provider}?state=link:${req.user!.userId}`;
  res.json({ authUrl });
});

export default router;